
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/migration/use_v2.0.x_cc.Toggle_event');
require('./assets/scripts/AgentObj');
require('./assets/scripts/AllCard');
require('./assets/scripts/ArcSprite');
require('./assets/scripts/Arrow');
require('./assets/scripts/BaseSprite');
require('./assets/scripts/BeeSprite');
require('./assets/scripts/BloodBar');
require('./assets/scripts/Bomb');
require('./assets/scripts/BombScript');
require('./assets/scripts/BuffProcess');
require('./assets/scripts/Common');
require('./assets/scripts/Dictionary');
require('./assets/scripts/EffectSprite');
require('./assets/scripts/Game');
require('./assets/scripts/GameData');
require('./assets/scripts/GameProvider');
require('./assets/scripts/GiantSprite');
require('./assets/scripts/GunSprite');
require('./assets/scripts/HeroSprite');
require('./assets/scripts/KingSprite');
require('./assets/scripts/LightmanSprite');
require('./assets/scripts/LogSprite');
require('./assets/scripts/MenuScript');
require('./assets/scripts/MySprite');
require('./assets/scripts/Order1Sprite');
require('./assets/scripts/Order2Sprite');
require('./assets/scripts/Order9Sprite');
require('./assets/scripts/Result');
require('./assets/scripts/SelCard');
require('./assets/scripts/SelLayout');
require('./assets/scripts/SkeSprite');
require('./assets/scripts/SocketProvider');
require('./assets/scripts/SpriteIndex');
require('./assets/scripts/Welcome');
require('./assets/scripts/WizSprite');
require('./assets/scripts/Word3Sprite');
require('./assets/scripts/acdata1');
require('./assets/scripts/aniComponent');
require('./assets/scripts/protobuf');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/GunSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2fe15M3k5hEtLqG347kT1t6', 'GunSprite');
// scripts/GunSprite.js

"use strict";

var common = require("Common"); // Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html


cc.Class({
  "extends": cc.Component,
  properties: {
    role: "gun"
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this._animation = this.getComponent(cc.Animation);
    this._animation.WrapMode = cc.WrapMode.Loop;
  },
  isEnemyBase: function isEnemyBase(baseId) {
    if (baseId == 1 || baseId == 2 || baseId == 3) {
      return true;
    } else {
      return false;
    }
  },
  playBaseWarriorAnimationDefault: function playBaseWarriorAnimationDefault(actType, isMainPlayer, baseId) {
    var actName;

    if (this.isEnemyBase(baseId)) {
      actName = "ar_s_walk";
    } else {
      actName = "ar_n_walk";
    }

    if (actType == "move" && this.lastAct == actName) {
      return;
    }

    var randomTime = Math.ceil(Math.random() * 125) / 100;

    this._animation.play(actName, randomTime);

    this.lastAct = actName;
  },
  playBaseWarriorAnimation: function playBaseWarriorAnimation(agent, isMainPlayer, actType) {
    var fx, fy;
    var targetYOffset = common.attackTargetYOffset;
    var ex, ey;
    var angle;
    var x = agent.mypos.x;
    var y = agent.mypos.y; //gun is located on the up&down inside base, 
    //but default attack point is in the central of the base, so angle may need to ajust.

    if (agent.objectId == 1) {
      y = agent.mypos.y + 1;
    } else if (agent.objectId == 4) {
      y = agent.mypos.y - 0;
    }

    var startPos, targetPos, startEPos, targetEPos, vt, vtE;
    var randomTime = Math.ceil(Math.random() * 125) / 100;
    var actName = "";
    var then;
    var angleInfo; // user to control the up and down user Y postion offset.

    var offsetDir = 1;

    if (isMainPlayer == 1) {
      offsetDir = 1;
    } else if (isMainPlayer == 2) {
      offsetDir = -1;
    }

    ex = agent.enemypos.x;
    ey = agent.enemypos.y; // dir according to enemy position

    startPos = cc.v2(x * 30, y * 30); //targetPos = cc.v2((ex)*30, (ey)*30+targetYOffset*offsetDir);

    targetPos = cc.v2(ex * 30, ey * 30);
    vt = startPos.sub(targetPos);

    if (vt.x == 0 && vt.y == 0) {
      return;
    } //if postion not changed, do nothing, or the math.atan will do error.


    if (vt.x != 0 && vt.y != 0) {
      var ag = 180 / Math.PI * Math.atan(vt.x / vt.y);
      angle = ag; //if base is up, left right angle should be ajusted.

      if (vt.y >= 0 && vt.x < 0) {
        angle = ag + 180;
      } else if (vt.y >= 0 && vt.x >= 0) {
        angle = ag - 180;
      }
    }

    if (this._animation) {
      console.log(angle);
      angleInfo = this.getActnameByAngle(angle, actType);
      actName = angleInfo.actName; //used to mirror a sprite.

      this.node.scaleX = angleInfo.scaleX; //if already in attack mode, just skip the animation

      if (this.lastAct != actName || actType == "sa") {
        if (actType == "sa") {
          this._animation.stop();

          this._animation.play(actName);
        } else {
          //walking action.
          this._animation.play(actName, randomTime);
        }

        this.angle = angle;
        this.lastAct = actName;
        this.lastScaleX = angleInfo.scaleX;
      }
    }
  },
  getActnameByAngle: function getActnameByAngle(angle, actType) {
    var actName = "";
    var scaleX = 1;
    var ret = {};

    if (angle >= 0 && angle <= 7.5 * 1) {
      if (actType == "move") {
        actName = "n_walk";
      } else if (actType == "sa") {
        actName = "n_attack";
      }
    } else if (angle > 7.5 * 1 && angle <= 7.5 * 3) {
      if (actType == "move") {
        actName = "en5_walk";
      } else if (actType == "sa") {
        actName = "en5_attack";
      }
    } else if (angle > 7.5 * 3 && angle <= 7.5 * 5) {
      if (actType == "move") {
        actName = "en4_walk";
      } else if (actType == "sa") {
        actName = "en4_attack";
      }
    } else if (angle > 7.5 * 5 && angle <= 7.5 * 7) {
      if (actType == "move") {
        actName = "en3_walk";
      } else if (actType == "sa") {
        actName = "en3_attack";
      }
    } else if (angle > 7.5 * 7 && angle <= 7.5 * 9) {
      if (actType == "move") {
        actName = "en2_walk";
      } else if (actType == "sa") {
        actName = "en2_attack";
      }
    } else if (angle > 7.5 * 9 && angle <= 7.5 * 11) {
      if (actType == "move") {
        actName = "en1_walk";
      } else if (actType == "sa") {
        actName = "en1_attack";
      }
    } else if (angle > 7.5 * 11 && angle <= 7.5 * 13) {
      if (actType == "move") {
        actName = "e_walk";
      } else if (actType == "sa") {
        actName = "e_attack";
      }
    } else if (angle > 7.5 * 13 && angle <= 7.5 * 15) {
      if (actType == "move") {
        actName = "se1_walk";
      } else if (actType == "sa") {
        actName = "se1_attack";
      }
    } else if (angle > 7.5 * 15 && angle <= 7.5 * 17) {
      if (actType == "move") {
        actName = "se2_walk";
      } else if (actType == "sa") {
        actName = "se2_attack";
      }
    } else if (angle > 7.5 * 17 && angle <= 7.5 * 19) {
      if (actType == "move") {
        actName = "se3_walk";
      } else if (actType == "sa") {
        actName = "se3_attack";
      }
    } else if (angle > 7.5 * 19 && angle <= 7.5 * 21) {
      if (actType == "move") {
        actName = "se4_walk";
      } else if (actType == "sa") {
        actName = "se4_attack";
      }
    } else if (angle > 7.5 * 21 && angle <= 7.5 * 23) {
      if (actType == "move") {
        actName = "se5_walk";
      } else if (actType == "sa") {
        actName = "se5_attack";
      }
    } else if (angle > 7.5 * 21 && angle <= 7.5 * 23) {
      if (actType == "move") {
        actName = "s_walk";
      } else if (actType == "sa") {
        actName = "s_attack";
      }
    } else if (angle < 0 && angle >= 7.5 * -1) {
      if (actType == "move") {
        actName = "n_walk";
      } else if (actType == "sa") {
        actName = "n_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -1 && angle >= 7.5 * -3) {
      if (actType == "move") {
        actName = "en5_walk";
      } else if (actType == "sa") {
        actName = "en5_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -3 && angle >= 7.5 * -5) {
      if (actType == "move") {
        actName = "en4_walk";
      } else if (actType == "sa") {
        actName = "en4_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -5 && angle >= 7.5 * -7) {
      if (actType == "move") {
        actName = "en3_walk";
      } else if (actType == "sa") {
        actName = "en3_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -7 && angle >= 7.5 * -9) {
      if (actType == "move") {
        actName = "en2_walk";
      } else if (actType == "sa") {
        actName = "en2_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -9 && angle >= 7.5 * -11) {
      if (actType == "move") {
        actName = "en1_walk";
      } else if (actType == "sa") {
        actName = "en1_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -11 && angle >= 7.5 * -13) {
      if (actType == "move") {
        actName = "e_walk";
      } else if (actType == "sa") {
        actName = "e_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -13 && angle >= 7.5 * -15) {
      if (actType == "move") {
        actName = "se1_walk";
      } else if (actType == "sa") {
        actName = "se1_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -15 && angle >= 7.5 * -17) {
      if (actType == "move") {
        actName = "se2_walk";
      } else if (actType == "sa") {
        actName = "se2_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -17 && angle >= 7.5 * -19) {
      if (actType == "move") {
        actName = "se3_walk";
      } else if (actType == "sa") {
        actName = "se3_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -19 && angle >= 7.5 * -21) {
      if (actType == "move") {
        actName = "se4_walk";
      } else if (actType == "sa") {
        actName = "se4_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -21 && angle >= 7.5 * -23) {
      if (actType == "move") {
        actName = "se5_walk";
      } else if (actType == "sa") {
        actName = "se5_attack";
      }

      scaleX = -1;
    } else if (angle < 7.5 * -23) {
      if (actType == "move") {
        actName = "s_walk";
      } else if (actType == "sa") {
        actName = "s_attack";
      }

      scaleX = -1;
    } else {
      console.log("------:" + angle);
    }

    actName = this.role + "_" + actName;
    ret.actName = actName;
    ret.scaleX = scaleX;
    return ret;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/SelLayout.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '82e7bMCmi1Ex52PP3o8kNpv', 'SelLayout');
// scripts/SelLayout.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
// 定义一个判断函数
String.prototype.inArray = function (arr) {
  // 不是数组则抛出异常
  if (!arr) {
    console.log("ERR(in_array):Input is not an array");
  } // 遍历是否在数组中


  for (var i = 0, k = arr.length; i < k; i++) {
    if (this == arr[i]) {
      return true;
    }
  } // 如果不在数组中就会返回false


  return false;
};

cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    // 这个属性引用了预制资源
    playerPrefab: {
      "default": [],
      type: cc.Prefab
    },
    startBut1: cc.Button,
    startBut2: cc.Button,
    startBut3: cc.Button
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  onLoad: function onLoad() {
    var _self = this;

    this.startBut1.getComponent(cc.Button).interactable = false;
    this.startBut2.getComponent(cc.Button).interactable = false;
    this.startBut3.getComponent(cc.Button).interactable = false;
    var choosenCard = {};
    this.allCardNodes = [];
    this.myCardNodes = [];
    this.agentsDef = this.getPersistantData();
    this.node.on(cc.Node.EventType.TOUCH_END, function (params) {
      _self.unselect();
    });
    var node = cc.find('GameData').getComponent('GameData');
    var dataobj;
    this.username = node.getName(); //default roles for a user. other may need to get via video or relay.

    this.baseRoles = ["bee", "ske", "ir", "lr", "log", "lm", "hr"];
    this.wxRelayTime;
    node.httpPost(this.username, "").then(function (data) {
      console.log("------------GameData------------------");
      console.log(data);
      dataobj = JSON.parse(data);
      _self.agentsDef = dataobj;
      node.setData(dataobj);

      _self.setMyCards();

      _self.setAllCards();

      _self.setScore();

      _self.setUser();

      setTimeout(function () {
        _self.startBut1.getComponent(cc.Button).interactable = true;
        _self.startBut2.getComponent(cc.Button).interactable = true;
        _self.startBut3.getComponent(cc.Button).interactable = true;
      }, 2000);
    }, function (err) {
      //if no connection then use default data for test.
      data = "{\"name\":null,\"level\":1,\"myscore\":1000,\"nextscore\":1500,\"basescore\":20,\"allList\":[\"log\",\"bomb\",\"ske\",\"ir\",\"hr\",\"bee\",\"gi\",\"lm\",\"lr\",\"wiz\"],\"myList\":[\"log\",\"hr\",\"bee\",\"ske\",\"wiz\"],\"log\":{\"disp\":\"\u30DE\u30EB\u30BF\",\"level\":1,\"cost\":3},\"bomb\":{\"disp\":\"\u30DF\u30B5\u30A4\u30EB\",\"level\":1,\"cost\":4},\"ske\":{\"disp\":\"\u30B9\u30B1\u30EB\",\"level\":1,\"cost\":1},\"ir\":{\"disp\":\"\u30CA\u30A4\u30C8\",\"level\":1,\"cost\":3},\"hr\":{\"disp\":\"\u30EC\u30C3\u30C9\",\"level\":1,\"cost\":4},\"bee\":{\"disp\":\"\u30D0\u30C1\",\"level\":1,\"cost\":1},\"gi\":{\"disp\":\"\u77F3\u30DE\u30F3\",\"level\":1,\"cost\":4},\"lm\":{\"disp\":\"\u30BD\u30EB\",\"level\":1,\"cost\":3},\"lr\":{\"disp\":\"\u30A2\u30FC\u30C1\u30E3\u30FC\",\"level\":1,\"cost\":2},\"wiz\":{\"disp\":\"\u30A6\u30A3\u30BA\",\"level\":1,\"cost\":5}}";
      dataobj = JSON.parse(data);
      _self.agentsDef = dataobj;
      node.setData(dataobj);

      _self.setMyCards();

      _self.setAllCards();

      _self.setScore();

      _self.setUser();

      _self.startBut1.getComponent(cc.Button).interactable = true;
      _self.startBut2.getComponent(cc.Button).interactable = true;
      _self.startBut3.getComponent(cc.Button).interactable = true;
    });
  },
  start: function start() {
    var node = cc.find('GameData').getComponent('GameData');
    console.log("upgraded:" + node.isUpgrade);
    /*
            var _self = this;
            //var name = this.getRandomCharName();
            var node = cc.find('GameData').getComponent('GameData');
            var dataobj;
            this.username = node.getName();
    
            node.httpPost(this.username, "").then((data) => {
                console.log("------------GameData------------------");
                console.log(data);
                dataobj = JSON.parse(data);
                _self.agentsDef = dataobj;
                node.setData(dataobj);
                _self.setMyCards();
                _self.setAllCards();
                _self.setScore();
                _self.setUser();
    
                _self.startBut1.getComponent(cc.Button).interactable = true;
            }, (err) => {   //if no connection then use default data for test.
                _self.setMyCards();
                _self.setAllCards();
                _self.setScore();
                _self.setUser();
            });
    */
  },
  getRandomCharName: function getRandomCharName() {
    var aphabets = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    var nick = "";

    for (var i = 0; i < 6; i++) {
      nick += aphabets[Math.floor(Math.random() * aphabets.length)];
    }

    return nick;
  },
  setScore: function setScore() {
    var myscore = this.agentsDef.myscore;
    var nextscore = this.agentsDef.nextscore;
    var wallNode = this.node.getChildByName("clanWall");
    var myScoreLabel = wallNode.getChildByName("wordbg").getChildByName("myScore").getComponent("cc.Label");
    var nextScoreLabel = wallNode.getChildByName("wordbg").getChildByName("nextScore").getComponent("cc.Label");
    myScoreLabel.string = myscore;
    nextScoreLabel.string = "/" + nextscore;
  },
  setUser: function setUser() {
    var wonode = this.node.getChildByName("wobanner");
    var userLabel = wonode.getChildByName("username").getComponent("cc.Label");
    var levelLabel = wonode.getChildByName("userlevel").getComponent("cc.Label");
    userLabel.string = this.agentsDef.name;
    levelLabel.string = this.agentsDef.level;
  },
  setMyCards: function setMyCards() {
    var sx = -295;
    var sy = 24;
    var mx, my;
    var card, cardNode, cost, level;
    var moveTo;
    var allCards = this.agentsDef.myList;
    var rowItems = 0;
    var rows = 0;
    var cols = 0;
    var wallNode = this.node.getChildByName("clanWall");
    /*
            for(var i=0;i<6;i++) {
                cols = i%6;
                mx = sx+(cols*124);
                my = sy;
                card = cc.instantiate(this.playerPrefab[2]);
                moveTo = cc.v2(mx, my);
                card.setPosition(moveTo);
                wallNode.addChild(card);
            }
    */

    for (var i = 0; i < 6; i++) {
      card = cc.instantiate(this.playerPrefab[1]);
      cardNode = card.getComponent('SelCard');

      if (allCards[i]) {
        cost = this.agentsDef[allCards[i]].cost;
        level = this.agentsDef.level;
        cardNode.setRole(allCards[i], cost, level);
      }

      this.myCardNodes.push(cardNode);
      cols = i % 6;
      mx = sx + cols * 124;
      my = sy;
      moveTo = cc.v2(mx, my);
      card.setPosition(moveTo);
      wallNode.addChild(card);
    }
  },
  setRelayUI: function setRelayUI(role) {
    if (CC_WECHATGAME && !role.inArray(this.baseRoles)) {
      //if wechat platform
      wx.shareAppMessage({
        title: "中古战纪",
        imageUrl: "https://www.asobee.mobi/fftower/res/acLogo2.jpg"
      });
      this.wxRelayTime = new Date().getTime();
    }
  },
  ifWxValidRelay: function ifWxValidRelay() {
    var cur = new Date().getTime();

    if (cur - this.wxRelayTime < 3000) {
      return false;
    }

    return true;
  },
  seleOneCard: function seleOneCard(role) {
    var card;

    for (var i = 0; i < this.allCardNodes.length; i++) {
      card = this.allCardNodes[i];

      if (card.seleRole !== role) {
        this.choosenCard = this.agentsDef[role];
        this.choosenCard.role = role;
        card.grey(true);
      }
    }

    this.shakeMyCards(true);
    this.setRelayUI(role);
    this.dispWxRelayWarn(false);
  },
  dispWxRelayWarn: function dispWxRelayWarn(flag) {
    var warn = this.node.getChildByName("wxRelayWarn");
    warn.active = flag;
  },
  getNowAgents: function getNowAgents() {
    var cNodes = this.node.getChildByName("clanWall")._children;

    var tn;
    var ret = [];
    var agentsList = [];
    var ad = {};
    var role, cost, level;

    for (var i = 0; i < cNodes.length; i++) {
      if (cNodes[i]._name == "SelCard") {
        role = cNodes[i].getComponent("SelCard").seleRole;
        cost = cNodes[i].getComponent("SelCard").magicCost;
        level = cNodes[i].getComponent("SelCard").roleLevel;

        if (cost > 0) {
          ad = {
            "seleRole": role,
            "magicCost": cost,
            "roleLevel": level
          };
          agentsList.push(role);
          ret.push(ad);
        }
      }
    }

    var node = cc.find('GameData').getComponent('GameData');
    node.setMyList(agentsList);
    return ret;
  },
  getPersistantData: function getPersistantData(param) {
    var node = cc.find('GameData').getComponent('GameData');
    return node.getData();
  },
  setCardsStatus: function setCardsStatus(nowAgents) {
    var card;
    var sumMyCards = 0;
    var sumCost = 0;
    var average = 0;
    var wallNode = this.node.getChildByName("clanWall");
    var averageLabel = wallNode.getChildByName("wordboardbg").getChildByName("averageCos").getComponent("cc.Label");
    var myCardsNumLabel = wallNode.getChildByName("wordbg").getChildByName("cardBut").getChildByName("myCardNum").getComponent("cc.Label");
    var allCardsNumLabel = wallNode.getChildByName("wordbg").getChildByName("cardBut").getChildByName("allCardNum").getComponent("cc.Label");

    for (var i = 0; i < this.allCardNodes.length; i++) {
      card = this.allCardNodes[i];
      card.setCardStatus(card.seleRole.inArray(nowAgents));
    } //for average magicCost display


    for (var i = 0; i < this.myCardNodes.length; i++) {
      if (this.myCardNodes[i].magicCost != 0) {
        sumMyCards++;
        sumCost += this.myCardNodes[i].magicCost;
      }
    }

    average = sumCost / sumMyCards;
    averageLabel.string = average.toFixed(2); //我的兵牌显示

    myCardsNumLabel.string = sumMyCards;
    allCardsNumLabel.string = "/" + this.allCardNodes.length;
  },
  shakeMyCards: function shakeMyCards(flag) {
    var card;

    for (var i = 0; i < this.myCardNodes.length; i++) {
      card = this.myCardNodes[i];

      if (flag) {
        card.startCardJitter();
      } else {
        card.stopCardJitter();
      }
    }
  },
  unselect: function unselect() {
    var card;
    this.choosenCard = {};

    for (var i = 0; i < this.allCardNodes.length; i++) {
      card = this.allCardNodes[i];
      card.grey(false);
    }

    this.shakeMyCards(false); //this.dispWxRelayWarn(false);
  },
  setAllCards: function setAllCards() {
    var sx = -200;
    var sy = -400;
    var mx, my;
    var card, cardNode, cost, disp, icon;
    var moveTo;
    var allCards = this.agentsDef.allList;
    var rowItems = 0;
    var rows = 0;
    var cols = 0;

    for (var i = 0; i < allCards.length; i++) {
      cost = this.agentsDef[allCards[i]].cost;
      disp = this.agentsDef[allCards[i]].disp;
      rows = Math.floor(i / 4);
      cols = i % 4;
      my = sy - rows * 200;
      mx = sx + cols * 170;
      card = cc.instantiate(this.playerPrefab[0]);
      cardNode = card.getComponent('AllCard');
      cardNode.setRole(allCards[i], cost, disp);

      if (CC_WECHATGAME && !allCards[i].inArray(this.baseRoles)) {
        icon = cc.instantiate(this.playerPrefab[3]);
        icon.setPosition(cc.v2(38, 68));
        icon.scaleX = 0.6;
        icon.scaleY = 0.6;
        card.addChild(icon);
      }

      moveTo = cc.v2(mx, my);
      card.setPosition(moveTo);
      this.allCardNodes.push(cardNode);
      this.node.addChild(card);
    }

    this.setCardsStatus(this.agentsDef.myList);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/SocketProvider.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '04045eoOP5HZaxEvt4Slsa0', 'SocketProvider');
// scripts/SocketProvider.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var pp = require("acdata1").AcWar;

cc.Class({
  "extends": cc.Component,
  properties: {},
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  // start () {},
  getRandomCharName: function getRandomCharName() {
    var aphabets = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    var nick = "";

    for (var i = 0; i < 6; i++) {
      nick += aphabets[Math.floor(Math.random() * aphabets.length)];
    }

    return nick;
  },
  setGameStart: function setGameStart(roomId) {
    //this.gameStartTime = Date.now();
    this.roomId = roomId;
    console.log("my room:" + this.roomId);
    this.node.getChildByName("putWait").active = false;
    this.node.getChildByName("word3").active = true;
  },
  setGameStartTime: function setGameStartTime() {
    this.gameStartTime = Date.now();
  },
  socketHandle: function socketHandle(nick) {
    var _parent = this;

    this.gameTraceStack = []; //MY_SOCKET = window.io.connect('ws://118.25.231.17:4003');
    //MY_SOCKET = window.io.connect('wss://www.asobee.mobi:443');
    //MY_SOCKET = window.io.connect('ws://192.168.1.10:4003');

    MY_SOCKET = window.io.connect('ws://35.77.248.155:10087'); //console.log('check 1', MY_SOCKET.connected);

    MY_SOCKET.on('connect_error', function () {
      console.log('Connection Failed');

      if (!_parent.netErrDisp) {
        _parent.syncTimeout();

        _parent.setConnFailInfo();

        _parent.node.getChildByName("putWait").active = true;
      }
    });
    MY_SOCKET.on('connected', function (data) {
      MY_SOCKET.heartbeatTimeout = 5000;
      MY_SOCKET.json.emit('init', {
        'name': nick,
        'nick': nick,
        'img': '',
        'roomId': ''
      });
    });
    MY_SOCKET.on('disconnect', function (data) {
      console.log("disconnect to server");

      _parent.syncTimeout(); //_parent.resultOp.show();


      _parent.setConnFailInfo();

      _parent.node.getChildByName("putWait").active = true;
    });
    MY_SOCKET.on('otherlogin', function (data) {
      if (_parent.mainPlayer == -1) {
        _parent.mainPlayer = data.userData.length;
      } // 2 players means game start.


      if (data.userData.length == 2) {
        _parent.setGameStart(data.roomId);
      }
    });
    MY_SOCKET.on('heart', function (data) {
      var cdVal = parseInt(data.counter);

      _parent.setTimeCounter(cdVal);
    });
    MY_SOCKET.on('buff', function (data) {
      console.log("----buff data----");
      console.log(data);
      var buff = data;

      if (_parent.mainPlayer == 2) {
        buff = _parent.mirrorBuffData(data);
      }

      _parent.createBuff(buff);
    });
    MY_SOCKET.on('end', function (data) {
      console.log(data);
      console.log(_parent.mainPlayer);

      _parent.gameOverProcessor(_parent.mainPlayer, data);

      _parent.resultOp.setResultValue(_parent.mainPlayer, data);

      _parent.resultOp.show();
    });
    MY_SOCKET.on('proto', function (data) {
      var udata = new Uint8Array(data);
      var message = pp.Info.decode(udata);
      var base = message.base;

      for (var i = 0; i < message.base.length; i++) {
        message.base[i].mypos = {};
        message.base[i].enemypos = {};
        message.base[i].targetpos = {};
        message.base[i].mypos.x = message.base[i].mpx;
        message.base[i].mypos.y = message.base[i].mpy;
        message.base[i].enemypos.x = message.base[i].epx;
        message.base[i].enemypos.y = message.base[i].epy;
        message.base[i].targetpos.x = message.base[i].tpx;
        message.base[i].targetpos.y = message.base[i].tpy;
      }

      for (var i = 0; i < message.fort.length; i++) {
        message.fort[i].mypos = {};
        message.fort[i].enemypos = {};
        message.fort[i].targetpos = {};
        message.fort[i].mypos.x = message.fort[i].mpx;
        message.fort[i].mypos.y = message.fort[i].mpy;
        message.fort[i].enemypos.x = message.fort[i].epx;
        message.fort[i].enemypos.y = message.fort[i].epy;
        message.fort[i].targetpos.x = message.fort[i].tpx;
        message.fort[i].targetpos.y = message.fort[i].tpy;
      }

      for (var i = 0; i < message.agent.length; i++) {
        message.agent[i].mypos = {};
        message.agent[i].enemypos = {};
        message.agent[i].targetpos = {};
        message.agent[i].mypos.x = message.agent[i].mpx;
        message.agent[i].mypos.y = message.agent[i].mpy;
        message.agent[i].enemypos.x = message.agent[i].epx;
        message.agent[i].enemypos.y = message.agent[i].epy;
        message.agent[i].targetpos.x = message.agent[i].tpx;
        message.agent[i].targetpos.y = message.agent[i].tpy;
      }

      for (var i = 0; i < message.bullet.length; i++) {
        message.bullet[i].mypos = {};
        message.bullet[i].enemypos = {};
        message.bullet[i].targetpos = {};
        message.bullet[i].mypos.x = message.bullet[i].mpx;
        message.bullet[i].mypos.y = message.bullet[i].mpy;
        message.bullet[i].enemypos.x = message.bullet[i].epx;
        message.bullet[i].enemypos.y = message.bullet[i].epy;
        message.bullet[i].targetpos.x = message.bullet[i].tpx;
        message.bullet[i].targetpos.y = message.bullet[i].tpy;
      }

      for (var i = 0; i < message.rollLog.length; i++) {
        message.rollLog[i].mypos = {};
        message.rollLog[i].enemypos = {};
        message.rollLog[i].targetpos = {};
        message.rollLog[i].mypos.x = message.rollLog[i].mpx;
        message.rollLog[i].mypos.y = message.rollLog[i].mpy;
        message.rollLog[i].enemypos.x = message.rollLog[i].epx;
        message.rollLog[i].enemypos.y = message.rollLog[i].epy;
        message.rollLog[i].targetpos.x = message.rollLog[i].tpx;
        message.rollLog[i].targetpos.y = message.rollLog[i].tpy;
      }

      var traceData = {};
      var agents = message.agent;
      var bases = message.base;
      var forts = message.fort;
      var bullets = message.bullet;
      var rollLogs = message.rollLog;

      if (_parent.mainPlayer == 2) {
        agents = _parent.mirrorAgentsData(agents);
        bullets = _parent.mirrorAgentsData(bullets);
        bases = _parent.mirrorBasesData(bases);
        forts = _parent.mirrorAgentsData(forts);
        rollLogs = _parent.mirrorAgentsData(rollLogs);
      }

      traceData.agents = agents;
      traceData.bullets = bullets;
      traceData.bases = bases;
      traceData.forts = forts;
      traceData.rollLogs = rollLogs;

      _parent.gameTraceStack.push(traceData);

      if (_parent.gameTraceStack.length > _parent.bufferLen) {
        data = _parent.gameTraceStack[0];

        _parent.createAgents(data.agents);

        _parent.createBullets(data.bullets);

        _parent.createBases(data.bases);

        _parent.createForts(data.forts);

        _parent.createLogs(data.rollLogs); //_parent.setAgentsDir(agents);

      }
    });
    /*
            MY_SOCKET.on('agent', function (data) {
    //            console.log("--------agent---------");
                var traceData = {};
                var agents = data.agents;
                var bases = data.bases;
                var forts = data.forts;
                var bullets = data.bullets;
                var rollLogs = data.rollLogs;
    
                if(_parent.mainPlayer == 2) {
                    agents = _parent.mirrorAgentsData(agents);
                    bullets = _parent.mirrorAgentsData(bullets);
                    bases = _parent.mirrorBasesData(bases);
                    forts = _parent.mirrorAgentsData(forts);
                    rollLogs = _parent.mirrorAgentsData(rollLogs);
                }
    
                traceData.agents = agents;
                traceData.bullets = bullets;
                traceData.bases = bases;
                traceData.forts = forts;
                traceData.rollLogs = rollLogs;
    
                _parent.gameTraceStack.push(traceData);
    
                if(_parent.gameTraceStack.length > _parent.bufferLen) {
                    data = _parent.gameTraceStack[0];
                    _parent.createAgents(data.agents);
                    _parent.createBullets(data.bullets);
                    _parent.createBases(data.bases);
                    _parent.createForts(data.forts);
                    _parent.createLogs(data.rollLogs);
                    //_parent.setAgentsDir(agents);
                }
            });
    */

    this.startTraceTimer();
  },
  mirrorAgentsData: function mirrorAgentsData(agents) {
    var gwidth = this.node.width / 30;
    var gheight = this.node.height / 30;

    for (var i = agents.length - 1; i >= 0; i--) {
      agents[i].mypos.x = gwidth - agents[i].mypos.x;
      agents[i].mypos.y = gheight - agents[i].mypos.y;

      if (agents[i].enemypos) {
        agents[i].enemypos.x = gwidth - agents[i].enemypos.x;
        agents[i].enemypos.y = gheight - agents[i].enemypos.y;
      } //for firebomb those which has no specific enmeies, just a target location.


      if (agents[i].targetpos) {
        agents[i].targetpos.x = gwidth - agents[i].targetpos.x;
        agents[i].targetpos.y = gheight - agents[i].targetpos.y;
      } //agents[i].rot += 180;

    }

    ;
    return agents;
  },
  mirrorBuffData: function mirrorBuffData(buff) {
    var gwidth = this.node.width / 30;
    var gheight = this.node.height / 30;
    buff.mypos.x = gwidth - buff.mypos.x;
    buff.mypos.y = gheight - buff.mypos.y;
    return buff;
  },
  mirrorBasesData: function mirrorBasesData(bases) {
    var gwidth = this.node.width / 30;
    var gheight = this.node.height / 30;

    for (var i = bases.length - 1; i >= 0; i--) {
      if (bases[i].objectId == 1) {
        bases[i].objectId = 4;
      } else if (bases[i].objectId == 2) {
        bases[i].objectId = 6;
      } else if (bases[i].objectId == 3) {
        bases[i].objectId = 5;
      } else if (bases[i].objectId == 4) {
        bases[i].objectId = 1;
      } else if (bases[i].objectId == 6) {
        bases[i].objectId = 2;
      } else if (bases[i].objectId == 5) {
        bases[i].objectId = 3;
      } //in mirror mode, x, y should be ajusted.


      bases[i].mypos.x = gwidth - bases[i].mypos.x - 1;
      bases[i].mypos.y = gheight - bases[i].mypos.y;

      if (bases[i].enemypos) {
        bases[i].enemypos.x = gwidth - bases[i].enemypos.x - 1;
        bases[i].enemypos.y = gheight - bases[i].enemypos.y;
      } //for firebomb those which has no specific enmeies, just a target location.


      if (bases[i].targetpos) {
        bases[i].targetpos.x = gwidth - bases[i].targetpos.x - 1;
        bases[i].targetpos.y = gheight - bases[i].targetpos.y;
      }
    }

    ;
    return bases;
  },
  disconnectServer: function disconnectServer() {
    MY_SOCKET.disconnect();
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Welcome.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2a91cx8Yg9CyIhlOix85UiP', 'Welcome');
// scripts/Welcome.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
//var pp = require("acdata").AcWar;
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    loading: cc.ProgressBar,
    loadLabel: cc.Label,
    startBut: cc.Button
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    //this.audioMng = this.audioMng.getComponent('AudioMng');
    //this.audioMng.playMusic();
    var _self = this;

    this.startBut.getComponent(cc.Button).interactable = false;
    cc.loader.downloader.loadSubpackage("resources", function (err) {
      if (err) {
        console.log(err);

        _self.goH5Load();
      } else {
        cc.loader.loadResDir("resources", function (err, res) {
          console.log("you can go now!!!!!!!!!");
          cc.director.preloadScene('menu', _self.onProgress.bind(_self), function () {
            cc.director.preloadScene('game', _self.onProgress.bind(_self), function () {
              //_self.wxlogin();
              _self.startBut.getComponent(cc.Button).interactable = true;
            });
          });
        });
      }
    });
  },
  wxlogin: function wxlogin() {
    //let exportJson = {};
    //window.wx.login({
    //    success: (userRes) => {
    //        exportJson.code = userRes.code;//向服务端传递code用于获取微信小游戏的用户唯一标识
    //    },
    //});
    var datanode = cc.find('GameData').getComponent('GameData');

    var _self = this;

    var exportJson = {};
    var sysInfo = window.wx.getSystemInfoSync(); //获取微信界面大小

    var width = sysInfo.screenWidth;
    var height = sysInfo.screenHeight; //_self.startBut.getComponent(cc.Button).interactable = false;

    window.wx.getSetting({
      success: function success(res) {
        console.log(res.authSetting);

        if (res.authSetting["scope.userInfo"]) {
          console.log("用户已授权");
          window.wx.getUserInfo({
            success: function success(res) {
              console.log(res);
              exportJson.userInfo = res.userInfo;
              datanode.setWxUser(res.userInfo); //此时可进行登录操作
              //_self.startBut.getComponent(cc.Button).interactable = true;

              _self.play();
            }
          });
        } else {
          console.log("用户未授权");
          _self.startBut.getComponent(cc.Button).interactable = true;
          var button = window.wx.createUserInfoButton({
            type: 'text',
            text: '',
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height,
              backgroundColor: '#00000000',
              //最后两位为透明度
              color: '#ffffff',
              fontSize: 20,
              textAlign: "center",
              lineHeight: height
            }
          });
          button.onTap(function (res) {
            if (res.userInfo) {
              console.log("用户授权:", res);
              exportJson.userInfo = res.userInfo; //此时可进行登录操作

              datanode.setWxUser(res.userInfo);

              _self.play();

              button.destroy();
            } else {
              console.log("用户拒绝授权:", res);
            }
          });
        }
      }
    });
  },
  goH5Load: function goH5Load() {
    var _self = this;

    cc.director.preloadScene('menu', this.onProgress.bind(this), function () {
      cc.director.preloadScene('game', _self.onProgress.bind(_self), function () {
        _self.startBut.getComponent(cc.Button).interactable = true;
      });
    });
  },
  start: function start() {//this.loadProtobuf();
    //this.testProtobuf();
  },
  loadProtobuf: function loadProtobuf() {
    var myprotobuf = protobuf;
    var filename = "acdata.proto";
    myprotobuf.load(filename, function (err, root) {
      if (err) {
        throw err;
      }

      var acMessage = root.lookupType("AcWar.AcwarMessage");
      console.log(acMessage);
    });
  },
  testProtobuf: function testProtobuf() {
    if (cc.sys.isNative) {
      //在native上加载失败，是因为没有找到目录，我们在testProtobuf函数里面添加一个搜索目录:
      cc.log("jsb.fileUtils=" + jsb.fileUtils); //下面这段代码在PC window平台运行没问题，但是在android下面就出问题了
      //jsb.fileUtils.addSearchPath("res\\raw-assets\\resources", true);
      //需要改成这样：

      jsb.fileUtils.addSearchPath("res/raw-assets/resources", true); //坑太多了。。没办法
    }

    var filename1 = "acdata.proto"; // cc.loader.loadRes(filename1, cc.TextAsset, function (error, result) {//指定加载文本资源
    //     cc.log("loadRes error=" + error + ",result = " + result + ",type=" + typeof result);
    //     // callback(null, result);
    // });

    var protobufHere = protobuf; //require("protobuf");//导入为插件，直接使用

    protobufHere.load(filename1, function (err, root) {
      //Data/PbLobby.proto
      if (err) {
        console.log("load proto err:" + err);
        throw err;
      }
      /*
                  cc.log("root=" + root);
                  for (var i in root) {
                      cc.log("root." + i + "=" + root[i]);
                  }
                  //return;
      */


      cc.log("加载protobuf完毕，开始测试protobuf...");
      /*
                  var cmd = root.lookupEnum("PbLobby.Cmd");
                  cc.log(`cmd = ${JSON.stringify(cmd)}`);
                  cc.log("CMD_KEEPALIVED_C2S = "+cmd.values.CMD_KEEPALIVED_C2S);
      
                  //lookup 等价于 lookupTypeOrEnum 
                  //不同的是 lookup找不到返回null,lookupTypeOrEnum找不到则是抛出异常
                  var type1 = root.lookup("PbLobby.Cmd1");
                  cc.log("type1 = "+type1);
                  var type2 = root.lookup("PbLobby.Test1");
                  cc.log("type2 = "+type2);
      */

      /*
                  // Obtain a message type
                  var Test1Message = root.lookupType("AcWar.AcwarMessage");
                  cc.log("Test1Message = "+Test1Message);
      
                  // Exemplary payload
                  var payload = { id: 1,name:"hello protobuf" };
                  //var payload = { ids: 1,name:"hello protobuf" };
                  cc.log(`payload = ${JSON.stringify(payload)}`);
                  //过滤掉一些message中的不存在的字段
                  // Create a new message
                  var message = Test1Message.create(payload); // or use .fromObject if conversion is necessary
                  cc.log(`message = ${JSON.stringify(message)}`);
      
      
                  // Encode a message to an Uint8Array (browser) or Buffer (node)
                  var buffer = Test1Message.encode(message).finish();
                  cc.log("buffer1 = "+buffer);
                  cc.log(`buffer2 = ${Array.prototype.toString.call(buffer)}`);
                  // ... do something with buffer
      
                  // Decode an Uint8Array (browser) or Buffer (node) to a message
                  var decoded = Test1Message.decode(buffer);
                  cc.log("decoded1 = "+decoded);
                  cc.log(`decoded2 = ${JSON.stringify(decoded)}`);
                  // ... do something with message
      
                  // If the application uses length-delimited buffers, there is also encodeDelimited and decodeDelimited.
      
                  //一般情况下，也不需要下面的转换
                  // Maybe convert the message back to a plain object
                  var object = Test1Message.toObject(decoded, {
                      longs: String,
                      enums: String,
                      bytes: String,
                      // see ConversionOptions
                  });
                  cc.log("object = "+JSON.stringify(object));
      */
    });
  },
  play: function play() {
    cc.director.loadScene('menu');
  },
  onProgress: function onProgress(completedCount, totalCount, item) {
    this.loading.progress = completedCount / totalCount;
    this.loadLabel.string = Math.floor(completedCount / totalCount * 100) + "%";
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/AllCard.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9b622jQnM9HZLCxDURFLjs8', 'AllCard');
// scripts/AllCard.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    seleRole: "ske",
    magicCost: 1,
    level: 1,
    disp: ""
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {},
  start: function start() {
    this.isMoving = false;
    this.seleInnerId = "";
    this.setInitImgByRole();
    this.setRoleCost();
    this.setRoleDisp(); //this.grey(true);
  },
  setCardStatus: function setCardStatus(flag) {
    var but = this.node.getChildByName("useButton");
    var hidebut = this.node.getChildByName("click");
    var lb = but.getChildByName("disp");
    var lbword = lb.getComponent("cc.Label"); // in used

    if (flag) {
      but.getComponent(cc.Button).interactable = false;
      hidebut.getComponent(cc.Button).interactable = false; //lbword.string = "已使用";
    } else {
      but.getComponent(cc.Button).interactable = true;
      hidebut.getComponent(cc.Button).interactable = true; //lbword.string = "使用";
    }
  },
  grey: function grey(flag) {
    var butNode = this.node.getChildByName("useButton");

    if (flag) {
      //butNode.getComponent(cc.Button).interactable = false;
      this.node.opacity = 100;
    } else {
      //butNode.getComponent(cc.Button).interactable = true;
      this.node.opacity = 255;
    }
  },
  userButClick: function userButClick() {
    var layout = this.node.parent.getComponent("SelLayout");
    layout.seleOneCard(this.seleRole);
  },
  setRole: function setRole(role, cost, disp) {
    this.seleRole = role;
    this.magicCost = cost;
    this.disp = disp;
  },
  getLayoutNode: function getLayoutNode() {
    return this.node.parent.getChildByName("layout");
  },
  setRoleCost: function setRoleCost() {
    var mark = this.node.getChildByName("ringMark");
    var costLabel = mark.getChildByName("cost").getComponent("cc.Label");
    costLabel.string = this.magicCost;
  },
  setRoleDisp: function setRoleDisp() {
    var butLabel = this.node.getChildByName("useButton").getChildByName("disp").getComponent("cc.Label");
    butLabel.string = this.disp;
  },
  setSelImg: function setSelImg(frameImg) {
    var iconNode = this.node.getChildByName("icon");
    cc.loader.loadRes(frameImg, cc.SpriteFrame, function (err, spriteFrame) {
      //iconNode.width = 100;
      //iconNode.height = 120;
      iconNode.active = true;
      iconNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
    });
  },
  setInitImgByRole: function setInitImgByRole() {
    var frameImg = "";

    if (this.seleRole == "ske") {
      this.setSelImg("sel_cards/ske");
    } //lieren
    else if (this.seleRole == "lr") {
        this.setSelImg("sel_cards/lieren");
      } //rockman
      else if (this.seleRole == "gi") {
          this.setSelImg("sel_cards/rockman");
        } else if (this.seleRole == "log") {
          this.setSelImg("sel_cards/log");
        } else if (this.seleRole == "bomb") {
          this.setSelImg("sel_cards/bomb");
        } else if (this.seleRole == "bee") {
          this.setSelImg("sel_cards/bee");
        } else if (this.seleRole == "wiz") {
          this.setSelImg("sel_cards/wiz");
        } //hero
        else if (this.seleRole == "hr") {
            this.setSelImg("sel_cards/hero");
          } //light man
          else if (this.seleRole == "lm") {
              this.setSelImg("sel_cards/lightman");
            } //hero
            else if (this.seleRole == "fa") {
                this.setSelImg("sel_cards/fortA");
              } //hero
              else if (this.seleRole == "ir") {
                  this.setSelImg("sel_cards/ironman");
                }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Game.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f3bc9CQlNRD6plaPVQ+7BK9', 'Game');
// scripts/Game.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var common = require("Common");

var gameProvider = require("GameProvider");

cc._Dictionary = require("Dictionary");
cc.Class({
  "extends": gameProvider,
  properties: {
    // 这个属性引用了预制资源
    playerPrefab: {
      "default": [],
      type: cc.Prefab
    },
    audios: {
      "default": [],
      type: cc.AudioClip
    }
  },
  ctor: function ctor() {
    console.log("-----ctor----");
    this.bufferLen = 30;
  },
  goback: function goback(event, customEventData) {
    this.syncTimeout();
    cc.director.loadScene('menu');
  },
  onLoad: function onLoad() {
    console.log("---------onLoad--------");
    /*
            if (typeof (wx) !== "undefined") {
                let self = this;
                wx.onShow(function () {
                    console.log("wx onshow.");
                    if (self.isShared && self.shareTag == "keys") {
                        let curTime = new Date().getTime();
                        if (curTime - self.closeTime >= 3000) {
                            //分享成功
                            console.log("分享成功");
                            //self.isShared = false;
                            //self.shareTag = "";
                            //self.closeTime = curTime;
                        }
                    }
                })
            }
    */

    var _parent = this;

    this.netErrDisp = false;
    var size = cc.visibleRect;
    var name = this.getRandomCharName();
    this.nick = name;
    this.canvasNode = this.node.parent;
    this.resultOp = this.node.getChildByName("Result").getComponent("Result");
    this.gameCountDown = 150; //2:30
    //up user or down user.

    this.mainPlayer = -1;
    this.roomId = "";
    this.baseAttackDuraRec = [];
    this.agentMoveStepRec = [];
    this._defaultBases = ["base1", "base2", "base3", "base4", "base5", "base6"];
    this.gameStartTime = 0;
    this.gameCycleTime = 90;
    this.gameOver = false;
    this.addJuice = 10; //each heart add up to magic juice bar

    this.npcInfo = new cc._Dictionary();
    this.removedNpcInfo = new cc._Dictionary();
    this.setUser(this.getPersistantData());
    console.log("name:" + name);
    this.socketHandle(this.nick);
    this.putSele = [];
    this.dragingItem = "";
    this.clickSele = {};
    this.magicAmount = 0; //red alert area should not be entered by hero.

    this.maskType = "seleMask3";

    var canvasPt = this.node._parent.getPosition();

    var layoutPt = this.node.getPosition();
    var cnode, pl;
    var magicCost = 0;
    var role;
    var selParams, selNode;
    var innerId;
    this.node.on(cc.Node.EventType.TOUCH_END, function (params) {
      if (_parent.gameStartTime == 0) {
        return;
      }

      var pt = params.getLocation();

      _parent.clickProcessor(pt);
    });
    /*
            this.listener = cc.EventListener.create({
                event: cc.EventListener.CUSTOM,  
                eventName: "event_effect",
                callback: function (event) {
                    cc.log("event = "+event.getUserData());
                }
            });
            cc.eventManager.addListener(this.listener, 1);
    */

    this.initEventListener();
  },
  getPersistantData: function getPersistantData() {
    var node = cc.find('GameData').getComponent('GameData');
    return node.getData();
  },
  setUser: function setUser(def) {
    var node = cc.find('GameData').getComponent('GameData');
    var titlenode = this.node.parent.getChildByName("banner").getChildByName("title");
    var levelLabel = this.node.parent.getChildByName("banner").getChildByName("level").getChildByName("levelword").getComponent("cc.Label");
    var nameLabel = titlenode.getChildByName("name").getComponent("cc.Label");
    var scoreLabel = titlenode.getChildByName("score").getComponent("cc.Label");
    nameLabel.string = node.getNick();
    levelLabel.string = def.level;
    scoreLabel.string = def.myscore;
  },
  setConnFailInfo: function setConnFailInfo() {
    this.netErrDisp = true;
    var msgLabel = this.node.getChildByName("putWait").getChildByName("msg").getComponent("cc.Label");
    var retBut = this.node.getChildByName("putWait").getChildByName("retBut");
    retBut.active = true;
    msgLabel.string = "ネット障害";
  },
  setBuffDisp: function setBuffDisp(buffType) {
    var canvasNode = this.node.parent;
    this.buffType = buffType;

    if (buffType == "heal") {
      canvasNode.getChildByName("buffHeal").active = true;
    } else if (buffType == "thunder") {
      canvasNode.getChildByName("buffThunder").active = true;
    }
  },

  /*
      doBuff: function(event, customEventData) {
          console.log("sssss:" + customEventData);
          var buffType = customEventData;
          if(buffType == 1) {
          }
      },
  */
  setParam: function setParam(param, timestamp) {
    console.log("----param----");
    console.log(param);
    console.log(timestamp);
    var curTime = new Date().getTime();
    console.log("duration:" + (curTime - timestamp));
    this.setMyCards(param);
    this.dispCharSele();
  },
  setMyCards: function setMyCards(param) {
    var sx = -230;
    var sy = -590;
    var mx, my;
    var card, cardNode, cost;
    var moveTo; //var allCards = ["log","bomb","ske","ir"];

    var allCards = param;
    var rowItems = 0;
    var rows = 0;
    var cols = 0;
    var canvasNode = this.node.parent;
    var head = "sel";

    for (var i = 0; i < allCards.length; i++) {
      card = cc.instantiate(this.playerPrefab[21]);
      card._name = head + (i + 1);
      cardNode = card.getComponent('SelCard');

      if (allCards[i]) {
        cost = 1;
        cardNode.setRole(allCards[i].seleRole, allCards[i].magicCost, allCards[i].roleLevel);
      } //this.myCardNodes.push(cardNode);                


      cols = i % 6;
      mx = sx + cols * 105;
      my = sy;
      moveTo = cc.v2(mx, my);
      card.setPosition(moveTo);
      canvasNode.addChild(card);
    }

    for (var i = allCards.length; i < 6; i++) {
      cols = i % 6;
      mx = sx + cols * 105;
      my = sy;
      card = cc.instantiate(this.playerPrefab[22]);
      moveTo = cc.v2(mx, my);
      card.setPosition(moveTo);
      canvasNode.addChild(card);
    }
  },
  dispCharSele: function dispCharSele() {
    var charSele = this.node.parent.getChildByName("charSele");
    charSele.zIndex = 9999;
    charSele.active = false;
    console.log(charSele);
  },
  gameOverProcessor: function gameOverProcessor(mainPlayer, data) {
    if (mainPlayer == 1) {
      if (data.win == 1) {
        console.log("my win11");
        this.killBases("up");
      } else if (data.win == 0) {
        console.log("my lose11");
        this.killBases("down");
      }
    } else if (mainPlayer == 2) {
      if (data.win == 1) {
        console.log("my lose11");
        this.killBases("down");
      } else if (data.win == 0) {
        console.log("my win11");
        this.killBases("up");
      }
    }
  },
  clickProcessor: function clickProcessor(clickPt) {
    var _parent = this;

    var canvasPt = this.canvasNode.getPosition();
    var layoutPt = this.node.getPosition();
    var innerId; //note that pt is the postion in canvas node.

    var pt = clickPt;
    var pt1 = {};
    var magicCost = _parent.clickSele.magicCost;
    var level = _parent.clickSele.level;
    var role = _parent.clickSele.role;

    if (role === undefined || role == "") {
      return;
    }

    var selCard = _parent.clickSele.params.target;
    var selNode = _parent.clickSele.node;
    var pl = selNode.parent.getPosition(); //sel card node.

    var yOffset;

    if (_parent.mainPlayer == 1) {
      yOffset = -20;
    } else {
      yOffset = 40;
    } //pointer position


    pt1.x = layoutPt.x + pt.x - pl.x - 10;
    pt1.y = layoutPt.y + pt.y - pl.y - (canvasPt.y + layoutPt.y); //position in layout

    pt.x = pt.x / _parent.node.scaleX - (canvasPt.x + layoutPt.x);
    pt.y = pt.y / _parent.node.scaleY - (canvasPt.y + layoutPt.y) + yOffset;

    if (!this.ifNotMaskRole(role)) {
      this.showMask(this.maskType, 1);
    }

    if (!this.isValidPutPoint(pt) && !this.ifNotMaskRole(role)) {
      console.log("invalid postion.");
      this.putErrorMsg();
      return;
    }

    innerId = _parent.putClickItem(selCard, selNode, pt1);

    _parent.sendSodier(magicCost, role, pt, innerId, level);
  },
  isValidPutPoint: function isValidPutPoint(point) {
    var pt = {};
    pt.x = point.x;
    pt.y = point.y;

    if (this.mainPlayer == 2) {
      pt.y = point.y - 40;
    }

    if (this.maskType == "seleMask1") {
      if (pt.x >= 30 && pt.x <= 570 && pt.y > 0 && pt.y < 650) {
        return true;
      } else {
        return false;
      }
    } else if (this.maskType == "seleMask12") {
      if (pt.x >= 30 && pt.x <= 570 && pt.y > 0 && pt.y < 420 || pt.x >= 285 && pt.x <= 570 && pt.y > 420 && pt.y < 650) {
        return true;
      } else {
        return false;
      }
    } else if (this.maskType == "seleMask13") {
      if (pt.x >= 30 && pt.x <= 570 && pt.y > 0 && pt.y < 420 || pt.x >= 30 && pt.x <= 285 && pt.y > 420 && pt.y < 650) {
        return true;
      } else {
        return false;
      }
    } else if (this.maskType == "seleMask3") {
      if (pt.x >= 30 && pt.x <= 570 && pt.y > 0 && pt.y < 420) {
        return true;
      } else {
        return false;
      }
    }

    return false;
  },
  ifNotMaskRole: function ifNotMaskRole(role) {
    if (role == "bomb" || role == "thunder" || role == "heal") {
      return true;
    }

    return false;
  },
  initEventListener: function initEventListener() {
    this.node.on("event_effect", this.onEventEffect.bind(this));
  },
  onEventEffect: function onEventEffect() {
    console.log("listening effect loaded....");
  },
  setCountDown: function setCountDown(counter) {
    var min = parseInt(counter / 60);
    var sec = counter % 60; //console.log(min +":"+ sec);

    var timeNode = this.canvasNode.getChildByName("banner").getChildByName("time");
    var cdNode = timeNode.getChildByName("countDown").getComponent("cc.Label");

    if (sec < 10) {
      sec = "0" + sec;
    }

    cdNode.string = min + ":" + sec;
  },
  doubleMagicDisp: function doubleMagicDisp() {
    var dispnode = this.node.getChildByName("doubleMagic");
    dispnode.active = true;
  },
  setTimeCounter: function setTimeCounter(cnt) {
    //use to compare if timeout, only for pk mode.
    this.gameNowTime = cnt;
    this.setCountDown(cnt);

    if (cnt == 60) {
      console.log("magic charge speed up");
      this.doubleMagicDisp();
      this.addJuice = 20;
    }

    this.setMagicBar(); //counter1.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame("num_8.png"));
    //3 second is the ai page loading time.

    var count_down = this.gameCycleTime - cnt;

    if (count_down < 0) {
      this.gameOver = true;
      return;
    }

    var tens = parseInt(count_down / 10);
    var ones = count_down % 10; //console.log(tens +":::"+ ones);
  },
  startTraceTimer: function startTraceTimer() {
    //refer to server interval setting, must a little shorter than that in server
    this.interval = 30;
    var then = Date.now();

    var _parent = this; // 30 mini seconds a game cycle.


    var game_cycle = this.gameCycleTime * 1000;
    var game_cycle_then = Date.now();
    var cycle_cnt = 0;

    if (!this.traceTimer) {
      this.traceTimer = function () {
        var now = Date.now();
        var delta = now - then; //when net traffic happened, idle for 5's will halt
        //not tested yet.

        var game_cycle_delta = now - _parent.gameStartTime; // if within game cycle time

        if (!_parent.gameOver && game_cycle_delta > cycle_cnt * 1000) {
          cycle_cnt++; // if no response for 5s, then timeout

          if (Math.abs(cycle_cnt - _parent.gameNowTime) > 5) {
            this.syncTimeout();
          }
        }

        if (delta > _parent.interval) {
          then = now - delta % _parent.interval;

          _parent.mainGameCycle();
        }
      }.bind(this);
    }

    this.schedule(this.traceTimer, 0);
  },
  mainGameCycle: function mainGameCycle() {
    var _parent = this;

    var data, agents, bullets, bases, forts, rollLogs, agentsFuture, fortsFuture;

    if (this.gameTraceStack.length > this.bufferLen) {
      this.gameTraceStack.shift();
      data = this.gameTraceStack[0]; //data = this.gameTraceStack[this.gameTraceStack.length - 10];

      agents = data.agents;
      agentsFuture = this.gameTraceStack[29].agents;
      fortsFuture = this.gameTraceStack[29].forts;
      bullets = data.bullets;
      bases = data.bases;
      forts = data.forts;
      rollLogs = data.rollLogs;

      _parent.playBullets(bullets);

      _parent.playLogs(rollLogs);

      _parent.playAgents(agents, agentsFuture);

      _parent.playBases(bases);

      _parent.playForts(forts);

      _parent.bulletProcess(bullets);

      _parent.logProcess(rollLogs);

      _parent.agentProcess(agents);

      _parent.fortProcess(forts, fortsFuture);

      _parent.baseProcess(bases);
    } //var event = new cc.Event.EventCustom("event_effect", true);
    //event.detail = "123";
    //this.node.dispatchEvent(event);

  },
  syncTimeout: function syncTimeout() {
    this.gameOver = true;
    this.stopTraceTimer();
    MY_SOCKET.disconnect();
    console.log("网络断开"); //this.goPrevious();                 
  },
  stopTraceTimer: function stopTraceTimer() {
    if (this.traceTimer) {
      this.unschedule(this.traceTimer);
    }
  },
  playSnd: function playSnd(sndType) {
    if (sndType == "base") {
      cc.audioEngine.play(this.audios[0], false, 1);
    } else if (sndType == "fireSend") {
      cc.audioEngine.play(this.audios[1], false, 1);
    } else if (sndType == "bomb") {
      cc.audioEngine.play(this.audios[2], false, 1);
    } else if (sndType == "ske") {
      cc.audioEngine.play(this.audios[3], false, 1);
    } else if (sndType == "hr") {
      cc.audioEngine.play(this.audios[4], false, 1);
    } else if (sndType == "lr") {
      cc.audioEngine.play(this.audios[5], false, 1);
    } else if (sndType == "gi") {
      cc.audioEngine.play(this.audios[6], false, 1);
    } else if (sndType == "put1") {
      cc.audioEngine.play(this.audios[7], false, 1);
    } else if (sndType == "wizfire") {
      cc.audioEngine.play(this.audios[2], false, 1);
    } else if (sndType == "lm") {
      cc.audioEngine.play(this.audios[8], false, 1);
    } else if (sndType == "gun") {
      cc.audioEngine.play(this.audios[9], false, 1);
    } else if (sndType == "thunder") {
      cc.audioEngine.play(this.audios[10], false, 1);
    } else if (sndType == "heal") {
      cc.audioEngine.play(this.audios[11], false, 1);
    } else if (sndType == "log") {
      cc.audioEngine.play(this.audios[12], false, 1);
    }
  },
  playEffect: function playEffect(role, x, y) {
    var bd; //play effect.
    //should destroy when finish.

    if (role == "hr") {
      bd = cc.instantiate(this.playerPrefab[13]);
      bd.x = x;
      bd.y = y + 20;
      this.node.addChild(bd);
    }

    if (role == "lm") {
      this.playSnd("lm");
      bd = cc.instantiate(this.playerPrefab[15]);
      bd.x = x;
      bd.y = y - 40;
      this.node.addChild(bd);
    } else if (role == "base") {
      this.playSnd("base");
      bd = cc.instantiate(this.playerPrefab[10]);
      bd.x = x;
      bd.y = y;
      this.node.addChild(bd);
    } //fortA
    else if (role == "fa") {
        bd = cc.instantiate(this.playerPrefab[10]);
        bd.x = x;
        bd.y = y;
        this.node.addChild(bd);
      } else if (role == "log") {
        bd = cc.instantiate(this.playerPrefab[10]);
        bd.scaleX = 0.8;
        bd.scaleY = 0.8;
        bd.x = x + 10;
        bd.y = y;
        this.node.addChild(bd);
      } else if (role == "bomb") {
        this.playSnd("bomb"); //shake the screen

        this.startSceneJitter();
        bd = cc.instantiate(this.playerPrefab[6]);
        bd.active = true;
        bd.x = x;
        bd.y = y;
        this.node.addChild(bd);
      } else if (role == "wizfire") {
        this.playSnd("wizfire");
        bd = cc.instantiate(this.playerPrefab[19]);
        bd.active = true;
        bd.x = x;
        bd.y = y;
        this.node.addChild(bd);
      }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/MySprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'cd79aqd9HxCZLHw2ASr//Gc', 'MySprite');
// scripts/MySprite.js

"use strict";

var common = require("Common");

var agentObj = require("AgentObj");

cc.Class({
  "extends": agentObj,
  properties: {
    sprAtlas: cc.SpriteAtlas,
    wrapMode: cc.WrapMode.Loop,
    routes: [],
    lastAct: "",
    lastAngle: -1,
    life: -1,
    eid: -1
  },
  onLoad: function onLoad() {
    this.layoutOp = this.node.parent.getComponent("Game");
  },
  start: function start() {},
  ctor: function ctor() {},
  init: function init() {
    this.posX = 0;
    this.posY = 0;
    this.now = Date.now();
    this.angle = -999;
    this.groupKill = false;
    this.attacking = false;
    this._animation = this.getComponent(cc.Animation);
    this._animation.WrapMode = cc.WrapMode.Loop; //this._animation.on("lastframe", this.onend, this);
  },

  /*    
      setEnemy: function(enemyObj) {
          if(enemyObj) {
              this.eid = enemyObj.name;
              this.enemy = enemyObj;            
          } 
          else {
              this.eid = "";
              this.enemy = null;              
          }
      },
  
      onend: function(event) {
          var agentNode;
          if(this.enemy.isValid) {
              agentNode = this.enemy.getComponent('SkeSprite');
              agentNode.remove();
          } 
          //this.shootArrow(this.ox, this.oy, this.ex, this.ey, this.arrow);
      },
  */
  setInitPos: function setInitPos(px, py) {
    this.posX = px;
    this.posY = py;
    var pt = cc.v2(this.posX, this.posY);
    this.routes.push(pt);
  },
  updatePos: function updatePos(px, py) {
    var moveTo = cc.v2(px, py);
    var nx, ny;
    var ap = this.node.getAnchorPoint();
    var size = this.node.getContentSize();
    nx = (0.5 - ap.x) * size.width + px; //ny = (0.5-ap.y) * size.height + py;

    ny = py;
    var shadowMoveTo = cc.v2(nx, ny);
    this.node.setPosition(moveTo);

    if (this.shadow) {
      this.shadow.setPosition(moveTo);
    }

    return;
  },

  /*
      remove: function() {
          //this.node.scaleX = 0.3;
          //this.node.scaleY = 0.3;
          
          this._animation.play("dieoff2");
          this.shadow.destroy();
  
          //node destory in sprite afterkill func
          //this.node.destroy();
      },
  */
  dispShadow: function dispShadow(frameNo) {
    //shadow object may not ready in init() when playing
    if (!this.shadow) return;
    var shadowNode = this.shadow;
    var frameImg = "ske_shadow/e/ske_walk_e" + frameNo;
    var act = this.lastAct;
    if (!act) return;
    var actTmp = this.lastAct.split("_");
    var actDir = actTmp[1];
    var actType = actTmp[2];
    var scaleX = this.lastScaleX;

    if (actDir == "en1" || actDir == "en2" || actDir == "en3") {
      frameImg = "ske_shadow/en/ske_walk_en" + frameNo;
    } else if (actDir == "se1" || actDir == "se2" || actDir == "se3") {
      frameImg = "ske_shadow/se/ske_walk_se" + frameNo;
    } else if (actDir == "s") {
      frameImg = "ske_shadow/s/ske_walk_s" + frameNo;
    } else if (actDir == "n") {
      frameImg = "ske_shadow/n/ske_walk_n" + frameNo;
    } else if (actDir == "e") {
      frameImg = "ske_shadow/e/ske_walk_e" + frameNo;
    }

    this.shadow.active = true;
    cc.loader.loadRes(frameImg, cc.SpriteFrame, function (err, spriteFrame) {
      if (shadowNode) {
        try {
          if (shadowNode._name != "") {
            shadowNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
        } catch (e) {
          console.log(shadowNode);
          console.log(e);
        }
      }
    });
  },

  /*
      move: function(pt) {
          if(this.removeFlag) {
              return;
          }
  
          var len = this.routes.length;
          var moveTo;
  
          if(len == 0) return;
          if(len == 1) {
              moveTo = this.routes[0];
          } else {
              moveTo = this.routes.shift();     
          }
  
          this.node.setPosition(moveTo);
          if(this.shadow && this.shadow.isValid) {
              this.shadow.setPosition(moveTo);     
          }
      },
  
      setAction: function() {
          var eastAnimFrames = [],
              str = "",
              frame,
              animation;
  
          for (var i = 1; i <= 4; i++) {        
              str = "c5u" + i;
              frame = this.sprAtlas.getSpriteFrame(str);
              eastAnimFrames.push(frame);
          }
  
          //animation = new cc.Animation(eastAnimFrames);
  
          var clip = cc.AnimationClip.createWithSpriteFrames(eastAnimFrames,frames.length);
          clip.name = "anim_001";
          clip.speed = 0.08;
          clip.sample = 4;
          clip.wrapMode = this.wrapMode;
          this._animation.addClip(clip);
      },
  
      playAnimation: function (wrapMode = cc.WrapMode.Default, speed = 0.5, sample = 60) {
          if(this._animation) {
              var animState = this._animation.getAnimationState("anim_001");
              animState.clip.wrapMode = wrapMode;
              animState.clip.speed = speed;
              animState.clip.sample = sample;
              animState.repeatCount = Infinity;
              this._animation.play("anim_001");
          }
      },
  
      setInitAct: function(angle, actType) {
          var angleInfo = this.getActnameByAngle(angle, actType);
          this.lastAct = angleInfo.actName;
      },
  
      getActnameByAngle_bak: function(angle, actType) {
          var actName="";
          var scaleX = 1;
          var ret = {};
  
          if(angle>=0 && angle<=11.25*1) {
              if(actType == "move") {
                  actName = "n_walk";
              }
              else if(actType == "sa") {
                  actName = "n_attack";
              }
          }
          else if(angle>11.25*1 && angle<=11.25*3) {
              if(actType == "move") {
                  actName = "en3_walk";
              }
              else if(actType == "sa") {
                  actName = "en3_attack";
              }
          }
          else if(angle>11.25*3 && angle<=11.25*5) {
              if(actType == "move") {
                  actName = "en2_walk";
              }
              else if(actType == "sa") {
                  actName = "en2_attack";
              }
          }
          else if(angle>11.25*5 && angle<=11.25*7) {
              if(actType == "move") {
                  actName = "en1_walk";
              }
              else if(actType == "sa") {
                  actName = "en1_attack";
              }
          }
          else if(angle>11.25*7 && angle<=11.25*9) {
              if(actType == "move") {
                  actName = "e_walk";
              }
              else if(actType == "sa") {
                  actName = "e_attack";
              }
          }
          else if(angle>11.25*9 && angle<=11.25*11) {
              if(actType == "move") {
                  actName = "se1_walk";
              }
              else if(actType == "sa") {
                  actName = "se1_attack";
              }
          }
          else if(angle>11.25*11 && angle<=11.25*13) {
              if(actType == "move") {
                  actName = "se2_walk";
              }
              else if(actType == "sa") {
                  actName = "se2_attack";
              }
          }
          else if(angle>11.25*13 && angle<=11.25*15) {
              if(actType == "move") {
                  actName = "se3_walk";
              }
              else if(actType == "sa") {
                  actName = "se3_attack";
              }
          }
          else if(angle>11.25*15 || angle<=180) {
              if(actType == "move") {
                  actName = "s_walk";
              }
              else if(actType == "sa") {
                  actName = "s_attack";
              }
          }
  
  
          else if(angle<0 && angle>=11.25*-1) {
              if(actType == "move") {
                  actName = "n_walk";
              }
              else if(actType == "sa") {
                  actName = "n_attack";
              }
              //scaleX = -1;
          }
          else if(angle<11.25*-1 && angle>=11.25*-3) {
              if(actType == "move") {
                  actName = "en3_walk";
              }
              else if(actType == "sa") {
                  actName = "en3_attack";
              }
              //scaleX = -1;
          }
          else if(angle<11.25*-3 && angle>=11.25*-5) {
              if(actType == "move") {
                  actName = "en2_walk";
              }
              else if(actType == "sa") {
                  actName = "en2_attack";
              }
  
              //scaleX = -1;
          }
          else if(angle<11.25*-5 && angle>=11.25*-7) {
              if(actType == "move") {
                  actName = "en1_walk";
              }
              else if(actType == "sa") {
                  actName = "en1_attack";
              }
  
              //scaleX = -1;
          }
          else if(angle<11.25*-7 && angle>=11.25*-9) {
              if(actType == "move") {
                  actName = "e_walk";
              }
              else if(actType == "sa") {
                  actName = "e_attack";
              }
  
              scaleX = -1;
          }
          else if(angle<11.25*-9 && angle>=11.25*-11) {
              if(actType == "move") {
                  actName = "se1_walk";
              }
              else if(actType == "sa") {
                  actName = "se1_attack";
              }
  
              scaleX = -1;
          }
          else if(angle<11.25*-11 && angle>=11.25*-13) {
              if(actType == "move") {
                  actName = "se2_walk";
              }
              else if(actType == "sa") {
                  actName = "se2_attack";
              }
  
              scaleX = -1;
          }
          else if(angle<11.25*-13 && angle>=11.25*-15) {
              if(actType == "move") {
                  actName = "se3_walk";
              }
              else if(actType == "sa") {
                  actName = "se3_attack";
              }
  
              scaleX = -1;
          } 
          else if(angle<11.25*-15 && angle>-180) {
              if(actType == "move") {
                  actName = "s_walk";
              }
              else if(actType == "sa") {
                  actName = "s_attack";
              }
  
              scaleX = -1;
          }
  
          else {
              console.log("------:"+angle);
          }
  
          actName = this.role +"_"+ actName;
  
          ret.actName = actName;
          ret.scaleX = scaleX;
          return ret;
      },
  */
  getActnameByAngle: function getActnameByAngle(angle, actType) {
    var actName = "";
    var scaleX = 1;
    var ret = {};
    var specialActname = false;

    if (angle > 22.5 * -1 && angle <= 22.5 * 1) {
      if (actType == "move") {
        actName = "n_walk";
      } else if (actType == "sa") {
        actName = "n_attack";
      }
    } else if (angle > 22.5 * 1 && angle <= 22.5 * 3) {
      if (actType == "move") {
        actName = "en2_walk";
      } else if (actType == "sa") {
        actName = "en2_attack";
      }
    } else if (angle > 22.5 * 3 && angle <= 22.5 * 5) {
      if (actType == "move") {
        actName = "e_walk";
      } else if (actType == "sa") {
        actName = "e_attack";
      }
    } else if (angle > 22.5 * 5 && angle <= 22.5 * 7) {
      if (actType == "move") {
        actName = "se2_walk";
      } else if (actType == "sa") {
        actName = "se2_attack";
      }
    } else if (angle > 22.5 * 7 || angle < -22.5 * 9) {
      if (actType == "move") {
        actName = "s_walk";
      } else if (actType == "sa") {
        actName = "s_attack";
      }
    } else if (angle < 22.5 * -1 && angle >= 22.5 * -3) {
      if (actType == "move") {
        actName = "en2_walk";
      } else if (actType == "sa") {
        actName = "en2_attack";
      }

      scaleX = -1;
    } else if (angle < 22.5 * -3 && angle >= 22.5 * -5) {
      if (actType == "move") {
        actName = "e_walk";
      } else if (actType == "sa") {
        actName = "e_attack";
      }

      scaleX = -1;
    } else if (angle < 22.5 * -5 && angle >= 22.5 * -7) {
      if (actType == "move") {
        actName = "se2_walk";
      } else if (actType == "sa") {
        // start attack
        actName = "se2_attack";
      }

      scaleX = -1;
    } else if (angle < 22.5 * -7) {
      if (actType == "move") {
        actName = "s_walk";
      } else if (actType == "sa") {
        // start attack
        actName = "s_attack";
      }

      scaleX = -1;
    } else {
      console.log("----error angle--------------:" + angle);
    }

    actName = this.role + "_" + actName;
    specialActname = this.specialAct(actType);

    if (specialActname) {
      actName = specialActname;
    }

    ret.actName = actName;
    ret.scaleX = scaleX;
    return ret;
  },
  specialAct: function specialAct(actType) {
    // if just 1 vs 1 attack
    if (!this.groupKill) {
      return false;
    }

    if (actType == "sa" && this.role == "hr") {
      return "hr_all_kill";
    }

    return false;
  },
  setId: function setId(aid) {
    this.aid = aid; //var event = new cc.Event.EventCustom("event_effect", true);
    //event.detail = "123";
    //this.node.dispatchEvent(event);
  },
  hide: function hide() {
    this.node.active = false;
  },
  setShadow: function setShadow(shadow) {
    this.shadow = shadow;
    this.shadow.active = true;
  },
  getAgentAngle: function getAgentAngle(oPos, dPos, tanAngle) {
    var dx, dy, ox, oy;
    var angle;
    dx = dPos.x;
    dy = dPos.y;
    ox = oPos.x;
    oy = oPos.y;

    if (dx - ox > 0 && dy - oy > 0) {
      angle = tanAngle;
    } else if (dx - ox > 0 && dy - oy < 0) {
      angle = 180 - tanAngle;
    } else if (dx - ox < 0 && dy - oy < 0) {
      angle = 180 + tanAngle;
    } else if (dx - ox < 0 && dy - oy > 0) {
      angle = 0 - tanAngle;
    } else if (dx - ox == 0 && dy - oy > 0) {
      angle = 0;
    } else if (dx - ox == 0 && dy - oy < 0) {
      angle = 180;
    } else if (dy - oy == 0 && dx - ox > 0) {
      angle = 90;
    } else if (dy - oy == 0 && dx - ox < 0) {
      angle = -90;
    } else {
      console.log("wrong angle in Func MySprite->getAgentAngle()");
    }

    return angle;
  },
  ifFlyAgent: function ifFlyAgent(role) {
    if (role == "bee") {
      return true;
    }

    return false;
  },
  playAngleAnimationNear: function playAngleAnimationNear(agent, agentFuture, isMainPlayer) {
    if (this.attacking) {
      return;
    }

    var startPos = cc.v2(agent.mypos.x, agent.mypos.y);
    var enemyPos = cc.v2(agent.enemypos.x, agent.enemypos.y);
    var zorder = 1000 + parseInt(32 - agent.mypos.y);
    var randomTime = Math.ceil(Math.random() * 125) / 100;
    var actName = "";
    var actType = agent.actType;
    var fx,
        fy,
        vt,
        ag = 0,
        targetPos,
        angleInfo;
    var x = agent.mypos.x;
    var y = agent.mypos.y;
    var ex = agent.enemypos.x;
    var ey = agent.enemypos.y;
    var distance = startPos.sub(enemyPos).mag();
    var attackDistance; // fly agent should hover over any other agent.

    if (!this.ifFlyAgent(agent.role)) {
      this.node.zIndex = zorder;
    }

    this.node.scaleX = 1;

    if (this._animation) {
      attackDistance = this.getAttackDistance(agent); //1.5 is the distance ajustment variable, should be ajust according to each agent size.
      //attackDistance = (agent.size + agent.esize)*0.5*1.5;

      if (distance <= attackDistance) {
        // dir according to enemy position
        startPos = cc.v2(x, y);
        targetPos = cc.v2(ex, ey);
        vt = targetPos.sub(startPos); //if dir no changed, vt.x or vt.y is 0, atan value should be invaild

        if (vt.x == 0) {
          vt.x = 0.1;
        }

        if (vt.y == 0) {
          vt.y = 0.1;
        }

        if (vt.x != 0 && vt.y != 0) {
          ag = 180 / Math.PI * Math.atan(Math.abs(vt.x / vt.y));
        }

        ag = this.getAgentAngle(agent.mypos, {
          "x": ex,
          "y": ey
        }, ag);

        if (ag > 180) {
          ag = ag - 360;
        }

        angleInfo = this.getActnameByAngle(ag, "sa");
        actName = angleInfo.actName; //used to mirror a sprite.

        this.node.scaleX = angleInfo.scaleX;
      } else {
        if (agentFuture) {
          fx = agentFuture.enemypos.x;
          fy = agentFuture.enemypos.y;
        } else {
          fx = agent.enemypos.x;
          fy = agent.enemypos.y;
        }

        startPos = cc.v2(x, y);
        targetPos = cc.v2(fx, fy);
        vt = targetPos.sub(startPos); //if dir no changed, vt.x or vt.y is 0, atan value should be invaild

        if (vt.x == 0) {
          vt.x = 0.1;
        }

        if (vt.y == 0) {
          vt.y = 0.1;
        }

        if (vt.x != 0 && vt.y != 0) {
          ag = 180 / Math.PI * Math.atan(Math.abs(vt.x / vt.y));
        }

        ag = this.getAgentAngle(agent.mypos, {
          "x": fx,
          "y": fy
        }, ag);

        if (ag > 180) {
          ag = ag - 360;
        }

        angleInfo = this.getActnameByAngle(ag, "move");
        actName = angleInfo.actName; //used to mirror a sprite.

        this.node.scaleX = angleInfo.scaleX;
      } //blood bar may flip when agent flip, should make it back.


      this.blood.scaleX = this.node.scaleX;

      if (this.lastAct != actName) {
        if (distance <= attackDistance) {
          this._animation.play(actName); //if(this.playEffect !== undefined) {
          //    this.playEffect();
          //}

        } else if (!this.attacking) {
          this._animation.play(actName, randomTime);
        }

        this.lastAct = actName;
        this.lastScaleX = angleInfo.scaleX;
      }
    }
  },
  playAngleAnimationRemote: function playAngleAnimationRemote(agent, agentFuture, isMainPlayer) {
    var fx, fy, actType;
    var ag = 0;
    var x = agent.mypos.x;
    var y = agent.mypos.y;
    var ex = agent.enemypos.x;
    var ey = agent.enemypos.y;
    var startPos, targetPos, startEPos, targetEPos, vt, vtE;

    var _self = this;

    var zorder = 1000 + parseInt(32 - y); //total animator duration is 1.25s, so take a random time from 0-1.25 to prevent same action

    var randomTime = Math.ceil(Math.random() * 125) / 100;
    var actName = "";
    var then;
    var angleInfo;
    actType = agent.actType;

    if (actType == "ia" || actType == "ea") {
      return;
    }

    ag = agent.rot;
    this.node.zIndex = zorder;
    this.node.scaleX = 1;

    if (actType == "sa") {
      //start attack
      // dir according to enemy position
      startPos = cc.v2(x * 30, y * 30);
      targetPos = cc.v2(ex * 30, ey * 30);
      vt = targetPos.sub(startPos); //if dir no changed, vt.x or vt.y is 0, atan value should be invaild

      if (vt.x == 0) {
        vt.x = 0.1;
      }

      if (vt.y == 0) {
        vt.y = 0.1;
      }

      if (vt.x != 0 && vt.y != 0) {
        //ag = 180/Math.PI * Math.atan(Math.abs(vt.y/vt.x));
        ag = 180 / Math.PI * Math.atan(Math.abs(vt.x / vt.y));
        ag = this.getAgentAngle(agent.mypos, {
          "x": ex,
          "y": ey
        }, ag);
      }
    }

    if (actType == "move") {
      if (agentFuture) {
        fx = agentFuture.enemypos.x;
        fy = agentFuture.enemypos.y; //future acttype maybe ia instead of move or sa, in this case should not be handled.

        if (agentFuture && agentFuture.actType != "ia") {
          actType = agentFuture.actType;
        }
      } else {
        fx = agent.enemypos.x;
        fy = agent.enemypos.y;

        if (agentFuture && agentFuture.actType != "ia") {
          actType = agentFuture.actType;
        }
      }

      startPos = cc.v2(x * 30, y * 30);
      targetPos = cc.v2(fx * 30, fy * 30);
      vt = targetPos.sub(startPos); //if dir no changed, vt.x or vt.y is 0, atan value should be invaild

      if (vt.x == 0) {
        vt.x = 0.1;
      }

      if (vt.y == 0) {
        vt.y = 0.1;
      }

      if (vt.x != 0 && vt.y != 0) {
        ag = 180 / Math.PI * Math.atan(Math.abs(vt.x / vt.y));
        ag = this.getAgentAngle(agent.mypos, {
          "x": fx,
          "y": fy
        }, ag);
      }
    }

    if (this._animation) {
      angleInfo = this.getActnameByAngle(ag, actType);
      actName = angleInfo.actName; //used to mirror a sprite.

      this.node.scaleX = angleInfo.scaleX; //blood bar may flip when agent flip, should make it back.

      this.blood.scaleX = this.node.scaleX; //if already in attack mode, just skip the animation

      if (this.lastAct != actName || actType == "sa") {
        if (actType == "sa") {
          this._animation.stop();

          this._animation.play(actName);
        } else {
          //walking action.
          this._animation.play(actName, randomTime);
        }

        this.lastAct = actName;
        this.lastScaleX = angleInfo.scaleX;
      }
    }
    /*
            if(this._animation) {
                angleInfo = this.getActnameByAngle(angle, actType);
                actName = angleInfo.actName;
                this.node.scaleX = angleInfo.scaleX;
    
                //if already in attack mode, just skip the animation
                if(this.lastAct != actName) {
                    then = Date.now();
                    // to avoid changing dir frequently. agent would looks tremble otherwise.
                    if(then - this.now > 100) {
                        this._animation.play(actName, randomTime);
                        this.angle = angle;
                        this.now = then;
                    }
                }
    
                //if(this.lastAct != actName && actType=="sa") {
                //    var _self = this;
                //    var animState = this._animation.getAnimationState(actName);
                //    if (animState) {
                //        animState.on('lastframe', (event) => {}, this);
                //    }
                //}
    
                this.lastAct = actName;
    
                this.lastScaleX = angleInfo.scaleX;
            }
    */


    this.lastActType = actType;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Arrow.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fdf0cPTnAZOpoVbhBQTF5fi', 'Arrow');
// scripts/Arrow.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this._animation = this.getComponent(cc.Animation);
    this._animation.WrapMode = cc.WrapMode.Default;
  },
  start: function start() {},
  onend: function onend(event) {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0Fycm93LmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwiX2FuaW1hdGlvbiIsImdldENvbXBvbmVudCIsIkFuaW1hdGlvbiIsIldyYXBNb2RlIiwiRGVmYXVsdCIsInN0YXJ0Iiwib25lbmQiLCJldmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZlEsR0FIUDtBQXFCTDtBQUVBQyxFQUFBQSxNQXZCSyxvQkF1Qks7QUFDTixTQUFLQyxVQUFMLEdBQWtCLEtBQUtDLFlBQUwsQ0FBa0JOLEVBQUUsQ0FBQ08sU0FBckIsQ0FBbEI7QUFDQSxTQUFLRixVQUFMLENBQWdCRyxRQUFoQixHQUEyQlIsRUFBRSxDQUFDUSxRQUFILENBQVlDLE9BQXZDO0FBQ0gsR0ExQkk7QUE0QkxDLEVBQUFBLEtBNUJLLG1CQTRCSSxDQUNSLENBN0JJO0FBK0JMQyxFQUFBQSxLQUFLLEVBQUUsZUFBU0MsS0FBVCxFQUFnQixDQUN0QixDQWhDSSxDQWtDTDs7QUFsQ0ssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gZm9vOiB7XG4gICAgICAgIC8vICAgICAvLyBBVFRSSUJVVEVTOlxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIGJhcjoge1xuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICBvbkxvYWQgKCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb24gPSB0aGlzLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pO1xuICAgICAgICB0aGlzLl9hbmltYXRpb24uV3JhcE1vZGUgPSBjYy5XcmFwTW9kZS5EZWZhdWx0O1xuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgfSxcblxuICAgIG9uZW5kOiBmdW5jdGlvbihldmVudCkge1xuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/BloodBar.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9d601PjDUNLg5RyV8ikyzg8', 'BloodBar');
// scripts/BloodBar.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
String.prototype.startWith = function (str) {
  var reg = new RegExp("^" + str);
  return reg.test(this);
};

cc.Class({
  "extends": cc.Component,
  properties: {
    hp: -1,
    barWidth: 50,
    upToHead: 30,
    level: 1,
    role: ""
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.node.active = false;
    this.setBarWidth();

    if (this.isBase()) {
      this.setLoc(0, this.node.parent.height / 2 + 20);
    } else if (this.isFort1()) {
      this.setLoc(0, this.node.parent.height / 2 + 60);
    } else {
      this.setLoc(0, this.node.parent.height);
    }
  },
  //start () {},
  setBarWidth: function setBarWidth() {
    var bar = this.node.getChildByName("bar");
    var level = this.node.getChildByName("level");

    if (this.isBase()) {
      this.node.width = 80;
    } else if (this.isFort1()) {
      this.node.width = 50;
    } else {
      this.node.width = 30;
    }

    bar.x = this.node.width / 2 * -1;
    level.x = bar.x - 5;
  },
  isBase: function isBase() {
    if (this.node.parent._name.startWith("base")) {
      return true;
    }

    return false;
  },
  isFort1: function isFort1() {
    if (this.node.parent.spName == "FortASprite") {
      return true;
    }

    return false;
  },
  setLoc: function setLoc(px, py) {
    var moveTo = cc.v2(px, py);
    this.node.setPosition(moveTo);
  },
  setBarLevel: function setBarLevel(val) {
    if (val === undefined) {
      val = 1;
    }

    var level = this.node.getChildByName("level");
    level.getComponent(cc.Label).string = val;
  },
  setBloodBar: function setBloodBar(life, totalLife) {
    if (life < totalLife) {
      this.node.active = true;
    }

    var bar = this.node.getChildByName("bar");
    var barTotalWidth = this.node.width;
    bar.width = life / totalLife * barTotalWidth;

    if (life < totalLife * 0.35) {
      bar.color = new cc.Color(250, 0, 0);
    } else {
      bar.color = new cc.Color(50, 250, 0);
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Bomb.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '064984QJhNOW5zJ+swcipxH', 'Bomb');
// scripts/Bomb.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {},
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var animationComponent = this.getComponent(cc.Animation);
    animationComponent.play('small');
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0JvbWIuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkxvYWQiLCJhbmltYXRpb25Db21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJBbmltYXRpb24iLCJwbGF5Iiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRSxFQUhQO0FBT0w7QUFFQUMsRUFBQUEsTUFUSyxvQkFTSztBQUNOLFFBQUlDLGtCQUFrQixHQUFHLEtBQUtDLFlBQUwsQ0FBa0JOLEVBQUUsQ0FBQ08sU0FBckIsQ0FBekI7QUFDQUYsSUFBQUEsa0JBQWtCLENBQUNHLElBQW5CLENBQXdCLE9BQXhCO0FBQ0gsR0FaSTtBQWNMQyxFQUFBQSxLQWRLLG1CQWNJLENBRVIsQ0FoQkksQ0FrQkw7O0FBbEJLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHA6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICBvbkxvYWQgKCkge1xuICAgICAgICB2YXIgYW5pbWF0aW9uQ29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTtcbiAgICAgICAgYW5pbWF0aW9uQ29tcG9uZW50LnBsYXkoJ3NtYWxsJyk7XG4gICAgfSxcblxuICAgIHN0YXJ0ICgpIHtcblxuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/BombScript.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ecfc8GKFiNJi73X5NyLqJ8C', 'BombScript');
// scripts/BombScript.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  init: function init() {},
  start: function start() {},
  // update (dt) {},
  //ske clip ske_bomb, foot print start evt
  footPrint: function footPrint() {},
  playBombEffect: function playBombEffect() {},
  //ske clip ske_bomb, called by first frame of ske_bomb
  beforeKill: function beforeKill() {},
  //ske clip ske_bomb, called by last frame of ske_bomb
  afterKill: function afterKill() {
    console.log("--remove bomb node--");
    this.node.destroy();
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0JvbWJTY3JpcHQuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJpbml0Iiwic3RhcnQiLCJmb290UHJpbnQiLCJwbGF5Qm9tYkVmZmVjdCIsImJlZm9yZUtpbGwiLCJhZnRlcktpbGwiLCJjb25zb2xlIiwibG9nIiwibm9kZSIsImRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRSxDQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZRLEdBSFA7QUFxQkw7QUFFQTtBQUVBQyxFQUFBQSxJQUFJLEVBQUUsZ0JBQVcsQ0FFaEIsQ0EzQkk7QUE2QkxDLEVBQUFBLEtBN0JLLG1CQTZCSSxDQUNSLENBOUJJO0FBZ0NMO0FBRUE7QUFDQUMsRUFBQUEsU0FBUyxFQUFFLHFCQUFXLENBQ3JCLENBcENJO0FBc0NMQyxFQUFBQSxjQUFjLEVBQUUsMEJBQVcsQ0FDMUIsQ0F2Q0k7QUF5Q0w7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLHNCQUFXLENBQ3RCLENBM0NJO0FBNkNMO0FBQ0FDLEVBQUFBLFNBQVMsRUFBRSxxQkFBVztBQUNsQkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksc0JBQVo7QUFDQSxTQUFLQyxJQUFMLENBQVVDLE9BQVY7QUFDSDtBQWpESSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMZWFybiBjYy5DbGFzczpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyBMZWFybiBBdHRyaWJ1dGU6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cDovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cDovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIC8vIG9uTG9hZCAoKSB7fSxcblxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgfSxcblxuICAgIHN0YXJ0ICgpIHsgIFxuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcblxuICAgIC8vc2tlIGNsaXAgc2tlX2JvbWIsIGZvb3QgcHJpbnQgc3RhcnQgZXZ0XG4gICAgZm9vdFByaW50OiBmdW5jdGlvbigpIHtcbiAgICB9LFxuXG4gICAgcGxheUJvbWJFZmZlY3Q6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG5cbiAgICAvL3NrZSBjbGlwIHNrZV9ib21iLCBjYWxsZWQgYnkgZmlyc3QgZnJhbWUgb2Ygc2tlX2JvbWJcbiAgICBiZWZvcmVLaWxsOiBmdW5jdGlvbigpIHtcbiAgICB9LFxuXG4gICAgLy9za2UgY2xpcCBza2VfYm9tYiwgY2FsbGVkIGJ5IGxhc3QgZnJhbWUgb2Ygc2tlX2JvbWJcbiAgICBhZnRlcktpbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIi0tcmVtb3ZlIGJvbWIgbm9kZS0tXCIpO1xuICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpO1xuICAgIH1cblxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/BuffProcess.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '02042YX8NVNK4tzeVlz3Yt6', 'BuffProcess');
// scripts/BuffProcess.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.node.zIndex = 9999;
  },
  thunder_end: function thunder_end() {
    this.node.destroy();
  },
  heal_end: function heal_end() {
    this.node.destroy();
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0J1ZmZQcm9jZXNzLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwic3RhcnQiLCJub2RlIiwiekluZGV4IiwidGh1bmRlcl9lbmQiLCJkZXN0cm95IiwiaGVhbF9lbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRSxDQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZRLEdBSFA7QUFxQkw7QUFFQTtBQUVBQyxFQUFBQSxLQXpCSyxtQkF5Qkk7QUFDTCxTQUFLQyxJQUFMLENBQVVDLE1BQVYsR0FBbUIsSUFBbkI7QUFDSCxHQTNCSTtBQTZCTEMsRUFBQUEsV0FBVyxFQUFFLHVCQUFXO0FBQ3BCLFNBQUtGLElBQUwsQ0FBVUcsT0FBVjtBQUNILEdBL0JJO0FBaUNMQyxFQUFBQSxRQUFRLEVBQUUsb0JBQVc7QUFDakIsU0FBS0osSUFBTCxDQUFVRyxPQUFWO0FBQ0gsR0FuQ0ksQ0FxQ0w7O0FBckNLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gTGVhcm4gQXR0cmlidXRlOlxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgLy8gb25Mb2FkICgpIHt9LFxuXG4gICAgc3RhcnQgKCkge1xuICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gOTk5OTtcbiAgICB9LFxuXG4gICAgdGh1bmRlcl9lbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpO1xuICAgIH0sXG5cbiAgICBoZWFsX2VuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XG4gICAgfSxcblxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Common.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'af885xQixFGPovNcyyj+R7f', 'Common');
// scripts/Common.js

"use strict";

module.exports = {
  // when remote attack, should aim to the body instead of the foot. so move the aim up 45 pixel.
  attackTargetYOffset: 45
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0NvbW1vbi5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXR0YWNrVGFyZ2V0WU9mZnNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBRWpCO0FBQ0FDLEVBQUFBLG1CQUFtQixFQUFHO0FBSEwsQ0FBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXG4vLyB3aGVuIHJlbW90ZSBhdHRhY2ssIHNob3VsZCBhaW0gdG8gdGhlIGJvZHkgaW5zdGVhZCBvZiB0aGUgZm9vdC4gc28gbW92ZSB0aGUgYWltIHVwIDQ1IHBpeGVsLlxuYXR0YWNrVGFyZ2V0WU9mZnNldCA6IDQ1XG5cbn07Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Dictionary.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '979d5olSJND5q06NI+w9ly+', 'Dictionary');
// scripts/Dictionary.js

"use strict";

cc.Class({
  _keyMapTb: null,
  _valueMapTb: null,
  __currId: 0,
  ctor: function ctor() {
    this._keyMapTb = {};
    this._valueMapTb = {};
    this.__currId = 2 << (0 | Math.random() * 10);
  },
  __getKey: function __getKey() {
    this.__currId++;
    return "key_" + this.__currId;
  },
  setObject: function setObject(value, key) {
    if (key == null) return;

    var keyId = this.__getKey();

    this._keyMapTb[keyId] = key;
    this._valueMapTb[keyId] = value;
  },
  objectForKey: function objectForKey(key) {
    if (key == null) return null;
    var locKeyMapTb = this._keyMapTb;

    for (var keyId in locKeyMapTb) {
      if (locKeyMapTb[keyId] === key) return this._valueMapTb[keyId];
    }

    return null;
  },
  valueForKey: function valueForKey(key) {
    return this.objectForKey(key);
  },
  removeObjectForKey: function removeObjectForKey(key) {
    if (key == null) return;
    var locKeyMapTb = this._keyMapTb;

    for (var keyId in locKeyMapTb) {
      if (locKeyMapTb[keyId] === key) {
        delete this._valueMapTb[keyId];
        delete locKeyMapTb[keyId];
        return;
      }
    }
  },
  removeObjectsForKeys: function removeObjectsForKeys(keys) {
    if (keys == null) return;

    for (var i = 0; i < keys.length; i++) {
      this.removeObjectForKey(keys[i]);
    }
  },
  allKeys: function allKeys() {
    var keyArr = [],
        locKeyMapTb = this._keyMapTb;

    for (var key in locKeyMapTb) {
      keyArr.push(locKeyMapTb[key]);
    }

    return keyArr;
  },
  removeAllObjects: function removeAllObjects() {
    this._keyMapTb = {};
    this._valueMapTb = {};
  },
  count: function count() {
    return this.allKeys().length;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0RpY3Rpb25hcnkuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIl9rZXlNYXBUYiIsIl92YWx1ZU1hcFRiIiwiX19jdXJySWQiLCJjdG9yIiwiTWF0aCIsInJhbmRvbSIsIl9fZ2V0S2V5Iiwic2V0T2JqZWN0IiwidmFsdWUiLCJrZXkiLCJrZXlJZCIsIm9iamVjdEZvcktleSIsImxvY0tleU1hcFRiIiwidmFsdWVGb3JLZXkiLCJyZW1vdmVPYmplY3RGb3JLZXkiLCJyZW1vdmVPYmplY3RzRm9yS2V5cyIsImtleXMiLCJpIiwibGVuZ3RoIiwiYWxsS2V5cyIsImtleUFyciIsInB1c2giLCJyZW1vdmVBbGxPYmplY3RzIiwiY291bnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0xDLEVBQUFBLFNBQVMsRUFBRSxJQUROO0FBRUxDLEVBQUFBLFdBQVcsRUFBRSxJQUZSO0FBR0xDLEVBQUFBLFFBQVEsRUFBRSxDQUhMO0FBS0xDLEVBQUFBLElBQUksRUFBRSxnQkFBWTtBQUNkLFNBQUtILFNBQUwsR0FBaUIsRUFBakI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixNQUFNLElBQUtFLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixFQUEzQixDQUFoQjtBQUNILEdBVEk7QUFVTEMsRUFBQUEsUUFBUSxFQUFFLG9CQUFZO0FBQ2xCLFNBQUtKLFFBQUw7QUFDQSxXQUFPLFNBQVMsS0FBS0EsUUFBckI7QUFDSCxHQWJJO0FBY0xLLEVBQUFBLFNBQVMsRUFBRSxtQkFBVUMsS0FBVixFQUFpQkMsR0FBakIsRUFBc0I7QUFDN0IsUUFBSUEsR0FBRyxJQUFJLElBQVgsRUFDSTs7QUFDSixRQUFJQyxLQUFLLEdBQUcsS0FBS0osUUFBTCxFQUFaOztBQUNBLFNBQUtOLFNBQUwsQ0FBZVUsS0FBZixJQUF3QkQsR0FBeEI7QUFDQSxTQUFLUixXQUFMLENBQWlCUyxLQUFqQixJQUEwQkYsS0FBMUI7QUFDSCxHQXBCSTtBQXFCTEcsRUFBQUEsWUFBWSxFQUFFLHNCQUFVRixHQUFWLEVBQWU7QUFDekIsUUFBSUEsR0FBRyxJQUFJLElBQVgsRUFDSSxPQUFPLElBQVA7QUFDSixRQUFJRyxXQUFXLEdBQUcsS0FBS1osU0FBdkI7O0FBQ0EsU0FBSyxJQUFJVSxLQUFULElBQWtCRSxXQUFsQixFQUErQjtBQUMzQixVQUFJQSxXQUFXLENBQUNGLEtBQUQsQ0FBWCxLQUF1QkQsR0FBM0IsRUFDSSxPQUFPLEtBQUtSLFdBQUwsQ0FBaUJTLEtBQWpCLENBQVA7QUFDUDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQTlCSTtBQStCTEcsRUFBQUEsV0FBVyxFQUFFLHFCQUFVSixHQUFWLEVBQWU7QUFDeEIsV0FBTyxLQUFLRSxZQUFMLENBQWtCRixHQUFsQixDQUFQO0FBQ0gsR0FqQ0k7QUFrQ0xLLEVBQUFBLGtCQUFrQixFQUFFLDRCQUFVTCxHQUFWLEVBQWU7QUFDL0IsUUFBSUEsR0FBRyxJQUFJLElBQVgsRUFDSTtBQUNKLFFBQUlHLFdBQVcsR0FBRyxLQUFLWixTQUF2Qjs7QUFDQSxTQUFLLElBQUlVLEtBQVQsSUFBa0JFLFdBQWxCLEVBQStCO0FBQzNCLFVBQUlBLFdBQVcsQ0FBQ0YsS0FBRCxDQUFYLEtBQXVCRCxHQUEzQixFQUFnQztBQUM1QixlQUFPLEtBQUtSLFdBQUwsQ0FBaUJTLEtBQWpCLENBQVA7QUFDQSxlQUFPRSxXQUFXLENBQUNGLEtBQUQsQ0FBbEI7QUFDQTtBQUNIO0FBQ0o7QUFDSixHQTdDSTtBQThDTEssRUFBQUEsb0JBQW9CLEVBQUUsOEJBQVVDLElBQVYsRUFBZ0I7QUFDbEMsUUFBSUEsSUFBSSxJQUFJLElBQVosRUFDSTs7QUFDSixTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELElBQUksQ0FBQ0UsTUFBekIsRUFBaUNELENBQUMsRUFBbEM7QUFDSSxXQUFLSCxrQkFBTCxDQUF3QkUsSUFBSSxDQUFDQyxDQUFELENBQTVCO0FBREo7QUFFSCxHQW5ESTtBQW9ETEUsRUFBQUEsT0FBTyxFQUFFLG1CQUFZO0FBQ2pCLFFBQUlDLE1BQU0sR0FBRyxFQUFiO0FBQUEsUUFBaUJSLFdBQVcsR0FBRyxLQUFLWixTQUFwQzs7QUFDQSxTQUFLLElBQUlTLEdBQVQsSUFBZ0JHLFdBQWhCO0FBQ0lRLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxXQUFXLENBQUNILEdBQUQsQ0FBdkI7QUFESjs7QUFFQSxXQUFPVyxNQUFQO0FBQ0gsR0F6REk7QUEwRExFLEVBQUFBLGdCQUFnQixFQUFFLDRCQUFZO0FBQzFCLFNBQUt0QixTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixFQUFuQjtBQUNILEdBN0RJO0FBOERMc0IsRUFBQUEsS0FBSyxFQUFFLGlCQUFZO0FBQ2YsV0FBTyxLQUFLSixPQUFMLEdBQWVELE1BQXRCO0FBQ0g7QUFoRUksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xuICAgIF9rZXlNYXBUYjogbnVsbCxcbiAgICBfdmFsdWVNYXBUYjogbnVsbCxcbiAgICBfX2N1cnJJZDogMCxcbiAgICBcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2tleU1hcFRiID0ge307XG4gICAgICAgIHRoaXMuX3ZhbHVlTWFwVGIgPSB7fTtcbiAgICAgICAgdGhpcy5fX2N1cnJJZCA9IDIgPDwgKDAgfCAoTWF0aC5yYW5kb20oKSAqIDEwKSk7XG4gICAgfSxcbiAgICBfX2dldEtleTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9fY3VycklkKys7XG4gICAgICAgIHJldHVybiBcImtleV9cIiArIHRoaXMuX19jdXJySWQ7XG4gICAgfSxcbiAgICBzZXRPYmplY3Q6IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGtleUlkID0gdGhpcy5fX2dldEtleSgpO1xuICAgICAgICB0aGlzLl9rZXlNYXBUYltrZXlJZF0gPSBrZXk7XG4gICAgICAgIHRoaXMuX3ZhbHVlTWFwVGJba2V5SWRdID0gdmFsdWU7XG4gICAgfSxcbiAgICBvYmplY3RGb3JLZXk6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBsb2NLZXlNYXBUYiA9IHRoaXMuX2tleU1hcFRiO1xuICAgICAgICBmb3IgKHZhciBrZXlJZCBpbiBsb2NLZXlNYXBUYikge1xuICAgICAgICAgICAgaWYgKGxvY0tleU1hcFRiW2tleUlkXSA9PT0ga2V5KVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZU1hcFRiW2tleUlkXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHZhbHVlRm9yS2V5OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdEZvcktleShrZXkpO1xuICAgIH0sXG4gICAgcmVtb3ZlT2JqZWN0Rm9yS2V5OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGxvY0tleU1hcFRiID0gdGhpcy5fa2V5TWFwVGI7XG4gICAgICAgIGZvciAodmFyIGtleUlkIGluIGxvY0tleU1hcFRiKSB7XG4gICAgICAgICAgICBpZiAobG9jS2V5TWFwVGJba2V5SWRdID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fdmFsdWVNYXBUYltrZXlJZF07XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxvY0tleU1hcFRiW2tleUlkXTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZU9iamVjdHNGb3JLZXlzOiBmdW5jdGlvbiAoa2V5cykge1xuICAgICAgICBpZiAoa2V5cyA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB0aGlzLnJlbW92ZU9iamVjdEZvcktleShrZXlzW2ldKTtcbiAgICB9LFxuICAgIGFsbEtleXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleUFyciA9IFtdLCBsb2NLZXlNYXBUYiA9IHRoaXMuX2tleU1hcFRiO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbG9jS2V5TWFwVGIpXG4gICAgICAgICAgICBrZXlBcnIucHVzaChsb2NLZXlNYXBUYltrZXldKTtcbiAgICAgICAgcmV0dXJuIGtleUFycjtcbiAgICB9LFxuICAgIHJlbW92ZUFsbE9iamVjdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fa2V5TWFwVGIgPSB7fTtcbiAgICAgICAgdGhpcy5fdmFsdWVNYXBUYiA9IHt9O1xuICAgIH0sXG4gICAgY291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsS2V5cygpLmxlbmd0aDtcbiAgICB9XG59KTsiXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/ArcSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '58c5bfG9UVBHrbtlPel5W/y', 'ArcSprite');
// scripts/ArcSprite.js

"use strict";

var mySprite = require("MySprite");

var common = require("Common");

cc.Class({
  "extends": mySprite,
  properties: {
    role: "lr"
  },
  start: function start() {
    this._animation = this.getComponent(cc.Animation);
    this._animation.WrapMode = cc.WrapMode.Loop;

    if (this.layoutOp == null) {
      //if archer stand up on the base.
      this.layoutOp = this.node.parent.parent.getComponent("Game");
    }
  },
  remove: function remove() {
    this._animation.play("dieoff2");

    this.shadow.destroy();
    this.blood.destroy();
  },
  dieStart: function dieStart() {
    console.log("die start");
  },
  dieEnd: function dieEnd() {
    console.log("die end");

    this._animation.play("footprint");
  },
  //ske clip ske_bomb, foot print start evt
  footStart: function footStart() {
    console.log("foot start");
  },
  footEnd: function footEnd() {
    console.log("foot end");
    this.node.destroy();
  },
  //ske clip ske_bomb, foot print start evt
  footPrint: function footPrint() {
    this.node.zIndex = -1;
    this.node.scaleX = 1;
    this.node.scaleY = 1;
  },
  //ske clip ske_bomb, called by first frame of ske_bomb
  beforeKill: function beforeKill() {//this.shadow.destroy();
  },
  //ske clip ske_bomb, called by last frame of ske_bomb
  afterKill: function afterKill() {
    console.log("--remove archer node--");
    this.node.destroy();
  },
  frame1Evt: function frame1Evt() {
    this.dispShadow(1);
  },
  frame2Evt: function frame2Evt() {
    this.dispShadow(2);
  },
  frame3Evt: function frame3Evt() {
    this.dispShadow(3);
  },
  frame4Evt: function frame4Evt() {
    this.dispShadow(4);
  },
  frame5Evt: function frame5Evt() {
    this.dispShadow(5);
  },
  frame6Evt: function frame6Evt() {
    this.dispShadow(6);
  },
  frame7Evt: function frame7Evt() {
    this.dispShadow(7);
  },
  aFrame1Evt: function aFrame1Evt() {
    this.layoutOp.playSnd("lr");
  },
  aFrame2Evt: function aFrame2Evt() {},
  aFrame3Evt: function aFrame3Evt() {},
  aFrame4Evt: function aFrame4Evt() {},
  aFrame5Evt: function aFrame5Evt() {},
  playAni: function playAni(agent, agentFuture, isMainPlayer) {
    this.playAngleAnimationRemote(agent, agentFuture, isMainPlayer);
  },
  isEnemyBase: function isEnemyBase(baseId) {
    if (baseId == 1 || baseId == 2 || baseId == 3) {
      return true;
    } else {
      return false;
    }
  },
  isEnemyFort: function isEnemyFort(isAgentHero, mainPlayer) {
    if (isAgentHero && mainPlayer == 2) {
      return true;
    }

    if (!isAgentHero && mainPlayer == 1) {
      return true;
    }

    return false;
  },
  playBaseWarriorAnimationDefault: function playBaseWarriorAnimationDefault(actType, baseId) {
    var actName;

    if (this.isEnemyBase(baseId)) {
      actName = "lr_s_walk";
    } else {
      actName = "lr_n_walk";
    }

    if (actType == "move" && this.lastAct == actName) {
      return;
    }

    var randomTime = Math.ceil(Math.random() * 125) / 100;

    this._animation.play(actName, randomTime);

    this.lastAct = actName;
  },
  playFortWarriorAnimationDefault: function playFortWarriorAnimationDefault(actType, isAgentHero, mainPlayer) {
    var actName;

    if (this.isEnemyFort(isAgentHero, mainPlayer)) {
      actName = "lr_s_walk";
    } else {
      actName = "lr_n_walk";
    }

    if (actType == "move" && this.lastAct == actName) {
      return;
    }

    var randomTime = Math.ceil(Math.random() * 125) / 100;

    this._animation.play(actName, randomTime);

    this.lastAct = actName;
  },
  playBaseWarriorAnimation: function playBaseWarriorAnimation(agent, isMainPlayer, actType) {
    var fx, fy;
    var targetYOffset = common.attackTargetYOffset;
    var ex, ey;
    var angle;
    var x = agent.mypos.x;
    var y = agent.mypos.y;
    var startPos, targetPos, startEPos, targetEPos, vt, vtE;
    var randomTime = Math.ceil(Math.random() * 125) / 100;
    var actName = "";
    var then;
    var angleInfo; // user to control the up and down user Y postion offset.

    var offsetDir = 1;

    if (isMainPlayer == 1) {
      offsetDir = 1;
    } else if (isMainPlayer == 2) {
      offsetDir = -1;
    }

    ex = agent.enemypos.x;
    ey = agent.enemypos.y; // dir according to enemy position

    startPos = cc.v2(x * 30, y * 30);
    targetPos = cc.v2(ex * 30, ey * 30 + targetYOffset * offsetDir);
    vt = startPos.sub(targetPos);

    if (vt.x == 0 && vt.y == 0) {
      return;
    } //if dir no changed, vt.x or vt.y is 0, atan value should be invaild


    if (vt.x == 0) {
      vt.x = 0.1;
    }

    if (vt.y == 0) {
      vt.y = 0.1;
    } //if postion not changed, do nothing, or the math.atan will do error.


    if (vt.x != 0 && vt.y != 0) {
      var ag = 180 / Math.PI * Math.atan(vt.x / vt.y);
      angle = ag;

      if (vt.y >= 0) {
        //when down to up
        angle = ag + 180;
      }
    }

    if (this._animation) {
      angleInfo = this.getActnameByAngle(angle, actType);
      actName = angleInfo.actName; //used to mirror a sprite.

      this.node.scaleX = angleInfo.scaleX; //if already in attack mode, just skip the animation

      if (this.lastAct != actName || actType == "sa") {
        if (actType == "sa") {
          this._animation.stop();

          this._animation.play(actName);
        } else {
          //walking action.
          this._animation.play(actName, randomTime);
        }

        this.angle = angle;
        this.lastAct = actName;
        this.lastScaleX = angleInfo.scaleX;
      }
    }
  }
  /*
      shootArrow: function() {
          this.shootAgent();    
      },  
  
      shootAgent:function() {
          var ex, ey;
          var x = this.ox;
          var y = this.oy;
          var arrow = this.arrow;
          var enemies = this.killedEnemies;
          var targetYOffset = common.attackTargetYOffset;
  
          var startPos = cc.v2(x*30+15, y*30+15);
  
          //var ex = this.ex*30;
          //var ey = this.ey*30 + targetYOffset;
  
          if(this.enemy && this.enemy._name !== "" && this.enemy.x && this.enemy.y) {
              ex = this.enemy.x;
              ey = this.enemy.y;
          } else {
              ex = this.ex * 30;
              ey = this.ey *30 + targetYOffset;             
          }
  
  
          var targetPos = cc.v2(ex, ey);
          var agentNode, enemy;
  
          if(targetPos.x == 0 && targetPos.y == 0) return;
  
          var vt = targetPos.sub(startPos);
          var ag = 180/Math.PI * Math.atan(vt.x/vt.y);
  
          arrow.active = true;
          arrow.setRotation(ag+180);
          arrow.setPosition(startPos);
  
          var callback = cc.callFunc(function () {
              arrow.active = false;
          });
  
          arrow.runAction(cc.sequence(cc.moveTo(0.2, targetPos), callback)); 
      },
  
      shootBase:function(x, y, enemy, arrow) {
          var x = this.ox;
          var y = this.oy; 
          var enemy = this.enemy; 
          var arrow = this.arrow;
  
          var startPos = cc.v2(x*30+15, y*30+15);
          var ex = enemy.mypos.x;
          var ey = enemy.mypos.y;
          var blink = cc.blink(0.05,1);
  
          var targetPos = cc.v2(ex*30+15, ey*30+15);
          var agentNode;
          if(!enemy) {
              return;
          }
  
          if(targetPos.x == 0 && targetPos.y == 0) return;
  
          var vt = targetPos.sub(startPos);
          var ag = 180/Math.PI * Math.atan(vt.x/vt.y);
  
          arrow.active = true;
          arrow.setRotation(ag+180);
          arrow.setPosition(startPos);
  
          var callback = cc.callFunc(function () {
              enemy.baseObj.runAction(blink);
              arrow.active = false;
          });
  
          arrow.runAction(cc.sequence(cc.moveTo(0.2, targetPos), callback)); 
      },
  */

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0FyY1Nwcml0ZS5qcyJdLCJuYW1lcyI6WyJteVNwcml0ZSIsInJlcXVpcmUiLCJjb21tb24iLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInJvbGUiLCJzdGFydCIsIl9hbmltYXRpb24iLCJnZXRDb21wb25lbnQiLCJBbmltYXRpb24iLCJXcmFwTW9kZSIsIkxvb3AiLCJsYXlvdXRPcCIsIm5vZGUiLCJwYXJlbnQiLCJyZW1vdmUiLCJwbGF5Iiwic2hhZG93IiwiZGVzdHJveSIsImJsb29kIiwiZGllU3RhcnQiLCJjb25zb2xlIiwibG9nIiwiZGllRW5kIiwiZm9vdFN0YXJ0IiwiZm9vdEVuZCIsImZvb3RQcmludCIsInpJbmRleCIsInNjYWxlWCIsInNjYWxlWSIsImJlZm9yZUtpbGwiLCJhZnRlcktpbGwiLCJmcmFtZTFFdnQiLCJkaXNwU2hhZG93IiwiZnJhbWUyRXZ0IiwiZnJhbWUzRXZ0IiwiZnJhbWU0RXZ0IiwiZnJhbWU1RXZ0IiwiZnJhbWU2RXZ0IiwiZnJhbWU3RXZ0IiwiYUZyYW1lMUV2dCIsInBsYXlTbmQiLCJhRnJhbWUyRXZ0IiwiYUZyYW1lM0V2dCIsImFGcmFtZTRFdnQiLCJhRnJhbWU1RXZ0IiwicGxheUFuaSIsImFnZW50IiwiYWdlbnRGdXR1cmUiLCJpc01haW5QbGF5ZXIiLCJwbGF5QW5nbGVBbmltYXRpb25SZW1vdGUiLCJpc0VuZW15QmFzZSIsImJhc2VJZCIsImlzRW5lbXlGb3J0IiwiaXNBZ2VudEhlcm8iLCJtYWluUGxheWVyIiwicGxheUJhc2VXYXJyaW9yQW5pbWF0aW9uRGVmYXVsdCIsImFjdFR5cGUiLCJhY3ROYW1lIiwibGFzdEFjdCIsInJhbmRvbVRpbWUiLCJNYXRoIiwiY2VpbCIsInJhbmRvbSIsInBsYXlGb3J0V2FycmlvckFuaW1hdGlvbkRlZmF1bHQiLCJwbGF5QmFzZVdhcnJpb3JBbmltYXRpb24iLCJmeCIsImZ5IiwidGFyZ2V0WU9mZnNldCIsImF0dGFja1RhcmdldFlPZmZzZXQiLCJleCIsImV5IiwiYW5nbGUiLCJ4IiwibXlwb3MiLCJ5Iiwic3RhcnRQb3MiLCJ0YXJnZXRQb3MiLCJzdGFydEVQb3MiLCJ0YXJnZXRFUG9zIiwidnQiLCJ2dEUiLCJ0aGVuIiwiYW5nbGVJbmZvIiwib2Zmc2V0RGlyIiwiZW5lbXlwb3MiLCJ2MiIsInN1YiIsImFnIiwiUEkiLCJhdGFuIiwiZ2V0QWN0bmFtZUJ5QW5nbGUiLCJzdG9wIiwibGFzdFNjYWxlWCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLElBQUlDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUFFLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0osUUFESjtBQUdMSyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsSUFBSSxFQUFDO0FBREcsR0FIUDtBQU9MQyxFQUFBQSxLQVBLLG1CQU9JO0FBQ0wsU0FBS0MsVUFBTCxHQUFrQixLQUFLQyxZQUFMLENBQWtCTixFQUFFLENBQUNPLFNBQXJCLENBQWxCO0FBQ0EsU0FBS0YsVUFBTCxDQUFnQkcsUUFBaEIsR0FBMkJSLEVBQUUsQ0FBQ1EsUUFBSCxDQUFZQyxJQUF2Qzs7QUFDQSxRQUFHLEtBQUtDLFFBQUwsSUFBaUIsSUFBcEIsRUFBMEI7QUFBRztBQUN6QixXQUFLQSxRQUFMLEdBQWdCLEtBQUtDLElBQUwsQ0FBVUMsTUFBVixDQUFpQkEsTUFBakIsQ0FBd0JOLFlBQXhCLENBQXFDLE1BQXJDLENBQWhCO0FBQ0g7QUFDSixHQWJJO0FBZUxPLEVBQUFBLE1BQU0sRUFBRSxrQkFBVztBQUNmLFNBQUtSLFVBQUwsQ0FBZ0JTLElBQWhCLENBQXFCLFNBQXJCOztBQUNBLFNBQUtDLE1BQUwsQ0FBWUMsT0FBWjtBQUNBLFNBQUtDLEtBQUwsQ0FBV0QsT0FBWDtBQUNILEdBbkJJO0FBcUJMRSxFQUFBQSxRQUFRLEVBQUUsb0JBQVc7QUFDakJDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFdBQVo7QUFDSCxHQXZCSTtBQXlCTEMsRUFBQUEsTUFBTSxFQUFFLGtCQUFXO0FBQ2ZGLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFNBQVo7O0FBQ0EsU0FBS2YsVUFBTCxDQUFnQlMsSUFBaEIsQ0FBcUIsV0FBckI7QUFDSCxHQTVCSTtBQThCTDtBQUNBUSxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEJILElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFlBQVo7QUFDSCxHQWpDSTtBQW1DTEcsRUFBQUEsT0FBTyxFQUFFLG1CQUFXO0FBQ2hCSixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxVQUFaO0FBQ0EsU0FBS1QsSUFBTCxDQUFVSyxPQUFWO0FBQ0gsR0F0Q0k7QUF3Q0w7QUFDQVEsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtiLElBQUwsQ0FBVWMsTUFBVixHQUFtQixDQUFDLENBQXBCO0FBQ0EsU0FBS2QsSUFBTCxDQUFVZSxNQUFWLEdBQW1CLENBQW5CO0FBQ0EsU0FBS2YsSUFBTCxDQUFVZ0IsTUFBVixHQUFtQixDQUFuQjtBQUNILEdBN0NJO0FBK0NMO0FBQ0FDLEVBQUFBLFVBQVUsRUFBRSxzQkFBVyxDQUNuQjtBQUNILEdBbERJO0FBb0RMO0FBQ0FDLEVBQUFBLFNBQVMsRUFBRSxxQkFBVztBQUNsQlYsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVo7QUFDQSxTQUFLVCxJQUFMLENBQVVLLE9BQVY7QUFDSCxHQXhESTtBQTBETGMsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtDLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQTVESTtBQThETEMsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtELFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQWhFSTtBQWtFTEUsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtGLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQXBFSTtBQXNFTEcsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtILFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQXhFSTtBQTBFTEksRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtKLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQTVFSTtBQThFTEssRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtMLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQWhGSTtBQWtGTE0sRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtOLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQXBGSTtBQXVGTE8sRUFBQUEsVUFBVSxFQUFFLHNCQUFXO0FBQ25CLFNBQUs1QixRQUFMLENBQWM2QixPQUFkLENBQXNCLElBQXRCO0FBQ0gsR0F6Rkk7QUEyRkxDLEVBQUFBLFVBQVUsRUFBRSxzQkFBVyxDQUN0QixDQTVGSTtBQThGTEMsRUFBQUEsVUFBVSxFQUFFLHNCQUFXLENBQ3RCLENBL0ZJO0FBaUdMQyxFQUFBQSxVQUFVLEVBQUUsc0JBQVcsQ0FDdEIsQ0FsR0k7QUFvR0xDLEVBQUFBLFVBQVUsRUFBRSxzQkFBVyxDQUN0QixDQXJHSTtBQXVHTEMsRUFBQUEsT0FBTyxFQUFFLGlCQUFTQyxLQUFULEVBQWdCQyxXQUFoQixFQUE2QkMsWUFBN0IsRUFBMkM7QUFDaEQsU0FBS0Msd0JBQUwsQ0FBOEJILEtBQTlCLEVBQXFDQyxXQUFyQyxFQUFrREMsWUFBbEQ7QUFDSCxHQXpHSTtBQTJHTEUsRUFBQUEsV0FBVyxFQUFFLHFCQUFTQyxNQUFULEVBQWlCO0FBQzFCLFFBQUdBLE1BQU0sSUFBSSxDQUFWLElBQWVBLE1BQU0sSUFBSSxDQUF6QixJQUE4QkEsTUFBTSxJQUFJLENBQTNDLEVBQThDO0FBQzFDLGFBQU8sSUFBUDtBQUNILEtBRkQsTUFFTztBQUNILGFBQU8sS0FBUDtBQUNIO0FBQ0osR0FqSEk7QUFtSExDLEVBQUFBLFdBQVcsRUFBRSxxQkFBU0MsV0FBVCxFQUFzQkMsVUFBdEIsRUFBa0M7QUFDM0MsUUFBR0QsV0FBVyxJQUFJQyxVQUFVLElBQUksQ0FBaEMsRUFBbUM7QUFDL0IsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsUUFBRyxDQUFDRCxXQUFELElBQWdCQyxVQUFVLElBQUksQ0FBakMsRUFBb0M7QUFDaEMsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBTyxLQUFQO0FBQ0gsR0EzSEk7QUE2SExDLEVBQUFBLCtCQUErQixFQUFFLHlDQUFTQyxPQUFULEVBQWtCTCxNQUFsQixFQUEwQjtBQUN2RCxRQUFJTSxPQUFKOztBQUVBLFFBQUcsS0FBS1AsV0FBTCxDQUFpQkMsTUFBakIsQ0FBSCxFQUE2QjtBQUN6Qk0sTUFBQUEsT0FBTyxHQUFHLFdBQVY7QUFDSCxLQUZELE1BRU87QUFDSEEsTUFBQUEsT0FBTyxHQUFHLFdBQVY7QUFDSDs7QUFFRCxRQUFHRCxPQUFPLElBQUksTUFBWCxJQUFxQixLQUFLRSxPQUFMLElBQWdCRCxPQUF4QyxFQUFpRDtBQUM3QztBQUNIOztBQUVELFFBQUlFLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxJQUFMLENBQVVELElBQUksQ0FBQ0UsTUFBTCxLQUFjLEdBQXhCLElBQTZCLEdBQTlDOztBQUNBLFNBQUt4RCxVQUFMLENBQWdCUyxJQUFoQixDQUFxQjBDLE9BQXJCLEVBQThCRSxVQUE5Qjs7QUFDQSxTQUFLRCxPQUFMLEdBQWVELE9BQWY7QUFDSCxHQTdJSTtBQStJTE0sRUFBQUEsK0JBQStCLEVBQUUseUNBQVNQLE9BQVQsRUFBa0JILFdBQWxCLEVBQStCQyxVQUEvQixFQUEyQztBQUN4RSxRQUFJRyxPQUFKOztBQUVBLFFBQUcsS0FBS0wsV0FBTCxDQUFpQkMsV0FBakIsRUFBOEJDLFVBQTlCLENBQUgsRUFBOEM7QUFDMUNHLE1BQUFBLE9BQU8sR0FBRyxXQUFWO0FBQ0gsS0FGRCxNQUVPO0FBQ0hBLE1BQUFBLE9BQU8sR0FBRyxXQUFWO0FBQ0g7O0FBRUQsUUFBR0QsT0FBTyxJQUFJLE1BQVgsSUFBcUIsS0FBS0UsT0FBTCxJQUFnQkQsT0FBeEMsRUFBaUQ7QUFDN0M7QUFDSDs7QUFFRCxRQUFJRSxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsSUFBTCxDQUFVRCxJQUFJLENBQUNFLE1BQUwsS0FBYyxHQUF4QixJQUE2QixHQUE5Qzs7QUFDQSxTQUFLeEQsVUFBTCxDQUFnQlMsSUFBaEIsQ0FBcUIwQyxPQUFyQixFQUE4QkUsVUFBOUI7O0FBQ0EsU0FBS0QsT0FBTCxHQUFlRCxPQUFmO0FBQ0gsR0EvSkk7QUFpS0xPLEVBQUFBLHdCQUF3QixFQUFFLGtDQUFTbEIsS0FBVCxFQUFnQkUsWUFBaEIsRUFBOEJRLE9BQTlCLEVBQXVDO0FBQzdELFFBQUlTLEVBQUosRUFBT0MsRUFBUDtBQUNBLFFBQUlDLGFBQWEsR0FBR25FLE1BQU0sQ0FBQ29FLG1CQUEzQjtBQUNBLFFBQUlDLEVBQUosRUFBUUMsRUFBUjtBQUNBLFFBQUlDLEtBQUo7QUFDQSxRQUFJQyxDQUFDLEdBQUcxQixLQUFLLENBQUMyQixLQUFOLENBQVlELENBQXBCO0FBQ0EsUUFBSUUsQ0FBQyxHQUFHNUIsS0FBSyxDQUFDMkIsS0FBTixDQUFZQyxDQUFwQjtBQUVBLFFBQUlDLFFBQUosRUFBYUMsU0FBYixFQUF1QkMsU0FBdkIsRUFBa0NDLFVBQWxDLEVBQThDQyxFQUE5QyxFQUFrREMsR0FBbEQ7QUFFQSxRQUFJckIsVUFBVSxHQUFHQyxJQUFJLENBQUNDLElBQUwsQ0FBVUQsSUFBSSxDQUFDRSxNQUFMLEtBQWMsR0FBeEIsSUFBNkIsR0FBOUM7QUFDQSxRQUFJTCxPQUFPLEdBQUcsRUFBZDtBQUNBLFFBQUl3QixJQUFKO0FBQ0EsUUFBSUMsU0FBSixDQWI2RCxDQWU3RDs7QUFDQSxRQUFJQyxTQUFTLEdBQUcsQ0FBaEI7O0FBRUEsUUFBR25DLFlBQVksSUFBSSxDQUFuQixFQUFzQjtBQUNsQm1DLE1BQUFBLFNBQVMsR0FBRyxDQUFaO0FBQ0gsS0FGRCxNQUdLLElBQUduQyxZQUFZLElBQUksQ0FBbkIsRUFBc0I7QUFDdkJtQyxNQUFBQSxTQUFTLEdBQUcsQ0FBQyxDQUFiO0FBQ0g7O0FBRURkLElBQUFBLEVBQUUsR0FBR3ZCLEtBQUssQ0FBQ3NDLFFBQU4sQ0FBZVosQ0FBcEI7QUFDQUYsSUFBQUEsRUFBRSxHQUFHeEIsS0FBSyxDQUFDc0MsUUFBTixDQUFlVixDQUFwQixDQTFCNkQsQ0E0QjdEOztBQUNBQyxJQUFBQSxRQUFRLEdBQUkxRSxFQUFFLENBQUNvRixFQUFILENBQU9iLENBQUQsR0FBSSxFQUFWLEVBQWVFLENBQUQsR0FBSSxFQUFsQixDQUFaO0FBQ0FFLElBQUFBLFNBQVMsR0FBRzNFLEVBQUUsQ0FBQ29GLEVBQUgsQ0FBT2hCLEVBQUQsR0FBSyxFQUFYLEVBQWdCQyxFQUFELEdBQUssRUFBTCxHQUFRSCxhQUFhLEdBQUNnQixTQUFyQyxDQUFaO0FBQ0FKLElBQUFBLEVBQUUsR0FBR0osUUFBUSxDQUFDVyxHQUFULENBQWFWLFNBQWIsQ0FBTDs7QUFFQSxRQUFHRyxFQUFFLENBQUNQLENBQUgsSUFBUSxDQUFSLElBQWFPLEVBQUUsQ0FBQ0wsQ0FBSCxJQUFRLENBQXhCLEVBQTJCO0FBQ3ZCO0FBQ0gsS0FuQzRELENBcUM3RDs7O0FBQ0EsUUFBR0ssRUFBRSxDQUFDUCxDQUFILElBQVEsQ0FBWCxFQUFjO0FBQ1ZPLE1BQUFBLEVBQUUsQ0FBQ1AsQ0FBSCxHQUFPLEdBQVA7QUFDSDs7QUFDRCxRQUFHTyxFQUFFLENBQUNMLENBQUgsSUFBUSxDQUFYLEVBQWM7QUFDVkssTUFBQUEsRUFBRSxDQUFDTCxDQUFILEdBQU8sR0FBUDtBQUNILEtBM0M0RCxDQTZDN0Q7OztBQUNBLFFBQUdLLEVBQUUsQ0FBQ1AsQ0FBSCxJQUFRLENBQVIsSUFBYU8sRUFBRSxDQUFDTCxDQUFILElBQVEsQ0FBeEIsRUFBMkI7QUFDdkIsVUFBSWEsRUFBRSxHQUFHLE1BQUkzQixJQUFJLENBQUM0QixFQUFULEdBQWM1QixJQUFJLENBQUM2QixJQUFMLENBQVVWLEVBQUUsQ0FBQ1AsQ0FBSCxHQUFLTyxFQUFFLENBQUNMLENBQWxCLENBQXZCO0FBQ0FILE1BQUFBLEtBQUssR0FBR2dCLEVBQVI7O0FBQ0EsVUFBR1IsRUFBRSxDQUFDTCxDQUFILElBQVEsQ0FBWCxFQUFjO0FBQ1Y7QUFDQUgsUUFBQUEsS0FBSyxHQUFHZ0IsRUFBRSxHQUFHLEdBQWI7QUFDSDtBQUNKOztBQUVELFFBQUcsS0FBS2pGLFVBQVIsRUFBb0I7QUFDaEI0RSxNQUFBQSxTQUFTLEdBQUcsS0FBS1EsaUJBQUwsQ0FBdUJuQixLQUF2QixFQUE4QmYsT0FBOUIsQ0FBWjtBQUNBQyxNQUFBQSxPQUFPLEdBQUd5QixTQUFTLENBQUN6QixPQUFwQixDQUZnQixDQUloQjs7QUFDQSxXQUFLN0MsSUFBTCxDQUFVZSxNQUFWLEdBQW1CdUQsU0FBUyxDQUFDdkQsTUFBN0IsQ0FMZ0IsQ0FPaEI7O0FBQ0EsVUFBRyxLQUFLK0IsT0FBTCxJQUFnQkQsT0FBaEIsSUFBMkJELE9BQU8sSUFBSSxJQUF6QyxFQUErQztBQUMzQyxZQUFHQSxPQUFPLElBQUksSUFBZCxFQUFvQjtBQUNoQixlQUFLbEQsVUFBTCxDQUFnQnFGLElBQWhCOztBQUNBLGVBQUtyRixVQUFMLENBQWdCUyxJQUFoQixDQUFxQjBDLE9BQXJCO0FBQ0gsU0FIRCxNQUdPO0FBQ0g7QUFDQSxlQUFLbkQsVUFBTCxDQUFnQlMsSUFBaEIsQ0FBcUIwQyxPQUFyQixFQUE4QkUsVUFBOUI7QUFDSDs7QUFDRCxhQUFLWSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxhQUFLYixPQUFMLEdBQWVELE9BQWY7QUFDQSxhQUFLbUMsVUFBTCxHQUFrQlYsU0FBUyxDQUFDdkQsTUFBNUI7QUFDSDtBQUNKO0FBRUo7QUFFTDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaFBTLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBteVNwcml0ZSA9IHJlcXVpcmUoXCJNeVNwcml0ZVwiKTtcbnZhciBjb21tb24gPSByZXF1aXJlKFwiQ29tbW9uXCIpO1xuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogbXlTcHJpdGUsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHJvbGU6XCJsclwiLFxuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IHRoaXMuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbi5XcmFwTW9kZSA9IGNjLldyYXBNb2RlLkxvb3A7XG4gICAgICAgIGlmKHRoaXMubGF5b3V0T3AgPT0gbnVsbCkgeyAgLy9pZiBhcmNoZXIgc3RhbmQgdXAgb24gdGhlIGJhc2UuXG4gICAgICAgICAgICB0aGlzLmxheW91dE9wID0gdGhpcy5ub2RlLnBhcmVudC5wYXJlbnQuZ2V0Q29tcG9uZW50KFwiR2FtZVwiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb24ucGxheShcImRpZW9mZjJcIik7XG4gICAgICAgIHRoaXMuc2hhZG93LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5ibG9vZC5kZXN0cm95KCk7XG4gICAgfSxcblxuICAgIGRpZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJkaWUgc3RhcnRcIik7XG4gICAgfSxcblxuICAgIGRpZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGllIGVuZFwiKTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uLnBsYXkoXCJmb290cHJpbnRcIik7XG4gICAgfSxcblxuICAgIC8vc2tlIGNsaXAgc2tlX2JvbWIsIGZvb3QgcHJpbnQgc3RhcnQgZXZ0XG4gICAgZm9vdFN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmb290IHN0YXJ0XCIpO1xuICAgIH0sXG5cbiAgICBmb290RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmb290IGVuZFwiKTtcbiAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgLy9za2UgY2xpcCBza2VfYm9tYiwgZm9vdCBwcmludCBzdGFydCBldnRcbiAgICBmb290UHJpbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMubm9kZS5zY2FsZVggPSAxO1xuICAgICAgICB0aGlzLm5vZGUuc2NhbGVZID0gMTtcbiAgICB9LFxuXG4gICAgLy9za2UgY2xpcCBza2VfYm9tYiwgY2FsbGVkIGJ5IGZpcnN0IGZyYW1lIG9mIHNrZV9ib21iXG4gICAgYmVmb3JlS2lsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vdGhpcy5zaGFkb3cuZGVzdHJveSgpO1xuICAgIH0sXG5cbiAgICAvL3NrZSBjbGlwIHNrZV9ib21iLCBjYWxsZWQgYnkgbGFzdCBmcmFtZSBvZiBza2VfYm9tYlxuICAgIGFmdGVyS2lsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiLS1yZW1vdmUgYXJjaGVyIG5vZGUtLVwiKTtcbiAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgZnJhbWUxRXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDEpO1xuICAgIH0sXG5cbiAgICBmcmFtZTJFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coMik7XG4gICAgfSxcblxuICAgIGZyYW1lM0V2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdygzKTtcbiAgICB9LFxuXG4gICAgZnJhbWU0RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDQpO1xuICAgIH0sXG5cbiAgICBmcmFtZTVFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coNSk7XG4gICAgfSxcblxuICAgIGZyYW1lNkV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdyg2KTtcbiAgICB9LFxuXG4gICAgZnJhbWU3RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDcpO1xuICAgIH0sXG5cblxuICAgIGFGcmFtZTFFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmxheW91dE9wLnBsYXlTbmQoXCJsclwiKTtcbiAgICB9LFxuXG4gICAgYUZyYW1lMkV2dDogZnVuY3Rpb24oKSB7XG4gICAgfSxcblxuICAgIGFGcmFtZTNFdnQ6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG5cbiAgICBhRnJhbWU0RXZ0OiBmdW5jdGlvbigpIHtcbiAgICB9LFxuXG4gICAgYUZyYW1lNUV2dDogZnVuY3Rpb24oKSB7XG4gICAgfSxcblxuICAgIHBsYXlBbmk6IGZ1bmN0aW9uKGFnZW50LCBhZ2VudEZ1dHVyZSwgaXNNYWluUGxheWVyKSB7XG4gICAgICAgIHRoaXMucGxheUFuZ2xlQW5pbWF0aW9uUmVtb3RlKGFnZW50LCBhZ2VudEZ1dHVyZSwgaXNNYWluUGxheWVyKTtcbiAgICB9LFxuXG4gICAgaXNFbmVteUJhc2U6IGZ1bmN0aW9uKGJhc2VJZCkge1xuICAgICAgICBpZihiYXNlSWQgPT0gMSB8fCBiYXNlSWQgPT0gMiB8fCBiYXNlSWQgPT0gMykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNFbmVteUZvcnQ6IGZ1bmN0aW9uKGlzQWdlbnRIZXJvLCBtYWluUGxheWVyKSB7XG4gICAgICAgIGlmKGlzQWdlbnRIZXJvICYmIG1haW5QbGF5ZXIgPT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gXG4gICAgICAgIGlmKCFpc0FnZW50SGVybyAmJiBtYWluUGxheWVyID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHBsYXlCYXNlV2FycmlvckFuaW1hdGlvbkRlZmF1bHQ6IGZ1bmN0aW9uKGFjdFR5cGUsIGJhc2VJZCkge1xuICAgICAgICB2YXIgYWN0TmFtZTtcblxuICAgICAgICBpZih0aGlzLmlzRW5lbXlCYXNlKGJhc2VJZCkpIHtcbiAgICAgICAgICAgIGFjdE5hbWUgPSBcImxyX3Nfd2Fsa1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0TmFtZSA9IFwibHJfbl93YWxrXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZihhY3RUeXBlID09IFwibW92ZVwiICYmIHRoaXMubGFzdEFjdCA9PSBhY3ROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmFuZG9tVGltZSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpKjEyNSkvMTAwO1xuICAgICAgICB0aGlzLl9hbmltYXRpb24ucGxheShhY3ROYW1lLCByYW5kb21UaW1lKTtcbiAgICAgICAgdGhpcy5sYXN0QWN0ID0gYWN0TmFtZTtcbiAgICB9LFxuXG4gICAgcGxheUZvcnRXYXJyaW9yQW5pbWF0aW9uRGVmYXVsdDogZnVuY3Rpb24oYWN0VHlwZSwgaXNBZ2VudEhlcm8sIG1haW5QbGF5ZXIpIHtcbiAgICAgICAgdmFyIGFjdE5hbWU7XG5cbiAgICAgICAgaWYodGhpcy5pc0VuZW15Rm9ydChpc0FnZW50SGVybywgbWFpblBsYXllcikpIHtcbiAgICAgICAgICAgIGFjdE5hbWUgPSBcImxyX3Nfd2Fsa1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0TmFtZSA9IFwibHJfbl93YWxrXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZihhY3RUeXBlID09IFwibW92ZVwiICYmIHRoaXMubGFzdEFjdCA9PSBhY3ROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmFuZG9tVGltZSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpKjEyNSkvMTAwO1xuICAgICAgICB0aGlzLl9hbmltYXRpb24ucGxheShhY3ROYW1lLCByYW5kb21UaW1lKTtcbiAgICAgICAgdGhpcy5sYXN0QWN0ID0gYWN0TmFtZTtcbiAgICB9LFxuXG4gICAgcGxheUJhc2VXYXJyaW9yQW5pbWF0aW9uOiBmdW5jdGlvbihhZ2VudCwgaXNNYWluUGxheWVyLCBhY3RUeXBlKSB7XG4gICAgICAgIHZhciBmeCxmeTtcbiAgICAgICAgdmFyIHRhcmdldFlPZmZzZXQgPSBjb21tb24uYXR0YWNrVGFyZ2V0WU9mZnNldDtcbiAgICAgICAgdmFyIGV4LCBleTtcbiAgICAgICAgdmFyIGFuZ2xlO1xuICAgICAgICB2YXIgeCA9IGFnZW50Lm15cG9zLng7IFxuICAgICAgICB2YXIgeSA9IGFnZW50Lm15cG9zLnk7IFxuXG4gICAgICAgIHZhciBzdGFydFBvcyx0YXJnZXRQb3Msc3RhcnRFUG9zLCB0YXJnZXRFUG9zLCB2dCwgdnRFO1xuXG4gICAgICAgIHZhciByYW5kb21UaW1lID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkqMTI1KS8xMDA7XG4gICAgICAgIHZhciBhY3ROYW1lID0gXCJcIjtcbiAgICAgICAgdmFyIHRoZW47XG4gICAgICAgIHZhciBhbmdsZUluZm87XG5cbiAgICAgICAgLy8gdXNlciB0byBjb250cm9sIHRoZSB1cCBhbmQgZG93biB1c2VyIFkgcG9zdGlvbiBvZmZzZXQuXG4gICAgICAgIHZhciBvZmZzZXREaXIgPSAxO1xuXG4gICAgICAgIGlmKGlzTWFpblBsYXllciA9PSAxKSB7XG4gICAgICAgICAgICBvZmZzZXREaXIgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoaXNNYWluUGxheWVyID09IDIpIHtcbiAgICAgICAgICAgIG9mZnNldERpciA9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgZXggPSBhZ2VudC5lbmVteXBvcy54OyBcbiAgICAgICAgZXkgPSBhZ2VudC5lbmVteXBvcy55OyBcblxuICAgICAgICAvLyBkaXIgYWNjb3JkaW5nIHRvIGVuZW15IHBvc2l0aW9uXG4gICAgICAgIHN0YXJ0UG9zICA9IGNjLnYyKCh4KSozMCwgKHkpKjMwKTtcbiAgICAgICAgdGFyZ2V0UG9zID0gY2MudjIoKGV4KSozMCwgKGV5KSozMCt0YXJnZXRZT2Zmc2V0Km9mZnNldERpcik7XG4gICAgICAgIHZ0ID0gc3RhcnRQb3Muc3ViKHRhcmdldFBvcyk7XG5cbiAgICAgICAgaWYodnQueCA9PSAwICYmIHZ0LnkgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiBkaXIgbm8gY2hhbmdlZCwgdnQueCBvciB2dC55IGlzIDAsIGF0YW4gdmFsdWUgc2hvdWxkIGJlIGludmFpbGRcbiAgICAgICAgaWYodnQueCA9PSAwKSB7XG4gICAgICAgICAgICB2dC54ID0gMC4xO1xuICAgICAgICB9XG4gICAgICAgIGlmKHZ0LnkgPT0gMCkge1xuICAgICAgICAgICAgdnQueSA9IDAuMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgcG9zdGlvbiBub3QgY2hhbmdlZCwgZG8gbm90aGluZywgb3IgdGhlIG1hdGguYXRhbiB3aWxsIGRvIGVycm9yLlxuICAgICAgICBpZih2dC54ICE9IDAgJiYgdnQueSAhPSAwKSB7XG4gICAgICAgICAgICB2YXIgYWcgPSAxODAvTWF0aC5QSSAqIE1hdGguYXRhbih2dC54L3Z0LnkpO1xuICAgICAgICAgICAgYW5nbGUgPSBhZztcbiAgICAgICAgICAgIGlmKHZ0LnkgPj0gMCkge1xuICAgICAgICAgICAgICAgIC8vd2hlbiBkb3duIHRvIHVwXG4gICAgICAgICAgICAgICAgYW5nbGUgPSBhZyArIDE4MDtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0gXG5cbiAgICAgICAgaWYodGhpcy5fYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBhbmdsZUluZm8gPSB0aGlzLmdldEFjdG5hbWVCeUFuZ2xlKGFuZ2xlLCBhY3RUeXBlKTtcbiAgICAgICAgICAgIGFjdE5hbWUgPSBhbmdsZUluZm8uYWN0TmFtZTtcblxuICAgICAgICAgICAgLy91c2VkIHRvIG1pcnJvciBhIHNwcml0ZS5cbiAgICAgICAgICAgIHRoaXMubm9kZS5zY2FsZVggPSBhbmdsZUluZm8uc2NhbGVYO1xuXG4gICAgICAgICAgICAvL2lmIGFscmVhZHkgaW4gYXR0YWNrIG1vZGUsIGp1c3Qgc2tpcCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICBpZih0aGlzLmxhc3RBY3QgIT0gYWN0TmFtZSB8fCBhY3RUeXBlID09IFwic2FcIikge1xuICAgICAgICAgICAgICAgIGlmKGFjdFR5cGUgPT0gXCJzYVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5wbGF5KGFjdE5hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2Fsa2luZyBhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5wbGF5KGFjdE5hbWUsIHJhbmRvbVRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0QWN0ID0gYWN0TmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RTY2FsZVggPSBhbmdsZUluZm8uc2NhbGVYO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4vKlxuICAgIHNob290QXJyb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNob290QWdlbnQoKTsgICAgXG4gICAgfSwgIFxuXG4gICAgc2hvb3RBZ2VudDpmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGV4LCBleTtcbiAgICAgICAgdmFyIHggPSB0aGlzLm94O1xuICAgICAgICB2YXIgeSA9IHRoaXMub3k7XG4gICAgICAgIHZhciBhcnJvdyA9IHRoaXMuYXJyb3c7XG4gICAgICAgIHZhciBlbmVtaWVzID0gdGhpcy5raWxsZWRFbmVtaWVzO1xuICAgICAgICB2YXIgdGFyZ2V0WU9mZnNldCA9IGNvbW1vbi5hdHRhY2tUYXJnZXRZT2Zmc2V0O1xuXG4gICAgICAgIHZhciBzdGFydFBvcyA9IGNjLnYyKHgqMzArMTUsIHkqMzArMTUpO1xuXG4gICAgICAgIC8vdmFyIGV4ID0gdGhpcy5leCozMDtcbiAgICAgICAgLy92YXIgZXkgPSB0aGlzLmV5KjMwICsgdGFyZ2V0WU9mZnNldDtcblxuICAgICAgICBpZih0aGlzLmVuZW15ICYmIHRoaXMuZW5lbXkuX25hbWUgIT09IFwiXCIgJiYgdGhpcy5lbmVteS54ICYmIHRoaXMuZW5lbXkueSkge1xuICAgICAgICAgICAgZXggPSB0aGlzLmVuZW15Lng7XG4gICAgICAgICAgICBleSA9IHRoaXMuZW5lbXkueTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4ID0gdGhpcy5leCAqIDMwO1xuICAgICAgICAgICAgZXkgPSB0aGlzLmV5ICozMCArIHRhcmdldFlPZmZzZXQ7ICAgICAgICAgICAgIFxuICAgICAgICB9XG5cblxuICAgICAgICB2YXIgdGFyZ2V0UG9zID0gY2MudjIoZXgsIGV5KTtcbiAgICAgICAgdmFyIGFnZW50Tm9kZSwgZW5lbXk7XG5cbiAgICAgICAgaWYodGFyZ2V0UG9zLnggPT0gMCAmJiB0YXJnZXRQb3MueSA9PSAwKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHZ0ID0gdGFyZ2V0UG9zLnN1YihzdGFydFBvcyk7XG4gICAgICAgIHZhciBhZyA9IDE4MC9NYXRoLlBJICogTWF0aC5hdGFuKHZ0LngvdnQueSk7XG5cbiAgICAgICAgYXJyb3cuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgYXJyb3cuc2V0Um90YXRpb24oYWcrMTgwKTtcbiAgICAgICAgYXJyb3cuc2V0UG9zaXRpb24oc3RhcnRQb3MpO1xuXG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNjLmNhbGxGdW5jKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFycm93LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICBhcnJvdy5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoY2MubW92ZVRvKDAuMiwgdGFyZ2V0UG9zKSwgY2FsbGJhY2spKTsgXG4gICAgfSxcblxuICAgIHNob290QmFzZTpmdW5jdGlvbih4LCB5LCBlbmVteSwgYXJyb3cpIHtcbiAgICAgICAgdmFyIHggPSB0aGlzLm94O1xuICAgICAgICB2YXIgeSA9IHRoaXMub3k7IFxuICAgICAgICB2YXIgZW5lbXkgPSB0aGlzLmVuZW15OyBcbiAgICAgICAgdmFyIGFycm93ID0gdGhpcy5hcnJvdztcblxuICAgICAgICB2YXIgc3RhcnRQb3MgPSBjYy52Mih4KjMwKzE1LCB5KjMwKzE1KTtcbiAgICAgICAgdmFyIGV4ID0gZW5lbXkubXlwb3MueDtcbiAgICAgICAgdmFyIGV5ID0gZW5lbXkubXlwb3MueTtcbiAgICAgICAgdmFyIGJsaW5rID0gY2MuYmxpbmsoMC4wNSwxKTtcblxuICAgICAgICB2YXIgdGFyZ2V0UG9zID0gY2MudjIoZXgqMzArMTUsIGV5KjMwKzE1KTtcbiAgICAgICAgdmFyIGFnZW50Tm9kZTtcbiAgICAgICAgaWYoIWVuZW15KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZih0YXJnZXRQb3MueCA9PSAwICYmIHRhcmdldFBvcy55ID09IDApIHJldHVybjtcblxuICAgICAgICB2YXIgdnQgPSB0YXJnZXRQb3Muc3ViKHN0YXJ0UG9zKTtcbiAgICAgICAgdmFyIGFnID0gMTgwL01hdGguUEkgKiBNYXRoLmF0YW4odnQueC92dC55KTtcblxuICAgICAgICBhcnJvdy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBhcnJvdy5zZXRSb3RhdGlvbihhZysxODApO1xuICAgICAgICBhcnJvdy5zZXRQb3NpdGlvbihzdGFydFBvcyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrID0gY2MuY2FsbEZ1bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW5lbXkuYmFzZU9iai5ydW5BY3Rpb24oYmxpbmspO1xuICAgICAgICAgICAgYXJyb3cuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFycm93LnJ1bkFjdGlvbihjYy5zZXF1ZW5jZShjYy5tb3ZlVG8oMC4yLCB0YXJnZXRQb3MpLCBjYWxsYmFjaykpOyBcbiAgICB9LFxuKi9cblxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/migration/use_v2.0.x_cc.Toggle_event.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '22346HXLqNDd6dt7jODMK+Y', 'use_v2.0.x_cc.Toggle_event');
// migration/use_v2.0.x_cc.Toggle_event.js

"use strict";

/*
 * This script is automatically generated by Cocos Creator and is only compatible with projects prior to v2.1.0.
 * You do not need to manually add this script in any other project.
 * If you don't use cc.Toggle in your project, you can delete this script directly.
 * If your project is hosted in VCS such as git, submit this script together.
 *
 * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0 之前版本的工程，
 * 你无需在任何其它项目中手动添加此脚本。
 * 如果你的项目中没用到 Toggle，可直接删除该脚本。
 * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。
 */
if (cc.Toggle) {
  // Whether the 'toggle' and 'checkEvents' events are fired when 'toggle.check() / toggle.uncheck()' is called in the code
  // 在代码中调用 'toggle.check() / toggle.uncheck()' 时是否触发 'toggle' 与 'checkEvents' 事件
  cc.Toggle._triggerEventInScript_check = true;
}

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9taWdyYXRpb24vdXNlX3YyLjAueF9jYy5Ub2dnbGVfZXZlbnQuanMiXSwibmFtZXMiOlsiY2MiLCJUb2dnbGUiLCJfdHJpZ2dlckV2ZW50SW5TY3JpcHRfY2hlY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0FBWUEsSUFBSUEsRUFBRSxDQUFDQyxNQUFQLEVBQWU7QUFDWDtBQUNBO0FBQ0FELEVBQUFBLEVBQUUsQ0FBQ0MsTUFBSCxDQUFVQywyQkFBVixHQUF3QyxJQUF4QztBQUNIIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVGhpcyBzY3JpcHQgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgQ29jb3MgQ3JlYXRvciBhbmQgaXMgb25seSBjb21wYXRpYmxlIHdpdGggcHJvamVjdHMgcHJpb3IgdG8gdjIuMS4wLlxuICogWW91IGRvIG5vdCBuZWVkIHRvIG1hbnVhbGx5IGFkZCB0aGlzIHNjcmlwdCBpbiBhbnkgb3RoZXIgcHJvamVjdC5cbiAqIElmIHlvdSBkb24ndCB1c2UgY2MuVG9nZ2xlIGluIHlvdXIgcHJvamVjdCwgeW91IGNhbiBkZWxldGUgdGhpcyBzY3JpcHQgZGlyZWN0bHkuXG4gKiBJZiB5b3VyIHByb2plY3QgaXMgaG9zdGVkIGluIFZDUyBzdWNoIGFzIGdpdCwgc3VibWl0IHRoaXMgc2NyaXB0IHRvZ2V0aGVyLlxuICpcbiAqIOatpOiEmuacrOeUsSBDb2NvcyBDcmVhdG9yIOiHquWKqOeUn+aIkO+8jOS7heeUqOS6juWFvOWuuSB2Mi4xLjAg5LmL5YmN54mI5pys55qE5bel56iL77yMXG4gKiDkvaDml6DpnIDlnKjku7vkvZXlhbblroPpobnnm67kuK3miYvliqjmt7vliqDmraTohJrmnKzjgIJcbiAqIOWmguaenOS9oOeahOmhueebruS4reayoeeUqOWIsCBUb2dnbGXvvIzlj6/nm7TmjqXliKDpmaTor6XohJrmnKzjgIJcbiAqIOWmguaenOS9oOeahOmhueebruacieaJmOeuoeS6jiBnaXQg562J54mI5pys5bqT77yM6K+35bCG5q2k6ISa5pys5LiA5bm25LiK5Lyg44CCXG4gKi9cblxuaWYgKGNjLlRvZ2dsZSkge1xuICAgIC8vIFdoZXRoZXIgdGhlICd0b2dnbGUnIGFuZCAnY2hlY2tFdmVudHMnIGV2ZW50cyBhcmUgZmlyZWQgd2hlbiAndG9nZ2xlLmNoZWNrKCkgLyB0b2dnbGUudW5jaGVjaygpJyBpcyBjYWxsZWQgaW4gdGhlIGNvZGVcbiAgICAvLyDlnKjku6PnoIHkuK3osIPnlKggJ3RvZ2dsZS5jaGVjaygpIC8gdG9nZ2xlLnVuY2hlY2soKScg5pe25piv5ZCm6Kem5Y+RICd0b2dnbGUnIOS4jiAnY2hlY2tFdmVudHMnIOS6i+S7tlxuICAgIGNjLlRvZ2dsZS5fdHJpZ2dlckV2ZW50SW5TY3JpcHRfY2hlY2sgPSB0cnVlO1xufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/BaseSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '22a8a7Kh7NNgJLrjEdbIjIr', 'BaseSprite');
// scripts/BaseSprite.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    basePosY: 28
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    // base postion is fixed by this.basePosY.
    if (this.isBase()) {
      this.node.zIndex = 1000 + parseInt(32 - this.basePosY - 2);
    }

    this._animation = this.getComponent(cc.Animation);
  },
  // start () {},
  isBase: function isBase() {
    if (this.node._name.startWith("base")) {
      return true;
    }

    return false;
  },
  setZIndex: function setZIndex(val) {
    this.node.zIndex = val;
  },
  setTotalLife: function setTotalLife(val) {
    this.totalLife = val;
  },
  setLife: function setLife(val) {
    this.life = val;
    var bloodNode = this.blood.getComponent("BloodBar");
    bloodNode.setBloodBar(this.life, this.totalLife);
  },
  setBloodLevel: function setBloodLevel(val) {},
  setBloodBar: function setBloodBar(life) {
    var bar = this.blood.getChildByName("bar");
    var barTotalWidth = this.blood.width;
    bar.width = life / this.totalLife * barTotalWidth;
  },
  setBlood: function setBlood(blood) {
    this.blood = blood;
    this.blood.active = true;
  },
  remove: function remove() {},
  frameStartEvt: function frameStartEvt() {
    console.log("first.");
  },
  frameEndEvt: function frameEndEvt() {
    console.log("last.");
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0Jhc2VTcHJpdGUuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJiYXNlUG9zWSIsIm9uTG9hZCIsImlzQmFzZSIsIm5vZGUiLCJ6SW5kZXgiLCJwYXJzZUludCIsIl9hbmltYXRpb24iLCJnZXRDb21wb25lbnQiLCJBbmltYXRpb24iLCJfbmFtZSIsInN0YXJ0V2l0aCIsInNldFpJbmRleCIsInZhbCIsInNldFRvdGFsTGlmZSIsInRvdGFsTGlmZSIsInNldExpZmUiLCJsaWZlIiwiYmxvb2ROb2RlIiwiYmxvb2QiLCJzZXRCbG9vZEJhciIsInNldEJsb29kTGV2ZWwiLCJiYXIiLCJnZXRDaGlsZEJ5TmFtZSIsImJhclRvdGFsV2lkdGgiLCJ3aWR0aCIsInNldEJsb29kIiwiYWN0aXZlIiwicmVtb3ZlIiwiZnJhbWVTdGFydEV2dCIsImNvbnNvbGUiLCJsb2ciLCJmcmFtZUVuZEV2dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLFFBQVEsRUFBQztBQWhCRCxHQUhQO0FBc0JMO0FBRUFDLEVBQUFBLE1BeEJLLG9CQXdCSztBQUNOO0FBQ0EsUUFBRyxLQUFLQyxNQUFMLEVBQUgsRUFBa0I7QUFDZCxXQUFLQyxJQUFMLENBQVVDLE1BQVYsR0FBbUIsT0FBS0MsUUFBUSxDQUFDLEtBQUcsS0FBS0wsUUFBUixHQUFpQixDQUFsQixDQUFoQztBQUNIOztBQUNELFNBQUtNLFVBQUwsR0FBa0IsS0FBS0MsWUFBTCxDQUFrQlgsRUFBRSxDQUFDWSxTQUFyQixDQUFsQjtBQUNILEdBOUJJO0FBZ0NMO0FBRUFOLEVBQUFBLE1BQU0sRUFBRSxrQkFBVztBQUNmLFFBQUcsS0FBS0MsSUFBTCxDQUFVTSxLQUFWLENBQWdCQyxTQUFoQixDQUEwQixNQUExQixDQUFILEVBQXNDO0FBQ2xDLGFBQU8sSUFBUDtBQUNIOztBQUNELFdBQU8sS0FBUDtBQUNILEdBdkNJO0FBeUNMQyxFQUFBQSxTQUFTLEVBQUUsbUJBQVNDLEdBQVQsRUFBYztBQUNyQixTQUFLVCxJQUFMLENBQVVDLE1BQVYsR0FBbUJRLEdBQW5CO0FBQ0gsR0EzQ0k7QUE2Q0xDLEVBQUFBLFlBQVksRUFBRSxzQkFBU0QsR0FBVCxFQUFjO0FBQ3hCLFNBQUtFLFNBQUwsR0FBaUJGLEdBQWpCO0FBQ0gsR0EvQ0k7QUFpRExHLEVBQUFBLE9BQU8sRUFBRSxpQkFBU0gsR0FBVCxFQUFjO0FBQ25CLFNBQUtJLElBQUwsR0FBWUosR0FBWjtBQUNBLFFBQUlLLFNBQVMsR0FBRyxLQUFLQyxLQUFMLENBQVdYLFlBQVgsQ0FBd0IsVUFBeEIsQ0FBaEI7QUFDQVUsSUFBQUEsU0FBUyxDQUFDRSxXQUFWLENBQXNCLEtBQUtILElBQTNCLEVBQWlDLEtBQUtGLFNBQXRDO0FBQ0gsR0FyREk7QUF1RExNLEVBQUFBLGFBQWEsRUFBRSx1QkFBU1IsR0FBVCxFQUFjLENBRTVCLENBekRJO0FBMkRMTyxFQUFBQSxXQUFXLEVBQUUscUJBQVNILElBQVQsRUFBZTtBQUN4QixRQUFJSyxHQUFHLEdBQUcsS0FBS0gsS0FBTCxDQUFXSSxjQUFYLENBQTBCLEtBQTFCLENBQVY7QUFDQSxRQUFJQyxhQUFhLEdBQUcsS0FBS0wsS0FBTCxDQUFXTSxLQUEvQjtBQUNBSCxJQUFBQSxHQUFHLENBQUNHLEtBQUosR0FBWVIsSUFBSSxHQUFDLEtBQUtGLFNBQVYsR0FBc0JTLGFBQWxDO0FBQ0gsR0EvREk7QUFpRUxFLEVBQUFBLFFBQVEsRUFBRSxrQkFBU1AsS0FBVCxFQUFnQjtBQUN0QixTQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQSxLQUFMLENBQVdRLE1BQVgsR0FBb0IsSUFBcEI7QUFDSCxHQXBFSTtBQXNFTEMsRUFBQUEsTUFBTSxFQUFFLGtCQUFXLENBQ2xCLENBdkVJO0FBeUVMQyxFQUFBQSxhQUFhLEVBQUUseUJBQVc7QUFDdEJDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFFBQVo7QUFFSCxHQTVFSTtBQThFTEMsRUFBQUEsV0FBVyxFQUFFLHVCQUFXO0FBQ3BCRixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaO0FBQ0gsR0FoRkksQ0FpRkw7O0FBakZLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHA6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGJhc2VQb3NZOjI4LFxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIC8vIGJhc2UgcG9zdGlvbiBpcyBmaXhlZCBieSB0aGlzLmJhc2VQb3NZLlxuICAgICAgICBpZih0aGlzLmlzQmFzZSgpKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gMTAwMCtwYXJzZUludCgzMi10aGlzLmJhc2VQb3NZLTIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IHRoaXMuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7ICAgICAgICBcbiAgICB9LFxuXG4gICAgLy8gc3RhcnQgKCkge30sXG5cbiAgICBpc0Jhc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZih0aGlzLm5vZGUuX25hbWUuc3RhcnRXaXRoKFwiYmFzZVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzZXRaSW5kZXg6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gdmFsO1xuICAgIH0sXG5cbiAgICBzZXRUb3RhbExpZmU6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICB0aGlzLnRvdGFsTGlmZSA9IHZhbDtcbiAgICB9LFxuXG4gICAgc2V0TGlmZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHRoaXMubGlmZSA9IHZhbDtcbiAgICAgICAgdmFyIGJsb29kTm9kZSA9IHRoaXMuYmxvb2QuZ2V0Q29tcG9uZW50KFwiQmxvb2RCYXJcIik7XG4gICAgICAgIGJsb29kTm9kZS5zZXRCbG9vZEJhcih0aGlzLmxpZmUsIHRoaXMudG90YWxMaWZlKTtcbiAgICB9LFxuXG4gICAgc2V0Qmxvb2RMZXZlbDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIFxuICAgIH0sXG5cbiAgICBzZXRCbG9vZEJhcjogZnVuY3Rpb24obGlmZSkge1xuICAgICAgICB2YXIgYmFyID0gdGhpcy5ibG9vZC5nZXRDaGlsZEJ5TmFtZShcImJhclwiKTtcbiAgICAgICAgdmFyIGJhclRvdGFsV2lkdGggPSB0aGlzLmJsb29kLndpZHRoO1xuICAgICAgICBiYXIud2lkdGggPSBsaWZlL3RoaXMudG90YWxMaWZlICogYmFyVG90YWxXaWR0aDtcbiAgICB9LFxuXG4gICAgc2V0Qmxvb2Q6IGZ1bmN0aW9uKGJsb29kKSB7XG4gICAgICAgIHRoaXMuYmxvb2QgPSBibG9vZDtcbiAgICAgICAgdGhpcy5ibG9vZC5hY3RpdmUgPSB0cnVlO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG5cbiAgICBmcmFtZVN0YXJ0RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmaXJzdC5cIik7XG5cbiAgICB9LFxuXG4gICAgZnJhbWVFbmRFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxhc3QuXCIpO1xuICAgIH0sXG4gICAgLy8gdXBkYXRlIChkdCkge30sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/EffectSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6172fstN/ZA5rLXNIqCyFp/', 'EffectSprite');
// scripts/EffectSprite.js

"use strict";

var _cc$Class;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class((_cc$Class = {
  "extends": cc.Component,
  properties: {
    role: ""
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    //fire drop effect
    if (this.role == "fd") {
      this.node.zIndex = 9999;
    } else if (this.role == "firecircle") {
      this.node.zIndex = 9999;
    } //lightman attack effect
    else if (this.role == "light") {
        this.node.zIndex = 9999;
      } else if (this.role == "doubleMagic") {
        this.node.zIndex = 9999;
      }
  },
  spinEffectEndEvt: function spinEffectEndEvt() {
    this.node.destroy();
  },
  wizfireEffectEndEvt: function wizfireEffectEndEvt() {
    this.node.destroy();
  },
  lightEffectEndEvt: function lightEffectEndEvt() {
    this.node.destroy();
  },
  fd_frame5Evt: function fd_frame5Evt() {
    this.node.zIndex = 9999;
  }
}, _defineProperty(_cc$Class, "fd_frame5Evt", function fd_frame5Evt() {
  this.node.zIndex = -1;
}), _defineProperty(_cc$Class, "fd_EffectEndEvt", function fd_EffectEndEvt() {
  this.node.destroy();
}), _defineProperty(_cc$Class, "doubleMagic_dispEnd", function doubleMagic_dispEnd() {
  this.node.destroy();
}), _cc$Class));

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0VmZmVjdFNwcml0ZS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsInJvbGUiLCJzdGFydCIsIm5vZGUiLCJ6SW5kZXgiLCJzcGluRWZmZWN0RW5kRXZ0IiwiZGVzdHJveSIsIndpemZpcmVFZmZlY3RFbmRFdnQiLCJsaWdodEVmZmVjdEVuZEV2dCIsImZkX2ZyYW1lNUV2dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSDtBQUNJLGFBQVNELEVBQUUsQ0FBQ0UsU0FEaEI7QUFHSUMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLElBQUksRUFBQztBQURHLEdBSGhCO0FBT0k7QUFFQTtBQUVBQyxFQUFBQSxLQVhKLG1CQVdhO0FBQ0w7QUFDQSxRQUFHLEtBQUtELElBQUwsSUFBYSxJQUFoQixFQUFzQjtBQUNsQixXQUFLRSxJQUFMLENBQVVDLE1BQVYsR0FBbUIsSUFBbkI7QUFDSCxLQUZELE1BR0ssSUFBRyxLQUFLSCxJQUFMLElBQWEsWUFBaEIsRUFBOEI7QUFDL0IsV0FBS0UsSUFBTCxDQUFVQyxNQUFWLEdBQW1CLElBQW5CO0FBQ0gsS0FGSSxDQUdMO0FBSEssU0FJQSxJQUFHLEtBQUtILElBQUwsSUFBYSxPQUFoQixFQUF5QjtBQUMxQixhQUFLRSxJQUFMLENBQVVDLE1BQVYsR0FBbUIsSUFBbkI7QUFDSCxPQUZJLE1BR0EsSUFBRyxLQUFLSCxJQUFMLElBQWEsYUFBaEIsRUFBK0I7QUFDaEMsYUFBS0UsSUFBTCxDQUFVQyxNQUFWLEdBQW1CLElBQW5CO0FBQ0g7QUFDSixHQTFCTDtBQTRCSUMsRUFBQUEsZ0JBQWdCLEVBQUUsNEJBQVc7QUFDekIsU0FBS0YsSUFBTCxDQUFVRyxPQUFWO0FBQ0gsR0E5Qkw7QUFnQ0lDLEVBQUFBLG1CQUFtQixFQUFFLCtCQUFXO0FBQzVCLFNBQUtKLElBQUwsQ0FBVUcsT0FBVjtBQUNILEdBbENMO0FBb0NJRSxFQUFBQSxpQkFBaUIsRUFBRSw2QkFBVztBQUMxQixTQUFLTCxJQUFMLENBQVVHLE9BQVY7QUFDSCxHQXRDTDtBQXdDSUcsRUFBQUEsWUFBWSxFQUFFLHdCQUFXO0FBQ3JCLFNBQUtOLElBQUwsQ0FBVUMsTUFBVixHQUFtQixJQUFuQjtBQUNIO0FBMUNMLDhDQTRDa0Isd0JBQVc7QUFDckIsT0FBS0QsSUFBTCxDQUFVQyxNQUFWLEdBQW1CLENBQUMsQ0FBcEI7QUFDSCxDQTlDTCxpREFnRHFCLDJCQUFXO0FBQ3hCLE9BQUtELElBQUwsQ0FBVUcsT0FBVjtBQUNILENBbERMLHFEQW9EeUIsK0JBQVc7QUFDNUIsT0FBS0gsSUFBTCxDQUFVRyxPQUFWO0FBQ0gsQ0F0REwiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHA6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHJvbGU6XCJcIixcbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICAvLyBvbkxvYWQgKCkge30sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIC8vZmlyZSBkcm9wIGVmZmVjdFxuICAgICAgICBpZih0aGlzLnJvbGUgPT0gXCJmZFwiKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gOTk5OTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHRoaXMucm9sZSA9PSBcImZpcmVjaXJjbGVcIikge1xuICAgICAgICAgICAgdGhpcy5ub2RlLnpJbmRleCA9IDk5OTk7XG4gICAgICAgIH1cbiAgICAgICAgLy9saWdodG1hbiBhdHRhY2sgZWZmZWN0XG4gICAgICAgIGVsc2UgaWYodGhpcy5yb2xlID09IFwibGlnaHRcIikge1xuICAgICAgICAgICAgdGhpcy5ub2RlLnpJbmRleCA9IDk5OTk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZih0aGlzLnJvbGUgPT0gXCJkb3VibGVNYWdpY1wiKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gOTk5OTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzcGluRWZmZWN0RW5kRXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgd2l6ZmlyZUVmZmVjdEVuZEV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XG4gICAgfSxcblxuICAgIGxpZ2h0RWZmZWN0RW5kRXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgZmRfZnJhbWU1RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLnpJbmRleCA9IDk5OTk7XG4gICAgfSxcblxuICAgIGZkX2ZyYW1lNUV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS56SW5kZXggPSAtMTtcbiAgICB9LFxuXG4gICAgZmRfRWZmZWN0RW5kRXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgZG91YmxlTWFnaWNfZGlzcEVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XG4gICAgfSxcblxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/HeroSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f1d7dQFNudAhLCXA3TwPg0h', 'HeroSprite');
// scripts/HeroSprite.js

"use strict";

var mySprite = require("MySprite");

cc.Class({
  "extends": mySprite,
  properties: {
    role: "hr"
  },
  start: function start() {
    this.layoutOp = this.node.parent.getComponent('Game');
  },
  shootArrow: function shootArrow() {},
  getAttackDistance: function getAttackDistance(agent) {
    return (agent.size + agent.esize) * 0.5 * 1.2;
  },
  playAni: function playAni(agent, agentFuture, isMainPlayer) {
    this.playAngleAnimationNear(agent, agentFuture, isMainPlayer);
  },
  remove: function remove() {
    this._animation.play("dieoff1");

    this.shadow.destroy();
    this.blood.destroy();
  },
  playEffect: function playEffect() {
    this.layoutOp.playEffect("hr", this.node.x, this.node.y);
  },
  removeEffect: function removeEffect() {},
  dieStart: function dieStart() {},
  dieEnd: function dieEnd() {
    this._animation.play("footprint");
  },
  //ske clip ske_bomb, foot print start evt
  footStart: function footStart() {
    this.node.zIndex = -1;
    this.node.scaleX = 1;
    this.node.scaleY = 1;
  },
  footEnd: function footEnd() {
    this.node.destroy();
  },
  //ske clip ske_bomb, called by first frame of ske_bomb
  beforeKill: function beforeKill() {//this.shadow.destroy();
  },
  //ske clip ske_bomb, called by last frame of ske_bomb
  afterKill: function afterKill() {
    this.node.destroy();
  },
  frame1Evt: function frame1Evt() {
    this.dispShadow(1);
  },
  frame2Evt: function frame2Evt() {
    this.dispShadow(2);
  },
  frame3Evt: function frame3Evt() {
    this.dispShadow(3);
  },
  frame4Evt: function frame4Evt() {
    this.dispShadow(4);
  },
  frame5Evt: function frame5Evt() {
    this.dispShadow(5);
  },
  frame6Evt: function frame6Evt() {
    this.dispShadow(6);
  },
  frame7Evt: function frame7Evt() {
    this.dispShadow(7);
  },
  //----usual attack-------
  aFrame1Evt: function aFrame1Evt() {
    this.attacking = true;
    this.dispShadow(2);
    this.layoutOp.playSnd("hr");
  },
  aFrame2Evt: function aFrame2Evt() {},
  aFrame3Evt: function aFrame3Evt() {
    this.dispShadow(4);
  },
  aFrame4Evt: function aFrame4Evt() {},
  aFrame5Evt: function aFrame5Evt() {},
  aFrame6Evt: function aFrame6Evt() {
    this.dispShadow(7);
    this.attacking = false;
  },
  //----spin attack effect included------
  aFrame11Evt: function aFrame11Evt() {
    this.attacking = true;
    this.dispShadow(2);
    this.playEffect();
  },
  aFrame12Evt: function aFrame12Evt() {},
  aFrame13Evt: function aFrame13Evt() {
    this.dispShadow(4);
  },
  aFrame14Evt: function aFrame14Evt() {},
  aFrame15Evt: function aFrame15Evt() {},
  aFrame16Evt: function aFrame16Evt() {
    this.dispShadow(7);
    this.attacking = false;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/LightmanSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8ba670SxMdMZZPZ9uRjICLu', 'LightmanSprite');
// scripts/LightmanSprite.js

"use strict";

var mySprite = require("MySprite");

cc.Class({
  "extends": mySprite,
  properties: {
    role: "lm"
  },
  start: function start() {
    this.layoutOp = this.node.parent.getComponent('Game');
  },
  getAttackDistance: function getAttackDistance(agent) {
    this.attactDistance = (agent.size + agent.esize) * 0.5 * 1.2;
    return this.attactDistance;
  },
  playAni: function playAni(agent, agentFuture, isMainPlayer) {
    this.tkx = agent.enemypos.x * 30;
    this.tky = agent.enemypos.y * 30;
    this.playAngleAnimationNear(agent, agentFuture, isMainPlayer);
  },
  remove: function remove() {
    this._animation.play("dieoff1");

    this.shadow.destroy();
    this.blood.destroy();
  },
  playEffect: function playEffect() {
    // attack action will take some time while target enemy may dead, and will locate to another emeny.
    // and the effect will show on that enemy. to avoid that, try to judge if the effect is very far away from current position.
    var p1 = cc.v2(this.node.x, this.node.y);
    var p2 = cc.v2(this.tkx, this.tky);
    var distance = p1.sub(p2).mag();

    if (distance < this.attactDistance * 30 * 2) {
      this.layoutOp.playEffect("lm", this.tkx, this.tky);
    }
  },
  dieStart: function dieStart() {},
  dieEnd: function dieEnd() {
    this._animation.play("footprint");
  },
  //ske clip ske_bomb, foot print start evt
  footStart: function footStart() {
    this.node.zIndex = -1;
    this.node.scaleX = 1;
    this.node.scaleY = 1;
  },
  footEnd: function footEnd() {
    this.node.destroy();
  },
  //ske clip ske_bomb, called by first frame of ske_bomb
  beforeKill: function beforeKill() {//this.shadow.destroy();
  },
  //ske clip ske_bomb, called by last frame of ske_bomb
  afterKill: function afterKill() {
    this.node.destroy();
  },
  frame1Evt: function frame1Evt() {
    this.dispShadow(1);
  },
  frame2Evt: function frame2Evt() {
    this.dispShadow(2);
  },
  frame3Evt: function frame3Evt() {
    this.dispShadow(3);
  },
  frame4Evt: function frame4Evt() {
    this.dispShadow(4);
  },
  frame5Evt: function frame5Evt() {
    this.dispShadow(5);
  },
  frame6Evt: function frame6Evt() {
    this.dispShadow(6);
  },
  frame7Evt: function frame7Evt() {
    this.dispShadow(7);
  },
  aFrame1Evt: function aFrame1Evt() {
    this.attacking = true;
    this.dispShadow(2);
  },
  aFrame2Evt: function aFrame2Evt() {},
  aFrame3Evt: function aFrame3Evt() {
    this.dispShadow(4);
  },
  aFrame4Evt: function aFrame4Evt() {},
  aFrame5Evt: function aFrame5Evt() {},
  aFrame6Evt: function aFrame6Evt() {
    this.dispShadow(7);
    this.playEffect();
    this.attacking = false;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/LogSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0189eXSyXxOPI5EXmXLbFek', 'LogSprite');
// scripts/LogSprite.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    role: "log"
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this._animation = this.getComponent(cc.Animation);
    this._animation.WrapMode = cc.WrapMode.Default;
  },
  setId: function setId(aid) {
    this.aid = aid;
  },
  setShadow: function setShadow(shadow) {
    this.shadow = shadow;
    this.shadow.active = true;
  },
  frame1Evt: function frame1Evt() {
    this.dispShadow();
  },
  frame2Evt: function frame2Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 20);
    this.shadow.setPosition(moveTo);
  },
  frame3Evt: function frame3Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 20);
    this.shadow.setPosition(moveTo);
  },
  frame4Evt: function frame4Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 5);
    this.shadow.setPosition(moveTo);
  },
  frame5Evt: function frame5Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 5);
    this.shadow.setPosition(moveTo);
  },
  frame6Evt: function frame6Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 5);
    this.shadow.setPosition(moveTo);
  },
  frame7Evt: function frame7Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 10);
    this.shadow.setPosition(moveTo);
  },
  frame8Evt: function frame8Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 10);
    this.shadow.setPosition(moveTo);
  },
  frame9Evt: function frame9Evt() {
    this.dispShadow();
    var np = this.shadow.getPosition();
    var moveTo = cc.v2(np.x, np.y - 10);
    this.shadow.setPosition(moveTo);
    this.play();
  },
  frame11Evt: function frame11Evt() {
    this.dispShadow(); //since 2.1.1 setRotation is desperated.

    this.shadow.angle = 2; //this.shadow.setRotation(-2);
  },
  frame12Evt: function frame12Evt() {
    this.dispShadow();
    this.shadow.angle = 3; //this.shadow.setRotation(3);
  },
  frame13Evt: function frame13Evt() {
    this.dispShadow();
    this.shadow.angle = 3; //this.shadow.setRotation(-3);
  },
  frame14Evt: function frame14Evt() {
    this.dispShadow();
    this.shadow.angle = -2; //this.shadow.setRotation(2);
  },
  frame15Evt: function frame15Evt() {
    this.dispShadow();
    this.shadow.angle = 3; //this.shadow.setRotation(-3);
  },
  frame16Evt: function frame16Evt() {
    this.dispShadow();
    this.shadow.angle = -2; //this.shadow.setRotation(2);
  },
  move: function move(mypos) {
    var px, py, moveTo;
    px = mypos.x * 30;
    py = mypos.y * 30;
    moveTo = cc.v2(px, py); //1000:agent, 999:this bullet 998:forts;
    //make bullet display under agent which is at same position.
    //this.node.zIndex = 999+parseInt(32-mypos.y);

    this.node.zIndex = 2001;
    this.node.setPosition(moveTo);
    this.updateShadow(mypos);
  },
  updateShadow: function updateShadow(mypos) {
    var px, py, moveTo;
    px = mypos.x * 30 + 20;
    py = mypos.y * 30;
    moveTo = cc.v2(px, py);

    if (this.shadow) {
      this.shadow.setPosition(moveTo);
    }

    return;
  },
  remove: function remove() {
    this.shadow.destroy();
    this.node.destroy();
  },
  play: function play() {
    this._animation.play("rollingLog");
  },
  shadowForAgent: function shadowForAgent() {
    var shadowObj = cc.instantiate(this.playerPrefab[2]); // 将新增的节点添加到 Canvas 节点下面

    shadowObj.active = false;
    this.node.addChild(shadowObj);
    return shadowObj;
  },
  dispShadow: function dispShadow() {
    //shadow object may not ready in init() when playing
    if (!this.shadow) return;
    var shadowNode = this.shadow;
    var frameImg = "log_shadow/logShadow";
    this.shadow.active = true;
    cc.loader.loadRes(frameImg, cc.SpriteFrame, function (err, spriteFrame) {
      if (shadowNode) {
        try {
          if (shadowNode._name != "") {
            shadowNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
        } catch (e) {
          console.log(shadowNode);
          console.log(e);
        }
      }
    });
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/BeeSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b3c5ccJhe1KRrAvyoLJxi+i', 'BeeSprite');
// scripts/BeeSprite.js

"use strict";

var mySprite = require("MySprite");

cc.Class({
  "extends": mySprite,
  properties: {
    role: "bee"
  },
  start: function start() {},
  shootArrow: function shootArrow() {},
  getAttackDistance: function getAttackDistance(agent) {
    return (agent.size + agent.esize) * 0.5 * 1.2;
  },
  playAni: function playAni(agent, agentFuture, isMainPlayer) {
    this.node.zIndex = 9999;
    this.playAngleAnimationNear(agent, agentFuture, isMainPlayer);
  },
  remove: function remove() {
    this._animation.play("dieoff2");

    this.shadow.destroy();
    this.blood.destroy();
  },
  dieStart: function dieStart() {
    this.node.scaleX = 0.8;
    this.node.scaleY = 0.8;
  },
  dieEnd: function dieEnd() {
    this._animation.play("footprint");
  },
  //ske clip ske_bomb, foot print start evt
  footStart: function footStart() {
    this.node.zIndex = -1; //this.node.scaleX = 0.5;
    //this.node.scaleY = 0.5;
  },
  footEnd: function footEnd() {
    this.node.destroy();
  },
  //ske clip ske_bomb, called by first frame of ske_bomb
  beforeKill: function beforeKill() {//this.shadow.destroy();
  },
  //ske clip ske_bomb, called by last frame of ske_bomb
  afterKill: function afterKill() {
    this.node.destroy();
  },
  frame1Evt: function frame1Evt() {//this.dispShadow(1);
  },
  frame2Evt: function frame2Evt() {//this.dispShadow(2);
  },
  frame3Evt: function frame3Evt() {//this.dispShadow(3);
  },
  frame4Evt: function frame4Evt() {//this.dispShadow(4);
  },
  frame5Evt: function frame5Evt() {//this.dispShadow(5);
  },
  frame6Evt: function frame6Evt() {//this.dispShadow(6);
  },
  frame7Evt: function frame7Evt() {//this.dispShadow(7);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0JlZVNwcml0ZS5qcyJdLCJuYW1lcyI6WyJteVNwcml0ZSIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInJvbGUiLCJzdGFydCIsInNob290QXJyb3ciLCJnZXRBdHRhY2tEaXN0YW5jZSIsImFnZW50Iiwic2l6ZSIsImVzaXplIiwicGxheUFuaSIsImFnZW50RnV0dXJlIiwiaXNNYWluUGxheWVyIiwibm9kZSIsInpJbmRleCIsInBsYXlBbmdsZUFuaW1hdGlvbk5lYXIiLCJyZW1vdmUiLCJfYW5pbWF0aW9uIiwicGxheSIsInNoYWRvdyIsImRlc3Ryb3kiLCJibG9vZCIsImRpZVN0YXJ0Iiwic2NhbGVYIiwic2NhbGVZIiwiZGllRW5kIiwiZm9vdFN0YXJ0IiwiZm9vdEVuZCIsImJlZm9yZUtpbGwiLCJhZnRlcktpbGwiLCJmcmFtZTFFdnQiLCJmcmFtZTJFdnQiLCJmcmFtZTNFdnQiLCJmcmFtZTRFdnQiLCJmcmFtZTVFdnQiLCJmcmFtZTZFdnQiLCJmcmFtZTdFdnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFFQUMsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTSCxRQURKO0FBR0xJLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUM7QUFERyxHQUhQO0FBT0xDLEVBQUFBLEtBUEssbUJBT0ksQ0FDUixDQVJJO0FBVUxDLEVBQUFBLFVBQVUsRUFBRSxzQkFBVyxDQUN0QixDQVhJO0FBYUxDLEVBQUFBLGlCQUFpQixFQUFFLDJCQUFTQyxLQUFULEVBQWdCO0FBQy9CLFdBQU8sQ0FBQ0EsS0FBSyxDQUFDQyxJQUFOLEdBQWFELEtBQUssQ0FBQ0UsS0FBcEIsSUFBMkIsR0FBM0IsR0FBK0IsR0FBdEM7QUFDSCxHQWZJO0FBaUJMQyxFQUFBQSxPQUFPLEVBQUUsaUJBQVNILEtBQVQsRUFBZ0JJLFdBQWhCLEVBQTZCQyxZQUE3QixFQUEyQztBQUNoRCxTQUFLQyxJQUFMLENBQVVDLE1BQVYsR0FBbUIsSUFBbkI7QUFDQSxTQUFLQyxzQkFBTCxDQUE0QlIsS0FBNUIsRUFBbUNJLFdBQW5DLEVBQWdEQyxZQUFoRDtBQUNILEdBcEJJO0FBc0JMSSxFQUFBQSxNQUFNLEVBQUUsa0JBQVc7QUFDZixTQUFLQyxVQUFMLENBQWdCQyxJQUFoQixDQUFxQixTQUFyQjs7QUFDQSxTQUFLQyxNQUFMLENBQVlDLE9BQVo7QUFDQSxTQUFLQyxLQUFMLENBQVdELE9BQVg7QUFDSCxHQTFCSTtBQTRCTEUsRUFBQUEsUUFBUSxFQUFFLG9CQUFXO0FBQ2pCLFNBQUtULElBQUwsQ0FBVVUsTUFBVixHQUFtQixHQUFuQjtBQUNBLFNBQUtWLElBQUwsQ0FBVVcsTUFBVixHQUFtQixHQUFuQjtBQUNILEdBL0JJO0FBaUNMQyxFQUFBQSxNQUFNLEVBQUUsa0JBQVc7QUFDZixTQUFLUixVQUFMLENBQWdCQyxJQUFoQixDQUFxQixXQUFyQjtBQUNILEdBbkNJO0FBcUNMO0FBQ0FRLEVBQUFBLFNBQVMsRUFBRSxxQkFBVztBQUNsQixTQUFLYixJQUFMLENBQVVDLE1BQVYsR0FBbUIsQ0FBQyxDQUFwQixDQURrQixDQUVsQjtBQUNBO0FBQ0gsR0ExQ0k7QUE0Q0xhLEVBQUFBLE9BQU8sRUFBRSxtQkFBVztBQUNoQixTQUFLZCxJQUFMLENBQVVPLE9BQVY7QUFDSCxHQTlDSTtBQWdETDtBQUNBUSxFQUFBQSxVQUFVLEVBQUUsc0JBQVcsQ0FDbkI7QUFDSCxHQW5ESTtBQXFETDtBQUNBQyxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS2hCLElBQUwsQ0FBVU8sT0FBVjtBQUNILEdBeERJO0FBMERMVSxFQUFBQSxTQUFTLEVBQUUscUJBQVcsQ0FDbEI7QUFDSCxHQTVESTtBQThETEMsRUFBQUEsU0FBUyxFQUFFLHFCQUFXLENBQ2xCO0FBQ0gsR0FoRUk7QUFrRUxDLEVBQUFBLFNBQVMsRUFBRSxxQkFBVyxDQUNsQjtBQUNILEdBcEVJO0FBc0VMQyxFQUFBQSxTQUFTLEVBQUUscUJBQVcsQ0FDbEI7QUFDSCxHQXhFSTtBQTBFTEMsRUFBQUEsU0FBUyxFQUFFLHFCQUFXLENBQ2xCO0FBQ0gsR0E1RUk7QUE4RUxDLEVBQUFBLFNBQVMsRUFBRSxxQkFBVyxDQUNsQjtBQUNILEdBaEZJO0FBa0ZMQyxFQUFBQSxTQUFTLEVBQUUscUJBQVcsQ0FDbEI7QUFDSCxHQXBGSSxDQXNGTDs7QUF0RkssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG15U3ByaXRlID0gcmVxdWlyZShcIk15U3ByaXRlXCIpXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBteVNwcml0ZSxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgcm9sZTpcImJlZVwiLFxuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgfSxcblxuICAgIHNob290QXJyb3c6IGZ1bmN0aW9uKCkge1xuICAgIH0sICBcblxuICAgIGdldEF0dGFja0Rpc3RhbmNlOiBmdW5jdGlvbihhZ2VudCkge1xuICAgICAgICByZXR1cm4gKGFnZW50LnNpemUgKyBhZ2VudC5lc2l6ZSkqMC41KjEuMjtcbiAgICB9LFxuXG4gICAgcGxheUFuaTogZnVuY3Rpb24oYWdlbnQsIGFnZW50RnV0dXJlLCBpc01haW5QbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5ub2RlLnpJbmRleCA9IDk5OTk7XG4gICAgICAgIHRoaXMucGxheUFuZ2xlQW5pbWF0aW9uTmVhcihhZ2VudCwgYWdlbnRGdXR1cmUsIGlzTWFpblBsYXllcik7XG4gICAgfSxcblxuICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbi5wbGF5KFwiZGllb2ZmMlwiKTtcbiAgICAgICAgdGhpcy5zaGFkb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmJsb29kLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgZGllU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5vZGUuc2NhbGVYID0gMC44O1xuICAgICAgICB0aGlzLm5vZGUuc2NhbGVZID0gMC44O1xuICAgIH0sXG5cbiAgICBkaWVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb24ucGxheShcImZvb3RwcmludFwiKTtcbiAgICB9LFxuXG4gICAgLy9za2UgY2xpcCBza2VfYm9tYiwgZm9vdCBwcmludCBzdGFydCBldnRcbiAgICBmb290U3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gLTE7XG4gICAgICAgIC8vdGhpcy5ub2RlLnNjYWxlWCA9IDAuNTtcbiAgICAgICAgLy90aGlzLm5vZGUuc2NhbGVZID0gMC41O1xuICAgIH0sXG5cbiAgICBmb290RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgLy9za2UgY2xpcCBza2VfYm9tYiwgY2FsbGVkIGJ5IGZpcnN0IGZyYW1lIG9mIHNrZV9ib21iXG4gICAgYmVmb3JlS2lsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vdGhpcy5zaGFkb3cuZGVzdHJveSgpO1xuICAgIH0sXG5cbiAgICAvL3NrZSBjbGlwIHNrZV9ib21iLCBjYWxsZWQgYnkgbGFzdCBmcmFtZSBvZiBza2VfYm9tYlxuICAgIGFmdGVyS2lsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XG4gICAgfSxcblxuICAgIGZyYW1lMUV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vdGhpcy5kaXNwU2hhZG93KDEpO1xuICAgIH0sXG5cbiAgICBmcmFtZTJFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL3RoaXMuZGlzcFNoYWRvdygyKTtcbiAgICB9LFxuXG4gICAgZnJhbWUzRXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy90aGlzLmRpc3BTaGFkb3coMyk7XG4gICAgfSxcblxuICAgIGZyYW1lNEV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vdGhpcy5kaXNwU2hhZG93KDQpO1xuICAgIH0sXG5cbiAgICBmcmFtZTVFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL3RoaXMuZGlzcFNoYWRvdyg1KTtcbiAgICB9LFxuXG4gICAgZnJhbWU2RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy90aGlzLmRpc3BTaGFkb3coNik7XG4gICAgfSxcblxuICAgIGZyYW1lN0V2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vdGhpcy5kaXNwU2hhZG93KDcpO1xuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/KingSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4e1e7ijAIxKo4R8otf0WmYm', 'KingSprite');
// scripts/KingSprite.js

"use strict";

var common = require("Common");

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.node.zIndex = 2999;
  } //start () {},

  /*
      shootArrow: function(x, y, ex, ey, enemies, arrow, attackDura, isDead) {
          var startPos = cc.v2(x*30+15, y*30+15);
          var targetYOffset = common.attackTargetYOffset;
  
          //var targetPos = cc.v2(ex, ey);
          var targetPos = cc.v2((ex)*30, (ey+0.5)*30+targetYOffset);
  
          var blink = cc.blink(0.05,1);
  
          var agentNode;
          var enemy;
  
          if(targetPos.x == 0 && targetPos.y == 0) return;
  
          var vt = targetPos.sub(startPos);
          var ag = 180/Math.PI * Math.atan(vt.x/vt.y);
  
          if(vt.y<0) {
              arrow.scaleY = -1;
          }
  
          arrow.active = true;
          arrow.setRotation(ag+180);
          arrow.setPosition(startPos);
  
          var callback = cc.callFunc(function () {
              arrow.active = false;
  
  //            while(enemies.length>0) {
  //                enemy = enemies.pop();
  //                //console.log(enemy);
  //                // no fucking idea why an empty recorder appears with "" in every field.
  //                if(enemy && enemy._name) {
  //                    agentNode = enemy.getComponent('MySprite');
  //                    //agentNode.remove();                    
  //                }
  //            }
          });
  
          arrow.runAction(cc.sequence(cc.moveTo(0.2, targetPos), callback));            
      },  
  */
  // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0tpbmdTcHJpdGUuanMiXSwibmFtZXMiOlsiY29tbW9uIiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwibm9kZSIsInpJbmRleCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUVBQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUUsQ0FDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFmUSxHQUhQO0FBcUJMO0FBRUFDLEVBQUFBLE1BdkJLLG9CQXVCSztBQUNOLFNBQUtDLElBQUwsQ0FBVUMsTUFBVixHQUFtQixJQUFuQjtBQUNILEdBekJJLENBMkJMOztBQUVKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNJOztBQXhFSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbW9uID0gcmVxdWlyZShcIkNvbW1vblwiKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gZm9vOiB7XG4gICAgICAgIC8vICAgICAvLyBBVFRSSUJVVEVTOlxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIGJhcjoge1xuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICBvbkxvYWQgKCkge1xuICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gMjk5OTtcbiAgICB9LFxuXG4gICAgLy9zdGFydCAoKSB7fSxcblxuLypcbiAgICBzaG9vdEFycm93OiBmdW5jdGlvbih4LCB5LCBleCwgZXksIGVuZW1pZXMsIGFycm93LCBhdHRhY2tEdXJhLCBpc0RlYWQpIHtcbiAgICAgICAgdmFyIHN0YXJ0UG9zID0gY2MudjIoeCozMCsxNSwgeSozMCsxNSk7XG4gICAgICAgIHZhciB0YXJnZXRZT2Zmc2V0ID0gY29tbW9uLmF0dGFja1RhcmdldFlPZmZzZXQ7XG5cbiAgICAgICAgLy92YXIgdGFyZ2V0UG9zID0gY2MudjIoZXgsIGV5KTtcbiAgICAgICAgdmFyIHRhcmdldFBvcyA9IGNjLnYyKChleCkqMzAsIChleSswLjUpKjMwK3RhcmdldFlPZmZzZXQpO1xuXG4gICAgICAgIHZhciBibGluayA9IGNjLmJsaW5rKDAuMDUsMSk7XG5cbiAgICAgICAgdmFyIGFnZW50Tm9kZTtcbiAgICAgICAgdmFyIGVuZW15O1xuXG4gICAgICAgIGlmKHRhcmdldFBvcy54ID09IDAgJiYgdGFyZ2V0UG9zLnkgPT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciB2dCA9IHRhcmdldFBvcy5zdWIoc3RhcnRQb3MpO1xuICAgICAgICB2YXIgYWcgPSAxODAvTWF0aC5QSSAqIE1hdGguYXRhbih2dC54L3Z0LnkpO1xuXG4gICAgICAgIGlmKHZ0Lnk8MCkge1xuICAgICAgICAgICAgYXJyb3cuc2NhbGVZID0gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBhcnJvdy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBhcnJvdy5zZXRSb3RhdGlvbihhZysxODApO1xuICAgICAgICBhcnJvdy5zZXRQb3NpdGlvbihzdGFydFBvcyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrID0gY2MuY2FsbEZ1bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXJyb3cuYWN0aXZlID0gZmFsc2U7XG5cbi8vICAgICAgICAgICAgd2hpbGUoZW5lbWllcy5sZW5ndGg+MCkge1xuLy8gICAgICAgICAgICAgICAgZW5lbXkgPSBlbmVtaWVzLnBvcCgpO1xuLy8gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlbmVteSk7XG4vLyAgICAgICAgICAgICAgICAvLyBubyBmdWNraW5nIGlkZWEgd2h5IGFuIGVtcHR5IHJlY29yZGVyIGFwcGVhcnMgd2l0aCBcIlwiIGluIGV2ZXJ5IGZpZWxkLlxuLy8gICAgICAgICAgICAgICAgaWYoZW5lbXkgJiYgZW5lbXkuX25hbWUpIHtcbi8vICAgICAgICAgICAgICAgICAgICBhZ2VudE5vZGUgPSBlbmVteS5nZXRDb21wb25lbnQoJ015U3ByaXRlJyk7XG4vLyAgICAgICAgICAgICAgICAgICAgLy9hZ2VudE5vZGUucmVtb3ZlKCk7ICAgICAgICAgICAgICAgICAgICBcbi8vICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhcnJvdy5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoY2MubW92ZVRvKDAuMiwgdGFyZ2V0UG9zKSwgY2FsbGJhY2spKTsgICAgICAgICAgICBcbiAgICB9LCAgXG4qLyAgICBcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/MenuScript.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e35c8uvDYNJtZPrAAvt2uLh', 'MenuScript');
// scripts/MenuScript.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    loading: cc.ProgressBar,
    loadLabel: cc.Label //audioMng: cc.Node,

  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {//this.audioMng = this.audioMng.getComponent('AudioMng');
    //this.audioMng.playMusic();
  },
  start: function start() {},
  onProgress: function onProgress(completedCount, totalCount, item) {
    //console.log( Math.floor(completedCount/totalCount * 100) + "%");
    this.loading.progress = completedCount / totalCount;
    this.loadLabel.string = Math.floor(completedCount / totalCount * 100) + "%";
  },
  goRelay: function goRelay(event, customEventData) {
    this.isShared = true;
    this.shareTag = customEventData;
    this.closeTime = new Date().getTime();

    if (CC_WECHATGAME) {
      //if wechat platform
      wx.shareAppMessage({
        title: "中古战纪",
        imageUrl: "https://www.asobee.mobi/fftower/res/acLogo2.jpg"
      });
    }
  },
  play: function play(event, customEventData) {
    var _this = this;

    var buffType = customEventData;

    if (CC_WECHATGAME && (buffType == "heal" || buffType == "thunder")) {
      // 创建激励视频广告实例，提前初始化
      var videoAd = wx.createRewardedVideoAd({
        adUnitId: 'adunit-ebd5d981ced848c7'
      }); // 用户触发广告后，显示激励视频广告

      videoAd.show()["catch"](function () {
        // 失败重试
        videoAd.load().then(function () {
          return videoAd.show();
        })["catch"](function (err) {
          console.log('激励视频 广告显示失败');
        });
      });
      videoAd.onError(function () {
        console.log('激励视频 广告加载失败');

        _this.goGame(buffType);
      });
      videoAd.onClose(function (res) {
        // 用户点击了【关闭广告】按钮
        // 小于 2.1.0 的基础库版本，res 是一个 undefined
        if (res && res.isEnded || res === undefined) {
          //cc.director.loadScene('game', onSceneLaunched);
          _this.goGame(buffType);
        }
      });
    } else {
      //cc.director.loadScene('game', onSceneLaunched);
      this.goGame(buffType);
    }
  },
  goGame: function goGame(buffType) {
    var selLayout = this.getSelLayoutNode();
    var selLayoutNode = selLayout.getComponent("SelLayout");
    var myAgentsParam = selLayoutNode.getNowAgents();
    var curTime = new Date().getTime();

    var onSceneLaunched = function onSceneLaunched() {
      console.log(myAgentsParam);
      var gameObj = cc.director.getScene().getChildByName('Canvas').getChildByName('layout');
      var gameNode = gameObj.getComponent('Game');
      gameNode.setBuffDisp(buffType);
      gameNode.setParam(myAgentsParam, curTime);
    };

    cc.director.loadScene('game', onSceneLaunched);
  },
  getSelLayoutNode: function getSelLayoutNode() {
    var selLayout = this.node.getChildByName("SelScrollView").getChildByName("view").getChildByName("content").getChildByName("SelLayout");
    return selLayout;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Order2Sprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '756d3bGzU9JqLNy2riXSzoU', 'Order2Sprite');
// scripts/Order2Sprite.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    console.log("sssssssssssss");
    var zorder = 1000 + parseInt(4 * (32 - 6));
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL09yZGVyMlNwcml0ZS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uTG9hZCIsImNvbnNvbGUiLCJsb2ciLCJ6b3JkZXIiLCJwYXJzZUludCIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUUsQ0FDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFmUSxHQUhQO0FBcUJMO0FBRUFDLEVBQUFBLE1BdkJLLG9CQXVCSztBQUNOQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxlQUFaO0FBQ0EsUUFBSUMsTUFBTSxHQUFHLE9BQUtDLFFBQVEsQ0FBQyxLQUFHLEtBQUcsQ0FBTixDQUFELENBQTFCO0FBRUgsR0EzQkk7QUE2QkxDLEVBQUFBLEtBN0JLLG1CQTZCSSxDQUVSLENBL0JJLENBaUNMOztBQWpDSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMZWFybiBjYy5DbGFzczpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyBMZWFybiBBdHRyaWJ1dGU6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cDovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cDovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic3Nzc3Nzc3Nzc3Nzc1wiKTtcbiAgICAgICAgdmFyIHpvcmRlciA9IDEwMDArcGFyc2VJbnQoNCooMzItNikpO1xuXG4gICAgfSxcblxuICAgIHN0YXJ0ICgpIHtcblxuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Order1Sprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c42359qXZlHhp4BGz7DTZfc', 'Order1Sprite');
// scripts/Order1Sprite.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  onLoad: function onLoad() {
    //var mynode = cc.find("Canvas/layout/ske1/shadow");
    //mynode.zIndex = 1;
    this.node.zIndex = 1;
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL09yZGVyMVNwcml0ZS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uTG9hZCIsIm5vZGUiLCJ6SW5kZXgiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZlEsR0FIUDtBQXFCTDtBQUVBO0FBRUFDLEVBQUFBLE1BekJLLG9CQXlCSztBQUNOO0FBQ0E7QUFDQSxTQUFLQyxJQUFMLENBQVVDLE1BQVYsR0FBbUIsQ0FBbkI7QUFDSCxHQTdCSTtBQStCTEMsRUFBQUEsS0EvQkssbUJBK0JJLENBRVIsQ0FqQ0ksQ0FtQ0w7O0FBbkNLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgLy8gb25Mb2FkICgpIHt9LFxuXG4gICAgb25Mb2FkICgpIHtcbiAgICAgICAgLy92YXIgbXlub2RlID0gY2MuZmluZChcIkNhbnZhcy9sYXlvdXQvc2tlMS9zaGFkb3dcIik7XG4gICAgICAgIC8vbXlub2RlLnpJbmRleCA9IDE7XG4gICAgICAgIHRoaXMubm9kZS56SW5kZXggPSAxO1xuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG5cbiAgICB9LFxuXG4gICAgLy8gdXBkYXRlIChkdCkge30sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Result.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ccd3eaVj6tLpIqIJfTIex3m', 'Result');
// scripts/Result.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    win: 0,
    flagNum: 2,
    score: 0,
    boxType: 1
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.node.zIndex = 9999;
  },
  show: function show() {
    this.node.active = true;
    this.setTitle(); //this.setFlag();

    this.setScore(); //this.setBox();
  },
  setResultValue: function setResultValue(mainPlayer, data) {
    var gameDataNode = this.getPersistantNode();
    var agentsDef = gameDataNode.getData();
    var basescore = agentsDef.basescore;

    if (mainPlayer == 1) {
      if (data.win == 1) {
        console.log("my win");
        this.win = 1;
        this.flagNum = data.upk;
      } else if (data.win == 0) {
        console.log("my lose");
        this.win = 0;
        this.flagNum = data.upk;
      } else if (data.win == 2) {
        console.log("even");
        this.win = 2;
        this.flagNum = data.upk;
      }
    } else if (mainPlayer == 2) {
      if (data.win == 1) {
        console.log("my lose");
        this.win = 0;
        this.flagNum = data.dnk;
      } else if (data.win == 0) {
        console.log("my win");
        this.win = 1;
        this.flagNum = data.dnk;
      } else if (data.win == 2) {
        console.log("even");
        this.win = 2;
        this.flagNum = data.dnk;
      }
    }

    if (this.win == 1 || this.win == 2) {
      this.score = this.flagNum * basescore;
      gameDataNode.winScore(this.score);
    } else {
      gameDataNode.setUpgrade(false);
    }
  },
  getPersistantNode: function getPersistantNode(param) {
    var node = cc.find('GameData').getComponent('GameData');
    return node;
  },
  setTitle: function setTitle() {
    var titleNode = this.node.getChildByName("winnerTxt").getComponent("cc.Label");

    if (this.win == 1) {
      titleNode.string = "胜利！";
    } else if (this.win == 0) {
      titleNode.string = "失败！";
    } else if (this.win == 2) {
      titleNode.string = "平局！";
    }
  },
  setFlag: function setFlag() {
    var header = "flag";
    var flagName, flagNode;

    for (var i = 1; i <= 3; i++) {
      flagName = header + i;
      flagNode = this.node.getChildByName("killed").getChildByName(flagName);
      flagNode.active = false;

      if (i <= this.flagNum) {
        flagNode.active = true;
      }
    }
  },
  setScore: function setScore() {
    var scoreNode = this.node.getChildByName("goldStar").getChildByName("goldTxt").getComponent("cc.Label");
    scoreNode.string = "+" + this.score;
  },
  setBox: function setBox() {
    var boxNode = this.node.getChildByName("boxFrame").getChildByName("boxInfo").getComponent("cc.Label");

    if (this.boxType == 1) {
      boxNode.string = "普通宝箱";
    } else if (this.boxType == 2) {
      boxNode.string = "高级宝箱";
    } else if (this.boxType == 3) {
      boxNode.string = "超级宝箱";
    }
  },
  test: function test(event, customEventData) {
    console.log("clicked...");
    this.node.active = false;
    cc.director.loadScene('menu');
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Order9Sprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '15fca01GsZO7rsB5Rucz1/r', 'Order9Sprite');
// scripts/Order9Sprite.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  onLoad: function onLoad() {
    //var mynode = cc.find("Canvas/layout/ske2/shadow");
    //mynode.zIndex = 1;
    this.node.zIndex = 9;
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL09yZGVyOVNwcml0ZS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uTG9hZCIsIm5vZGUiLCJ6SW5kZXgiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZlEsR0FIUDtBQXFCTDtBQUVBO0FBRUFDLEVBQUFBLE1BekJLLG9CQXlCSztBQUNOO0FBQ0E7QUFFQSxTQUFLQyxJQUFMLENBQVVDLE1BQVYsR0FBbUIsQ0FBbkI7QUFFSCxHQS9CSTtBQWlDTEMsRUFBQUEsS0FqQ0ssbUJBaUNJLENBRVIsQ0FuQ0ksQ0FxQ0w7O0FBckNLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgLy8gb25Mb2FkICgpIHt9LFxuXG4gICAgb25Mb2FkICgpIHtcbiAgICAgICAgLy92YXIgbXlub2RlID0gY2MuZmluZChcIkNhbnZhcy9sYXlvdXQvc2tlMi9zaGFkb3dcIik7XG4gICAgICAgIC8vbXlub2RlLnpJbmRleCA9IDE7XG5cbiAgICAgICAgdGhpcy5ub2RlLnpJbmRleCA9IDk7XG5cbiAgICB9LFxuXG4gICAgc3RhcnQgKCkge1xuXG4gICAgfSxcblxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/GiantSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '06cfaN7txBFkqJqizTWDtk1', 'GiantSprite');
// scripts/GiantSprite.js

"use strict";

var mySprite = require("MySprite");

cc.Class({
  "extends": mySprite,
  properties: {
    role: "gi"
  },
  // onLoad () {},
  start: function start() {
    //this._animation = this.getComponent(cc.Animation);
    //this._animation.WrapMode = cc.WrapMode.Loop;
    this.shadow.scaleX = 1.2;
    this.shadow.scaleY = 1.2;
  },
  getAttackDistance: function getAttackDistance(agent) {
    return (agent.size + agent.esize) * 0.5 * 1.5;
  },
  remove: function remove() {
    //this.getChildByName("blood").active = false;
    this._animation.play("dieoff1");

    this.shadow.destroy();
    this.blood.destroy();
  },
  dieStart: function dieStart() {},
  dieEnd: function dieEnd() {
    this._animation.play("footprint");
  },
  //ske clip ske_bomb, foot print start evt
  footStart: function footStart() {
    this.node.zIndex = -1;
  },
  footEnd: function footEnd() {
    this.node.destroy();
  },
  playAni: function playAni(agent, agentFuture, isMainPlayer) {
    this.playAngleAnimationNear(agent, agentFuture, isMainPlayer);
  },
  frame1Evt: function frame1Evt() {
    this.dispShadow(1);
    this.shadow.zIndex = -1;
  },
  frame2Evt: function frame2Evt() {
    this.dispShadow(2);
  },
  frame3Evt: function frame3Evt() {
    this.dispShadow(3);
  },
  frame4Evt: function frame4Evt() {
    this.dispShadow(4);
  },
  frame5Evt: function frame5Evt() {
    this.dispShadow(5);
  },
  frame6Evt: function frame6Evt() {
    this.dispShadow(6);
  },
  frame7Evt: function frame7Evt() {
    this.dispShadow(7);
  },
  aFrame1Evt: function aFrame1Evt() {
    this.dispShadow(2);
    this.layoutOp.playSnd("gi");
  },
  aFrame2Evt: function aFrame2Evt() {},
  aFrame3Evt: function aFrame3Evt() {
    this.dispShadow(4);
  },
  aFrame4Evt: function aFrame4Evt() {},
  aFrame5Evt: function aFrame5Evt() {},
  aFrame6Evt: function aFrame6Evt() {
    this.dispShadow(7);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0dpYW50U3ByaXRlLmpzIl0sIm5hbWVzIjpbIm15U3ByaXRlIiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJwcm9wZXJ0aWVzIiwicm9sZSIsInN0YXJ0Iiwic2hhZG93Iiwic2NhbGVYIiwic2NhbGVZIiwiZ2V0QXR0YWNrRGlzdGFuY2UiLCJhZ2VudCIsInNpemUiLCJlc2l6ZSIsInJlbW92ZSIsIl9hbmltYXRpb24iLCJwbGF5IiwiZGVzdHJveSIsImJsb29kIiwiZGllU3RhcnQiLCJkaWVFbmQiLCJmb290U3RhcnQiLCJub2RlIiwiekluZGV4IiwiZm9vdEVuZCIsInBsYXlBbmkiLCJhZ2VudEZ1dHVyZSIsImlzTWFpblBsYXllciIsInBsYXlBbmdsZUFuaW1hdGlvbk5lYXIiLCJmcmFtZTFFdnQiLCJkaXNwU2hhZG93IiwiZnJhbWUyRXZ0IiwiZnJhbWUzRXZ0IiwiZnJhbWU0RXZ0IiwiZnJhbWU1RXZ0IiwiZnJhbWU2RXZ0IiwiZnJhbWU3RXZ0IiwiYUZyYW1lMUV2dCIsImxheW91dE9wIiwicGxheVNuZCIsImFGcmFtZTJFdnQiLCJhRnJhbWUzRXZ0IiwiYUZyYW1lNEV2dCIsImFGcmFtZTVFdnQiLCJhRnJhbWU2RXZ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBRUFDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0gsUUFESjtBQUdMSSxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsSUFBSSxFQUFDO0FBREcsR0FIUDtBQU9MO0FBRUFDLEVBQUFBLEtBVEssbUJBU0k7QUFDTDtBQUNBO0FBQ0EsU0FBS0MsTUFBTCxDQUFZQyxNQUFaLEdBQXFCLEdBQXJCO0FBQ0EsU0FBS0QsTUFBTCxDQUFZRSxNQUFaLEdBQXFCLEdBQXJCO0FBQ0gsR0FkSTtBQWdCTEMsRUFBQUEsaUJBQWlCLEVBQUUsMkJBQVNDLEtBQVQsRUFBZ0I7QUFDL0IsV0FBTyxDQUFDQSxLQUFLLENBQUNDLElBQU4sR0FBYUQsS0FBSyxDQUFDRSxLQUFwQixJQUEyQixHQUEzQixHQUErQixHQUF0QztBQUNILEdBbEJJO0FBb0JMQyxFQUFBQSxNQUFNLEVBQUUsa0JBQVc7QUFDZjtBQUNBLFNBQUtDLFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLFNBQXJCOztBQUNBLFNBQUtULE1BQUwsQ0FBWVUsT0FBWjtBQUNBLFNBQUtDLEtBQUwsQ0FBV0QsT0FBWDtBQUNILEdBekJJO0FBMkJMRSxFQUFBQSxRQUFRLEVBQUUsb0JBQVcsQ0FDcEIsQ0E1Qkk7QUE4QkxDLEVBQUFBLE1BQU0sRUFBRSxrQkFBVztBQUNmLFNBQUtMLFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLFdBQXJCO0FBQ0gsR0FoQ0k7QUFrQ0w7QUFDQUssRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtDLElBQUwsQ0FBVUMsTUFBVixHQUFtQixDQUFDLENBQXBCO0FBQ0gsR0FyQ0k7QUF1Q0xDLEVBQUFBLE9BQU8sRUFBRSxtQkFBVztBQUNoQixTQUFLRixJQUFMLENBQVVMLE9BQVY7QUFDSCxHQXpDSTtBQTJDTFEsRUFBQUEsT0FBTyxFQUFFLGlCQUFTZCxLQUFULEVBQWdCZSxXQUFoQixFQUE2QkMsWUFBN0IsRUFBMkM7QUFDaEQsU0FBS0Msc0JBQUwsQ0FBNEJqQixLQUE1QixFQUFtQ2UsV0FBbkMsRUFBZ0RDLFlBQWhEO0FBQ0gsR0E3Q0k7QUErQ0xFLEVBQUFBLFNBQVMsRUFBRSxxQkFBVztBQUNsQixTQUFLQyxVQUFMLENBQWdCLENBQWhCO0FBQ0EsU0FBS3ZCLE1BQUwsQ0FBWWdCLE1BQVosR0FBcUIsQ0FBQyxDQUF0QjtBQUNILEdBbERJO0FBb0RMUSxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS0QsVUFBTCxDQUFnQixDQUFoQjtBQUNILEdBdERJO0FBd0RMRSxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS0YsVUFBTCxDQUFnQixDQUFoQjtBQUNILEdBMURJO0FBNERMRyxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS0gsVUFBTCxDQUFnQixDQUFoQjtBQUNILEdBOURJO0FBZ0VMSSxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS0osVUFBTCxDQUFnQixDQUFoQjtBQUNILEdBbEVJO0FBb0VMSyxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS0wsVUFBTCxDQUFnQixDQUFoQjtBQUNILEdBdEVJO0FBd0VMTSxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS04sVUFBTCxDQUFnQixDQUFoQjtBQUNILEdBMUVJO0FBNEVMTyxFQUFBQSxVQUFVLEVBQUUsc0JBQVc7QUFDbkIsU0FBS1AsVUFBTCxDQUFnQixDQUFoQjtBQUNBLFNBQUtRLFFBQUwsQ0FBY0MsT0FBZCxDQUFzQixJQUF0QjtBQUNILEdBL0VJO0FBaUZMQyxFQUFBQSxVQUFVLEVBQUUsc0JBQVcsQ0FDdEIsQ0FsRkk7QUFvRkxDLEVBQUFBLFVBQVUsRUFBRSxzQkFBVztBQUNuQixTQUFLWCxVQUFMLENBQWdCLENBQWhCO0FBQ0gsR0F0Rkk7QUF3RkxZLEVBQUFBLFVBQVUsRUFBRSxzQkFBVyxDQUN0QixDQXpGSTtBQTJGTEMsRUFBQUEsVUFBVSxFQUFFLHNCQUFXLENBQ3RCLENBNUZJO0FBOEZMQyxFQUFBQSxVQUFVLEVBQUUsc0JBQVc7QUFDbkIsU0FBS2QsVUFBTCxDQUFnQixDQUFoQjtBQUNILEdBaEdJLENBaUdMOztBQWpHSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbXlTcHJpdGUgPSByZXF1aXJlKFwiTXlTcHJpdGVcIilcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IG15U3ByaXRlLFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICByb2xlOlwiZ2lcIixcbiAgICB9LFxuXG4gICAgLy8gb25Mb2FkICgpIHt9LFxuXG4gICAgc3RhcnQgKCkge1xuICAgICAgICAvL3RoaXMuX2FuaW1hdGlvbiA9IHRoaXMuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgIC8vdGhpcy5fYW5pbWF0aW9uLldyYXBNb2RlID0gY2MuV3JhcE1vZGUuTG9vcDtcbiAgICAgICAgdGhpcy5zaGFkb3cuc2NhbGVYID0gMS4yO1xuICAgICAgICB0aGlzLnNoYWRvdy5zY2FsZVkgPSAxLjI7XG4gICAgfSxcblxuICAgIGdldEF0dGFja0Rpc3RhbmNlOiBmdW5jdGlvbihhZ2VudCkge1xuICAgICAgICByZXR1cm4gKGFnZW50LnNpemUgKyBhZ2VudC5lc2l6ZSkqMC41KjEuNTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy90aGlzLmdldENoaWxkQnlOYW1lKFwiYmxvb2RcIikuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbi5wbGF5KFwiZGllb2ZmMVwiKTtcbiAgICAgICAgdGhpcy5zaGFkb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmJsb29kLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgZGllU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG5cbiAgICBkaWVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb24ucGxheShcImZvb3RwcmludFwiKTtcbiAgICB9LFxuXG4gICAgLy9za2UgY2xpcCBza2VfYm9tYiwgZm9vdCBwcmludCBzdGFydCBldnRcbiAgICBmb290U3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5vZGUuekluZGV4ID0gLTE7XG4gICAgfSxcblxuICAgIGZvb3RFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpO1xuICAgIH0sXG5cbiAgICBwbGF5QW5pOiBmdW5jdGlvbihhZ2VudCwgYWdlbnRGdXR1cmUsIGlzTWFpblBsYXllcikge1xuICAgICAgICB0aGlzLnBsYXlBbmdsZUFuaW1hdGlvbk5lYXIoYWdlbnQsIGFnZW50RnV0dXJlLCBpc01haW5QbGF5ZXIpO1xuICAgIH0sXG5cbiAgICBmcmFtZTFFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coMSk7XG4gICAgICAgIHRoaXMuc2hhZG93LnpJbmRleCA9IC0xO1xuICAgIH0sXG5cbiAgICBmcmFtZTJFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coMik7XG4gICAgfSxcblxuICAgIGZyYW1lM0V2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdygzKTtcbiAgICB9LFxuXG4gICAgZnJhbWU0RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDQpO1xuICAgIH0sXG5cbiAgICBmcmFtZTVFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coNSk7XG4gICAgfSxcblxuICAgIGZyYW1lNkV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdyg2KTtcbiAgICB9LFxuXG4gICAgZnJhbWU3RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDcpO1xuICAgIH0sXG5cbiAgICBhRnJhbWUxRXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDIpO1xuICAgICAgICB0aGlzLmxheW91dE9wLnBsYXlTbmQoXCJnaVwiKTtcbiAgICB9LFxuXG4gICAgYUZyYW1lMkV2dDogZnVuY3Rpb24oKSB7XG4gICAgfSxcblxuICAgIGFGcmFtZTNFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coNCk7XG4gICAgfSxcblxuICAgIGFGcmFtZTRFdnQ6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG5cbiAgICBhRnJhbWU1RXZ0OiBmdW5jdGlvbigpIHtcbiAgICB9LFxuXG4gICAgYUZyYW1lNkV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdyg3KTtcbiAgICB9XG4gICAgLy8gdXBkYXRlIChkdCkge30sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/GameData.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8204dK680RKmLHLtijslCkm', 'GameData');
// scripts/GameData.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    cc.game.addPersistRootNode(this.node);
    this.name = this.getRandomCharName();
    this.nick = this.name;
    this.isUpgrade = false;
    this.agentsDef = {
      "name": "test01",
      "level": 1,
      "myscore": 2300,
      "nextscore": 3500,
      "basescore": 15,
      //destroy one base will get that score
      "allList": ["log", "bomb", "ske", "ir", "hr", "bee", "gi", "lm", "lr", "wiz"],
      "myList": ["log", "hr", "bee", "ske"],
      "log": {
        "level": 1,
        "cost": 3
      },
      "bomb": {
        "level": 1,
        "cost": 4
      },
      "ske": {
        "level": 1,
        "cost": 1
      },
      "ir": {
        "level": 1,
        "cost": 3
      },
      "hr": {
        "level": 1,
        "cost": 4
      },
      "bee": {
        "level": 1,
        "cost": 1
      },
      "gi": {
        "level": 1,
        "cost": 4
      },
      "lm": {
        "level": 1,
        "cost": 3
      },
      "lr": {
        "level": 1,
        "cost": 2
      },
      "wiz": {
        "level": 1,
        "cost": 5
      }
    };
  },
  start: function start() {},
  getRandomCharName: function getRandomCharName() {
    var aphabets = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    var nick = "";

    for (var i = 0; i < 6; i++) {
      nick += aphabets[Math.floor(Math.random() * aphabets.length)];
    }

    return nick;
  },
  httpPost: function httpPost(user, params, fd, file) {
    //var url = "https://www.asobee.mobi/fftower/ffinfo.php?uid=" + user;
    //var url = "http://localhost/fftower/ffinfo.php?uid=" + user;
    var url = "http://35.77.248.155:10088/web_node/s2/ffinfo.php?uid=" + user;

    if (fd && file) {
      url += "&fd=" + fd + "&file=" + file;
    }

    return new Promise(function (resolve, reject) {
      var xhr = cc.loader.getXMLHttpRequest();

      xhr.onreadystatechange = function () {
        cc.log('xhr.readyState=' + xhr.readyState + '  xhr.status=' + xhr.status);

        if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {
          var respone = xhr.responseText;
          resolve(respone);
        } else if (xhr.readyState === 4 && xhr.status == 401) {
          reject("err");
        } else if (xhr.readyState === 4 && xhr.status == 0) {
          reject("err");
        }
      };

      xhr.open("GET", url, true); // note: In Internet Explorer, the timeout property may be set only after calling the open()
      // method and before calling the send() method.
      //xhr.timeout = 5000;// 5 seconds for timeout

      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      xhr.send(params);
    });
  },
  winScore: function winScore(score) {
    this.agentsDef.myscore += score;
    this.setMyScore(this.agentsDef.myscore);
  },
  setWxUser: function setWxUser(userInfo) {
    var uarr = userInfo.avatarUrl.split("/");
    var len = uarr.length;
    var ts = uarr[len - 2];
    var l1 = ts.substring(0, 6);
    var l2 = ts.substring(ts.length - 6);
    this.name = l1 + l2;
    this.nick = userInfo.nickName;
  },
  //自定义的两个函数。将值保存在this变量里
  setData: function setData(json) {
    this.agentsDef = json;
  },
  getName: function getName() {
    return this.name;
  },
  getNick: function getNick() {
    return this.nick;
  },
  getData: function getData() {
    return this.agentsDef;
  },
  setMyList: function setMyList(mylist) {
    this.agentsDef.myList = mylist;
    this.httpPost(this.name, "", "list", mylist).then(function (data) {
      console.log("------------setMyList------------------");
      console.log(data);
    }, function (err) {
      console.log(err);
    });
  },
  setUpgrade: function setUpgrade(val) {
    this.isUpgrade = false;
  },
  setMyScore: function setMyScore(score) {
    var _self = this;

    this.agentsDef.myscore = score;
    this.httpPost(this.name, "", "score", score).then(function (data) {
      console.log("------------setMyScore------------------");
      console.log(data);

      if (data == "uped") {
        _self.isUpgrade = true;
      }
    }, function (err) {
      console.log(err);
    });
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/SkeSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7d74bHhVUFHDLwoV20mklSC', 'SkeSprite');
// scripts/SkeSprite.js

"use strict";

var mySprite = require("MySprite");

cc.Class({
  "extends": mySprite,
  properties: {
    role: ""
  },
  start: function start() {},
  shootArrow: function shootArrow() {},
  getAttackDistance: function getAttackDistance(agent) {
    return (agent.size + agent.esize) * 0.5 * 1.2;
  },
  playAni: function playAni(agent, agentFuture, isMainPlayer) {
    this.playAngleAnimationNear(agent, agentFuture, isMainPlayer);
  },
  remove: function remove() {
    this._animation.play("dieoff2");

    this.shadow.destroy();
    this.blood.destroy();
  },
  dieStart: function dieStart() {},
  dieEnd: function dieEnd() {
    this._animation.play("footprint");
  },
  //ske clip ske_bomb, foot print start evt
  footStart: function footStart() {
    this.node.zIndex = -1;
    this.node.scaleX = 1;
    this.node.scaleY = 1;
  },
  footEnd: function footEnd() {
    this.node.destroy();
  },
  //ske clip ske_bomb, called by first frame of ske_bomb
  beforeKill: function beforeKill() {//this.shadow.destroy();
  },
  //ske clip ske_bomb, called by last frame of ske_bomb
  afterKill: function afterKill() {
    this.node.destroy();
  },
  aFrame1Evt: function aFrame1Evt() {
    this.layoutOp.playSnd("ske");
  },
  frame1Evt: function frame1Evt() {
    this.dispShadow(1);
  },
  frame2Evt: function frame2Evt() {
    this.dispShadow(2);
  },
  frame3Evt: function frame3Evt() {
    this.dispShadow(3);
  },
  frame4Evt: function frame4Evt() {
    this.dispShadow(4);
  },
  frame5Evt: function frame5Evt() {
    this.dispShadow(5);
  },
  frame6Evt: function frame6Evt() {
    this.dispShadow(6);
  },
  frame7Evt: function frame7Evt() {
    this.dispShadow(7);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL1NrZVNwcml0ZS5qcyJdLCJuYW1lcyI6WyJteVNwcml0ZSIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInJvbGUiLCJzdGFydCIsInNob290QXJyb3ciLCJnZXRBdHRhY2tEaXN0YW5jZSIsImFnZW50Iiwic2l6ZSIsImVzaXplIiwicGxheUFuaSIsImFnZW50RnV0dXJlIiwiaXNNYWluUGxheWVyIiwicGxheUFuZ2xlQW5pbWF0aW9uTmVhciIsInJlbW92ZSIsIl9hbmltYXRpb24iLCJwbGF5Iiwic2hhZG93IiwiZGVzdHJveSIsImJsb29kIiwiZGllU3RhcnQiLCJkaWVFbmQiLCJmb290U3RhcnQiLCJub2RlIiwiekluZGV4Iiwic2NhbGVYIiwic2NhbGVZIiwiZm9vdEVuZCIsImJlZm9yZUtpbGwiLCJhZnRlcktpbGwiLCJhRnJhbWUxRXZ0IiwibGF5b3V0T3AiLCJwbGF5U25kIiwiZnJhbWUxRXZ0IiwiZGlzcFNoYWRvdyIsImZyYW1lMkV2dCIsImZyYW1lM0V2dCIsImZyYW1lNEV2dCIsImZyYW1lNUV2dCIsImZyYW1lNkV2dCIsImZyYW1lN0V2dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUVBQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILFFBREo7QUFHTEksRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLElBQUksRUFBQztBQURHLEdBSFA7QUFPTEMsRUFBQUEsS0FQSyxtQkFPSSxDQUNSLENBUkk7QUFVTEMsRUFBQUEsVUFBVSxFQUFFLHNCQUFXLENBQ3RCLENBWEk7QUFhTEMsRUFBQUEsaUJBQWlCLEVBQUUsMkJBQVNDLEtBQVQsRUFBZ0I7QUFDL0IsV0FBTyxDQUFDQSxLQUFLLENBQUNDLElBQU4sR0FBYUQsS0FBSyxDQUFDRSxLQUFwQixJQUEyQixHQUEzQixHQUErQixHQUF0QztBQUNILEdBZkk7QUFpQkxDLEVBQUFBLE9BQU8sRUFBRSxpQkFBU0gsS0FBVCxFQUFnQkksV0FBaEIsRUFBNkJDLFlBQTdCLEVBQTJDO0FBQ2hELFNBQUtDLHNCQUFMLENBQTRCTixLQUE1QixFQUFtQ0ksV0FBbkMsRUFBZ0RDLFlBQWhEO0FBQ0gsR0FuQkk7QUFxQkxFLEVBQUFBLE1BQU0sRUFBRSxrQkFBVztBQUNmLFNBQUtDLFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLFNBQXJCOztBQUNBLFNBQUtDLE1BQUwsQ0FBWUMsT0FBWjtBQUNBLFNBQUtDLEtBQUwsQ0FBV0QsT0FBWDtBQUNILEdBekJJO0FBMkJMRSxFQUFBQSxRQUFRLEVBQUUsb0JBQVcsQ0FDcEIsQ0E1Qkk7QUE4QkxDLEVBQUFBLE1BQU0sRUFBRSxrQkFBVztBQUNmLFNBQUtOLFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLFdBQXJCO0FBQ0gsR0FoQ0k7QUFrQ0w7QUFDQU0sRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtDLElBQUwsQ0FBVUMsTUFBVixHQUFtQixDQUFDLENBQXBCO0FBQ0EsU0FBS0QsSUFBTCxDQUFVRSxNQUFWLEdBQW1CLENBQW5CO0FBQ0EsU0FBS0YsSUFBTCxDQUFVRyxNQUFWLEdBQW1CLENBQW5CO0FBQ0gsR0F2Q0k7QUF5Q0xDLEVBQUFBLE9BQU8sRUFBRSxtQkFBVztBQUNoQixTQUFLSixJQUFMLENBQVVMLE9BQVY7QUFDSCxHQTNDSTtBQTZDTDtBQUNBVSxFQUFBQSxVQUFVLEVBQUUsc0JBQVcsQ0FDbkI7QUFDSCxHQWhESTtBQWtETDtBQUNBQyxFQUFBQSxTQUFTLEVBQUUscUJBQVc7QUFDbEIsU0FBS04sSUFBTCxDQUFVTCxPQUFWO0FBQ0gsR0FyREk7QUF1RExZLEVBQUFBLFVBQVUsRUFBRSxzQkFBVztBQUNuQixTQUFLQyxRQUFMLENBQWNDLE9BQWQsQ0FBc0IsS0FBdEI7QUFDSCxHQXpESTtBQTJETEMsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtDLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQTdESTtBQStETEMsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtELFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQWpFSTtBQW1FTEUsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtGLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQXJFSTtBQXVFTEcsRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtILFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQXpFSTtBQTJFTEksRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtKLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQTdFSTtBQStFTEssRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtMLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQWpGSTtBQW1GTE0sRUFBQUEsU0FBUyxFQUFFLHFCQUFXO0FBQ2xCLFNBQUtOLFVBQUwsQ0FBZ0IsQ0FBaEI7QUFDSCxHQXJGSSxDQXVGTDs7QUF2RkssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG15U3ByaXRlID0gcmVxdWlyZShcIk15U3ByaXRlXCIpXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBteVNwcml0ZSxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgcm9sZTpcIlwiLFxuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgfSxcblxuICAgIHNob290QXJyb3c6IGZ1bmN0aW9uKCkge1xuICAgIH0sICBcblxuICAgIGdldEF0dGFja0Rpc3RhbmNlOiBmdW5jdGlvbihhZ2VudCkge1xuICAgICAgICByZXR1cm4gKGFnZW50LnNpemUgKyBhZ2VudC5lc2l6ZSkqMC41KjEuMjtcbiAgICB9LFxuXG4gICAgcGxheUFuaTogZnVuY3Rpb24oYWdlbnQsIGFnZW50RnV0dXJlLCBpc01haW5QbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5wbGF5QW5nbGVBbmltYXRpb25OZWFyKGFnZW50LCBhZ2VudEZ1dHVyZSwgaXNNYWluUGxheWVyKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uLnBsYXkoXCJkaWVvZmYyXCIpO1xuICAgICAgICB0aGlzLnNoYWRvdy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuYmxvb2QuZGVzdHJveSgpO1xuICAgIH0sXG5cbiAgICBkaWVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgfSxcblxuICAgIGRpZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbi5wbGF5KFwiZm9vdHByaW50XCIpO1xuICAgIH0sXG5cbiAgICAvL3NrZSBjbGlwIHNrZV9ib21iLCBmb290IHByaW50IHN0YXJ0IGV2dFxuICAgIGZvb3RTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS56SW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5ub2RlLnNjYWxlWCA9IDE7XG4gICAgICAgIHRoaXMubm9kZS5zY2FsZVkgPSAxO1xuICAgIH0sXG5cbiAgICBmb290RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgLy9za2UgY2xpcCBza2VfYm9tYiwgY2FsbGVkIGJ5IGZpcnN0IGZyYW1lIG9mIHNrZV9ib21iXG4gICAgYmVmb3JlS2lsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vdGhpcy5zaGFkb3cuZGVzdHJveSgpO1xuICAgIH0sXG5cbiAgICAvL3NrZSBjbGlwIHNrZV9ib21iLCBjYWxsZWQgYnkgbGFzdCBmcmFtZSBvZiBza2VfYm9tYlxuICAgIGFmdGVyS2lsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XG4gICAgfSxcblxuICAgIGFGcmFtZTFFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmxheW91dE9wLnBsYXlTbmQoXCJza2VcIik7XG4gICAgfSxcblxuICAgIGZyYW1lMUV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdygxKTtcbiAgICB9LFxuXG4gICAgZnJhbWUyRXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDIpO1xuICAgIH0sXG5cbiAgICBmcmFtZTNFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coMyk7XG4gICAgfSxcblxuICAgIGZyYW1lNEV2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdyg0KTtcbiAgICB9LFxuXG4gICAgZnJhbWU1RXZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNwU2hhZG93KDUpO1xuICAgIH0sXG5cbiAgICBmcmFtZTZFdnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BTaGFkb3coNik7XG4gICAgfSxcblxuICAgIGZyYW1lN0V2dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcFNoYWRvdyg3KTtcbiAgICB9LFxuXG4gICAgLy8gdXBkYXRlIChkdCkge30sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/SelCard.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a9c88Il+79JlLW7EwlscaCD', 'SelCard');
// scripts/SelCard.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    seleRole: "ske",
    magicCost: 1,
    roleLevel: 1
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    //save the origin postion, becoz it will restore from shake action
    this.ox = this.node.x;
    this.oy = this.node.y;
  },
  start: function start() {
    this.isMoving = false;
    this.dragTo = null;
    this.seleInnerId = "";
    var layoutNode = this.getLayoutNode();

    var _self = this; //if in game mode page


    if (layoutNode) {
      var innerId;
      var dragItem = null;
      var layoutOp = layoutNode.getComponent('Game');
      var canvasNode = this.node.parent;
      var seleNode = canvasNode.getChildByName("charSele");
      this.node.on(cc.Node.EventType.TOUCH_START, function (params) {
        if (layoutOp.gameStartTime == 0) {
          return;
        }

        _self.node.getChildByName("dragTo").active = true;
        layoutOp.showDragMask(_self.seleRole);
        _self.seleInnerId = layoutOp.setDragItem(params, _self.node.getChildByName("dragTo"));
      });
      this.node.on(cc.Node.EventType.TOUCH_MOVE, function (params) {
        var delta = params.touch.getDelta();
        _self.isMove = true;
        layoutOp.moveDragItem(params.target._name, delta);
      });
      this.node.on(cc.Node.EventType.TOUCH_END, function (params) {
        var pt = _self.node.getPosition();

        var seleInfo = {
          "role": _self.seleRole,
          "level": _self.roleLevel,
          "magicCost": _self.magicCost,
          "params": params,
          "node": _self.node.getChildByName("dragTo")
        };

        if (_self.seleInnerId != "") {
          layoutOp.unsetDragItem(_self.seleInnerId);
          _self.seleInnerId = "";
        }

        _self.isMove = false;
        seleNode.active = true;
        seleNode.setPosition(pt);
        layoutOp.setClickItem(seleInfo);
      });
      this.node.on(cc.Node.EventType.TOUCH_CANCEL, function (params) {
        var seleInfo = {
          "role": _self.seleRole,
          "level": _self.roleLevel,
          "magicCost": _self.magicCost
        };
        layoutOp.clearDragItem(params, seleInfo);
      });
    } // in select mode page
    else {
        this.node.on(cc.Node.EventType.TOUCH_END, function (params) {
          _self.processChoose();
        });
      }

    this.setInitImgByRole();
    this.setRoleCost();
  },
  processChoose: function processChoose() {
    var layoutOp = this.node.parent.parent.getComponent('SelLayout');
    var item = layoutOp.choosenCard;
    var isValidWxRelay; //if not valid wx relay(less than 3 seconds), then do nothing.

    if (CC_WECHATGAME) {
      isValidWxRelay = layoutOp.ifWxValidRelay();

      if (!isValidWxRelay) {
        layoutOp.dispWxRelayWarn(true);
        return;
      }
    }

    if (!item || !item.role) {
      return;
    }

    var currentAgents = [];
    this.setRole(item.role, item.cost, item.level);
    this.setInitImgByRole();
    this.setRoleCost();
    currentAgents = this.getNowAgents();
    layoutOp.setCardsStatus(currentAgents);
  },
  getNowAgents: function getNowAgents() {
    var cNodes = this.node.parent._children;
    var tn;
    var ret = [];

    for (var i = 0; i < cNodes.length; i++) {
      if (cNodes[i]._name == "SelCard") {
        ret.push(cNodes[i].getComponent("SelCard").seleRole);
      }
    }

    return ret;
  },
  setRole: function setRole(role, cost, level) {
    this.seleRole = role;
    this.magicCost = cost;
    this.roleLevel = level;
  },
  getLayoutNode: function getLayoutNode() {
    return this.node.parent.getChildByName("layout");
  },
  stopCardJitter: function stopCardJitter() {
    this.node.stopAllActions();
    this.node.x = this.ox;
    this.node.y = this.oy;
  },
  //shake the card node
  startCardJitter: function startCardJitter() {
    this.node.stopAllActions();

    var _self = this;

    var sceneNode = this.node;
    var cnt = 0;
    var lower = -2;
    var upper = 2;

    var callBack = function callBack() {
      cnt++;
      var randomX = Math.floor(Math.random() * (upper - lower)) + lower;
      var randomY = Math.floor(Math.random() * (upper - lower)) + lower;
      sceneNode.x += randomX;
      sceneNode.y += randomY;

      if (cnt % 3 == 0) {
        //sceneNode.stopAllActions();
        sceneNode.x = _self.ox;
        sceneNode.y = _self.oy;
      }
    };

    var node = this.node; //场景常驻节点

    var del = cc.delayTime(1 / 30);
    var cal = cc.callFunc(callBack);
    var seq = cc.sequence(del, cal);
    node.runAction(cc.repeatForever(seq));
  },
  setRoleCost: function setRoleCost() {
    if (this.magicCost == 0) {
      return;
    }

    var mark = this.node.getChildByName("ringMark");
    var costLabel = mark.getChildByName("cost").getComponent("cc.Label");
    costLabel.string = this.magicCost;
  },
  setSelImg: function setSelImg(frameImg) {
    var dragNode = this.node.getChildByName("dragTo");
    var iconNode = this.node.getChildByName("icon");
    cc.loader.loadRes(frameImg, cc.SpriteFrame, function (err, spriteFrame) {
      dragNode.width = 100;
      dragNode.height = 120;
      dragNode.active = false;
      dragNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
      iconNode.width = 100;
      iconNode.height = 120;
      iconNode.active = true;
      iconNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
    });
  },
  setInitImgByRole: function setInitImgByRole() {
    var frameImg = "";

    if (this.seleRole == "ske") {
      this.setSelImg("sel_cards/ske");
    } //lieren
    else if (this.seleRole == "lr") {
        this.setSelImg("sel_cards/lieren");
      } //rockman
      else if (this.seleRole == "gi") {
          this.setSelImg("sel_cards/rockman");
        } else if (this.seleRole == "log") {
          this.setSelImg("sel_cards/log");
        } else if (this.seleRole == "bomb") {
          this.setSelImg("sel_cards/bomb");
        } else if (this.seleRole == "bee") {
          this.setSelImg("sel_cards/bee");
        } else if (this.seleRole == "wiz") {
          this.setSelImg("sel_cards/wiz");
        } //hero
        else if (this.seleRole == "hr") {
            this.setSelImg("sel_cards/hero");
          } //light man
          else if (this.seleRole == "lm") {
              this.setSelImg("sel_cards/lightman");
            } //hero
            else if (this.seleRole == "fa") {
                this.setSelImg("sel_cards/fortA");
              } //hero
              else if (this.seleRole == "ir") {
                  this.setSelImg("sel_cards/ironman");
                } //buff thunder
                else if (this.seleRole == "thunder") {
                    this.setSelImg("sel_cards/thunder");
                  } //buff heal
                  else if (this.seleRole == "heal") {
                      this.setSelImg("sel_cards/heal");
                    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Word3Sprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3de4fjEQ25MUY1HJMfSTEZQ', 'Word3Sprite');
// scripts/Word3Sprite.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.node.active = true;
  },
  endCounter: function endCounter() {
    this.node.active = false;
    this.getLayoutOp().setGameStartTime();
  },
  getLayoutOp: function getLayoutOp() {
    return this.node.parent.getComponent('Game');
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL1dvcmQzU3ByaXRlLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwic3RhcnQiLCJub2RlIiwiYWN0aXZlIiwiZW5kQ291bnRlciIsImdldExheW91dE9wIiwic2V0R2FtZVN0YXJ0VGltZSIsInBhcmVudCIsImdldENvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZlEsR0FIUDtBQXFCTDtBQUVBO0FBRUFDLEVBQUFBLEtBekJLLG1CQXlCSTtBQUNMLFNBQUtDLElBQUwsQ0FBVUMsTUFBVixHQUFpQixJQUFqQjtBQUNILEdBM0JJO0FBNkJMQyxFQUFBQSxVQUFVLEVBQUUsc0JBQVc7QUFDbkIsU0FBS0YsSUFBTCxDQUFVQyxNQUFWLEdBQWlCLEtBQWpCO0FBQ0EsU0FBS0UsV0FBTCxHQUFtQkMsZ0JBQW5CO0FBQ0gsR0FoQ0k7QUFrQ0xELEVBQUFBLFdBQVcsRUFBRSx1QkFBVztBQUNwQixXQUFPLEtBQUtILElBQUwsQ0FBVUssTUFBVixDQUFpQkMsWUFBakIsQ0FBOEIsTUFBOUIsQ0FBUDtBQUNILEdBcENJLENBdUNMOztBQXZDSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMZWFybiBjYy5DbGFzczpcbi8vICAtIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIC8vIG9uTG9hZCAoKSB7fSxcblxuICAgIHN0YXJ0ICgpIHtcbiAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZT10cnVlO1xuICAgIH0sXG5cbiAgICBlbmRDb3VudGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZT1mYWxzZTtcbiAgICAgICAgdGhpcy5nZXRMYXlvdXRPcCgpLnNldEdhbWVTdGFydFRpbWUoKTtcbiAgICB9LFxuXG4gICAgZ2V0TGF5b3V0T3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLnBhcmVudC5nZXRDb21wb25lbnQoJ0dhbWUnKTtcbiAgICB9LFxuXG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/SpriteIndex.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f6dd5p1dgBF87MB1jc9G2P1', 'SpriteIndex');
// scripts/SpriteIndex.ts

//SpriteIndex.js
cc.Class({
    extends: cc.Component,
    editor: CC_EDITOR && {
        requireComponent: cc.Sprite,
    },
    properties: {
        spriteFrames: [cc.SpriteFrame],
        _index: 0,
        index: {
            type: cc.Integer,
            //这次没使用notify方式实现属性值的变化监听，改用getter/setter方式
            get: function () {
                return this._index;
            },
            //为负数退出 
            set: function (value) {
                if (value < 0) {
                    return;
                }
                //根据spriteFrames组件长度计算this._index
                this._index = value % this.spriteFrames.length;
                //获取当前节点上的Sprite组件对象
                var sprite = this.node.getComponent(cc.Sprite);
                //设置Sprite组件的spriteFrame属性，变换图片
                sprite.spriteFrame = this.spriteFrames[this._index];
            },
        }
    },
    /**
    *next方法，调用index++切换图片，
    *可以方便被cc.Button组件的事件调用
    */
    next: function () {
        this.index++; //调用自身index属性，编号+1
    }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL1Nwcml0ZUluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdCQUFnQjtBQUNoQixFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ04sT0FBTyxFQUFFLEVBQUUsQ0FBQyxTQUFTO0lBQ3JCLE1BQU0sRUFBRSxTQUFTLElBQUk7UUFDakIsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLE1BQU07S0FDOUI7SUFDRCxVQUFVLEVBQUU7UUFDUixZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDO1FBQzlCLE1BQU0sRUFBRSxDQUFDO1FBRVQsS0FBSyxFQUFFO1lBQ0gsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPO1lBQ2hCLDJDQUEyQztZQUMzQyxHQUFHO2dCQUNDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2QixDQUFDO1lBQ0EsUUFBUTtZQUNSLEdBQUcsWUFBQyxLQUFLO2dCQUNOLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtvQkFDVixPQUFPO2lCQUNYO2dCQUNBLGlDQUFpQztnQkFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7Z0JBQzlDLG9CQUFvQjtnQkFDckIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM5QywrQkFBK0I7Z0JBQ2hDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEQsQ0FBQztTQUNKO0tBQ0o7SUFDRDs7O01BR0U7SUFDRixJQUFJO1FBQ0MsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsa0JBQWtCO0lBQ3JDLENBQUM7Q0FDSCxDQUFDLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvL1Nwcml0ZUluZGV4LmpzXG5jYy5DbGFzcyh7XG4gICBleHRlbmRzOiBjYy5Db21wb25lbnQsICAgICAgICAgICAgICAgLy/nvJbovpHlmajlsZ7mgKfvvIzlj6rlnKjnvJbovpHnirbmgIHmnInmlYhcbiAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcbiAgICAgICByZXF1aXJlQ29tcG9uZW50OiBjYy5TcHJpdGUsICAgICAvL+imgeaxguiKgueCueW/hemhu+aciWNjLlNwcml0Zee7hOS7tlxuICAgfSwgICBcbiAgIHByb3BlcnRpZXM6IHtcbiAgICAgICBzcHJpdGVGcmFtZXM6IFtjYy5TcHJpdGVGcmFtZV0sICAvL+WumuS5ieS4gOS4qlNwcml0ZUZyYW1lc+aVsOe7hFxuICAgICAgIF9pbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgIC8v5Lul5LiL5YiS57q/4oCcX+KAneW8gOWni+eahOS4uuengeeUqOWPmOmHj1xuICAgICBcbiAgICAgICBpbmRleDogeyAgICAgICAgICAgICAgICAgICAgICAgICAvL2luZGV45bGe5oCn5o6n5Yi25Zu+54mH5YiH5o2iXG4gICAgICAgICAgIHR5cGU6IGNjLkludGVnZXIsICAgICAgICAgICAgLy/lrprkuYnlsZ7mgKfkuLrmlbTmlbDnsbvlnotcbiAgICAgICAgICAgLy/ov5nmrKHmsqHkvb/nlKhub3RpZnnmlrnlvI/lrp7njrDlsZ7mgKflgLznmoTlj5jljJbnm5HlkKzvvIzmlLnnlKhnZXR0ZXIvc2V0dGVy5pa55byPXG4gICAgICAgICAgIGdldCgpIHsgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4O1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy/kuLrotJ/mlbDpgIDlh7ogXG4gICAgICAgICAgICBzZXQodmFsdWUpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL+agueaNrnNwcml0ZUZyYW1lc+e7hOS7tumVv+W6puiuoeeul3RoaXMuX2luZGV4XG4gICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IHZhbHVlICUgdGhpcy5zcHJpdGVGcmFtZXMubGVuZ3RoOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL+iOt+WPluW9k+WJjeiKgueCueS4iueahFNwcml0Zee7hOS7tuWvueixoVxuICAgICAgICAgICAgICAgbGV0IHNwcml0ZSA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy/orr7nva5TcHJpdGXnu4Tku7bnmoRzcHJpdGVGcmFtZeWxnuaAp++8jOWPmOaNouWbvueJh1xuICAgICAgICAgICAgICAgc3ByaXRlLnNwcml0ZUZyYW1lID0gdGhpcy5zcHJpdGVGcmFtZXNbdGhpcy5faW5kZXhdO1xuICAgICAgICAgICB9LFxuICAgICAgIH1cbiAgIH0sICAgIFxuICAgLyoqXG4gICAqbmV4dOaWueazle+8jOiwg+eUqGluZGV4KyvliIfmjaLlm77niYfvvIxcbiAgICrlj6/ku6Xmlrnkvr/ooqtjYy5CdXR0b27nu4Tku7bnmoTkuovku7bosIPnlKhcbiAgICovXG4gICBuZXh0KCkgeyAgICAgICAgXG4gICAgICAgIHRoaXMuaW5kZXgrKzsgLy/osIPnlKjoh6rouqtpbmRleOWxnuaAp++8jOe8luWPtysxXG4gICB9XG59KTsiXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/WizSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '65407smWQ1HBIUtleJMXxyA', 'WizSprite');
// scripts/WizSprite.js

"use strict";

var mySprite = require("MySprite");

var common = require("Common");

cc.Class({
  "extends": mySprite,
  properties: {
    role: "wiz"
  },
  start: function start() {
    this._animation = this.getComponent(cc.Animation);
    this._animation.WrapMode = cc.WrapMode.Loop;
  },
  remove: function remove() {
    this._animation.play("dieoff2");

    this.shadow.destroy();
    this.blood.destroy();
  },
  dieStart: function dieStart() {
    console.log("die start");
  },
  dieEnd: function dieEnd() {
    console.log("die end");

    this._animation.play("footprint");
  },
  //ske clip ske_bomb, foot print start evt
  footStart: function footStart() {
    console.log("foot start");
  },
  footEnd: function footEnd() {
    console.log("foot end");
    this.node.destroy();
  },
  //ske clip ske_bomb, foot print start evt
  footPrint: function footPrint() {
    this.node.zIndex = -1;
    this.node.scaleX = 1;
    this.node.scaleY = 1;
  },
  //ske clip ske_bomb, called by first frame of ske_bomb
  beforeKill: function beforeKill() {//this.shadow.destroy();
  },
  //ske clip ske_bomb, called by last frame of ske_bomb
  afterKill: function afterKill() {
    console.log("--remove archer node--");
    this.node.destroy();
  },
  frame1Evt: function frame1Evt() {
    this.dispShadow(1);
  },
  frame2Evt: function frame2Evt() {
    this.dispShadow(2);
  },
  frame3Evt: function frame3Evt() {
    this.dispShadow(3);
  },
  frame4Evt: function frame4Evt() {
    this.dispShadow(4);
  },
  frame5Evt: function frame5Evt() {
    this.dispShadow(5);
  },
  frame6Evt: function frame6Evt() {
    this.dispShadow(6);
  },
  frame7Evt: function frame7Evt() {
    this.dispShadow(7);
  },
  aFrame1Evt: function aFrame1Evt() {
    this.dispShadow(1);
  },
  aFrame2Evt: function aFrame2Evt() {
    this.dispShadow(3);
  },
  aFrame3Evt: function aFrame3Evt() {
    this.dispShadow(5);
  },
  aFrame4Evt: function aFrame4Evt() {},
  aFrame5Evt: function aFrame5Evt() {
    this.dispShadow(7);
  },
  playAni: function playAni(agent, agentFuture, isMainPlayer) {
    this.playAngleAnimationRemote(agent, agentFuture, isMainPlayer);
  },
  isEnemyBase: function isEnemyBase(baseId) {
    if (baseId == 1 || baseId == 2 || baseId == 3) {
      return true;
    } else {
      return false;
    }
  },
  isEnemyFort: function isEnemyFort(isAgentHero, mainPlayer) {
    if (isAgentHero && mainPlayer == 2) {
      return true;
    }

    if (!isAgentHero && mainPlayer == 1) {
      return true;
    }

    return false;
  },
  playBaseWarriorAnimationDefault: function playBaseWarriorAnimationDefault(actType, baseId) {
    var actName;

    if (this.isEnemyBase(baseId)) {
      actName = "lr_s_walk";
    } else {
      actName = "lr_n_walk";
    }

    if (actType == "move" && this.lastAct == actName) {
      return;
    }

    var randomTime = Math.ceil(Math.random() * 125) / 100;

    this._animation.play(actName, randomTime);

    this.lastAct = actName;
  },
  playFortWarriorAnimationDefault: function playFortWarriorAnimationDefault(actType, isAgentHero, mainPlayer) {
    var actName;

    if (this.isEnemyFort(isAgentHero, mainPlayer)) {
      actName = "lr_s_walk";
    } else {
      actName = "lr_n_walk";
    }

    if (actType == "move" && this.lastAct == actName) {
      return;
    }

    var randomTime = Math.ceil(Math.random() * 125) / 100;

    this._animation.play(actName, randomTime);

    this.lastAct = actName;
  },
  playBaseWarriorAnimation: function playBaseWarriorAnimation(agent, isMainPlayer, actType) {
    var fx, fy;
    var targetYOffset = common.attackTargetYOffset;
    var ex, ey;
    var angle;
    var x = agent.mypos.x;
    var y = agent.mypos.y;
    var startPos, targetPos, startEPos, targetEPos, vt, vtE;
    var randomTime = Math.ceil(Math.random() * 125) / 100;
    var actName = "";
    var then;
    var angleInfo; // user to control the up and down user Y postion offset.

    var offsetDir = 1;

    if (isMainPlayer == 1) {
      offsetDir = 1;
    } else if (isMainPlayer == 2) {
      offsetDir = -1;
    }

    ex = agent.enemypos.x;
    ey = agent.enemypos.y; // dir according to enemy position

    startPos = cc.v2(x * 30, y * 30);
    targetPos = cc.v2(ex * 30, ey * 30 + targetYOffset * offsetDir);
    vt = startPos.sub(targetPos);

    if (vt.x == 0 && vt.y == 0) {
      return;
    } //if dir no changed, vt.x or vt.y is 0, atan value should be invaild


    if (vt.x == 0) {
      vt.x = 0.1;
    }

    if (vt.y == 0) {
      vt.y = 0.1;
    } //if postion not changed, do nothing, or the math.atan will do error.


    if (vt.x != 0 && vt.y != 0) {
      var ag = 180 / Math.PI * Math.atan(vt.x / vt.y);
      angle = ag;

      if (vt.y >= 0) {
        //when down to up
        angle = ag + 180;
      }
    }

    if (this._animation) {
      angleInfo = this.getActnameByAngle(angle, actType);
      actName = angleInfo.actName; //used to mirror a sprite.

      this.node.scaleX = angleInfo.scaleX; //if already in attack mode, just skip the animation

      if (this.lastAct != actName || actType == "sa") {
        if (actType == "sa") {
          this._animation.stop();

          this._animation.play(actName);
        } else {
          //walking action.
          this._animation.play(actName, randomTime);
        }

        this.angle = angle;
        this.lastAct = actName;
        this.lastScaleX = angleInfo.scaleX;
      }
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/AgentObj.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'de37fFOB2lBv76OrGfwhKh/', 'AgentObj');
// scripts/AgentObj.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  setTotalLife: function setTotalLife(val) {
    this.totalLife = val;
  },
  setLife: function setLife(val) {
    this.life = val; //this.setBloodBar(val);

    var bloodNode = this.blood.getComponent("BloodBar");
    bloodNode.setBloodBar(this.life, this.totalLife);
  },
  setGroupKill: function setGroupKill(val) {
    this.groupKill = val;
  },
  setBloodLevel: function setBloodLevel(val) {},
  setBlood: function setBlood(blood) {
    this.blood = blood;
    this.blood.active = true;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0FnZW50T2JqLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwic3RhcnQiLCJzZXRUb3RhbExpZmUiLCJ2YWwiLCJ0b3RhbExpZmUiLCJzZXRMaWZlIiwibGlmZSIsImJsb29kTm9kZSIsImJsb29kIiwiZ2V0Q29tcG9uZW50Iiwic2V0Qmxvb2RCYXIiLCJzZXRHcm91cEtpbGwiLCJncm91cEtpbGwiLCJzZXRCbG9vZExldmVsIiwic2V0Qmxvb2QiLCJhY3RpdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRSxDQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZRLEdBSFA7QUFxQkw7QUFFQTtBQUVBQyxFQUFBQSxLQXpCSyxtQkF5QkksQ0FFUixDQTNCSTtBQTZCTEMsRUFBQUEsWUFBWSxFQUFFLHNCQUFTQyxHQUFULEVBQWM7QUFDeEIsU0FBS0MsU0FBTCxHQUFpQkQsR0FBakI7QUFDSCxHQS9CSTtBQWlDTEUsRUFBQUEsT0FBTyxFQUFFLGlCQUFTRixHQUFULEVBQWM7QUFDbkIsU0FBS0csSUFBTCxHQUFZSCxHQUFaLENBRG1CLENBRW5COztBQUNBLFFBQUlJLFNBQVMsR0FBRyxLQUFLQyxLQUFMLENBQVdDLFlBQVgsQ0FBd0IsVUFBeEIsQ0FBaEI7QUFDQUYsSUFBQUEsU0FBUyxDQUFDRyxXQUFWLENBQXNCLEtBQUtKLElBQTNCLEVBQWlDLEtBQUtGLFNBQXRDO0FBQ0gsR0F0Q0k7QUF3Q0xPLEVBQUFBLFlBQVksRUFBRSxzQkFBU1IsR0FBVCxFQUFjO0FBQ3hCLFNBQUtTLFNBQUwsR0FBaUJULEdBQWpCO0FBQ0gsR0ExQ0k7QUE0Q0xVLEVBQUFBLGFBQWEsRUFBRSx1QkFBU1YsR0FBVCxFQUFjLENBRTVCLENBOUNJO0FBZ0RMVyxFQUFBQSxRQUFRLEVBQUUsa0JBQVNOLEtBQVQsRUFBZ0I7QUFDdEIsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0EsS0FBTCxDQUFXTyxNQUFYLEdBQW9CLElBQXBCO0FBQ0gsR0FuREksQ0FxREw7O0FBckRLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHA6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgLy8gb25Mb2FkICgpIHt9LFxuXG4gICAgc3RhcnQgKCkge1xuXG4gICAgfSxcblxuICAgIHNldFRvdGFsTGlmZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHRoaXMudG90YWxMaWZlID0gdmFsO1xuICAgIH0sXG5cbiAgICBzZXRMaWZlOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgdGhpcy5saWZlID0gdmFsO1xuICAgICAgICAvL3RoaXMuc2V0Qmxvb2RCYXIodmFsKTtcbiAgICAgICAgdmFyIGJsb29kTm9kZSA9IHRoaXMuYmxvb2QuZ2V0Q29tcG9uZW50KFwiQmxvb2RCYXJcIik7XG4gICAgICAgIGJsb29kTm9kZS5zZXRCbG9vZEJhcih0aGlzLmxpZmUsIHRoaXMudG90YWxMaWZlKTtcbiAgICB9LFxuXG4gICAgc2V0R3JvdXBLaWxsOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgdGhpcy5ncm91cEtpbGwgPSB2YWw7XG4gICAgfSxcblxuICAgIHNldEJsb29kTGV2ZWw6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBcbiAgICB9LFxuXG4gICAgc2V0Qmxvb2Q6IGZ1bmN0aW9uKGJsb29kKSB7XG4gICAgICAgIHRoaXMuYmxvb2QgPSBibG9vZDtcbiAgICAgICAgdGhpcy5ibG9vZC5hY3RpdmUgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/aniComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '86f1aoqPclID4CwDWRy9QKi', 'aniComponent');
// scripts/aniComponent.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    sprAtlas: cc.SpriteAtlas,
    wrapMode: cc.WrapMode["default"]
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this._animation = this.getComponent(cc.Animation);
    this.setAnimation();
  },
  start: function start() {
    this.playAnimation();
  },
  setAnimation: function setAnimation() {
    var self = this;

    if (this.sprAtlas) {
      var frames = this.sprAtlas.getSpriteFrames();
      var clip = cc.AnimationClip.createWithSpriteFrames(frames, frames.length);
      clip.name = "anim_001";
      clip.speed = 0.1;
      clip.sample = 60;
      clip.wrapMode = this.wrapMode;

      this._animation.addClip(clip);
    }
  },
  playAnimation: function playAnimation() {
    var wrapMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cc.WrapMode.Default;
    var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
    var sample = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;

    if (this._animation) {
      var animState = this._animation.getAnimationState("anim_001");

      animState.clip.wrapMode = wrapMode;
      animState.clip.speed = speed;
      animState.clip.sample = sample;

      this._animation.play("anim_001");
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL2FuaUNvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsInNwckF0bGFzIiwiU3ByaXRlQXRsYXMiLCJ3cmFwTW9kZSIsIldyYXBNb2RlIiwib25Mb2FkIiwiX2FuaW1hdGlvbiIsImdldENvbXBvbmVudCIsIkFuaW1hdGlvbiIsInNldEFuaW1hdGlvbiIsInN0YXJ0IiwicGxheUFuaW1hdGlvbiIsInNlbGYiLCJmcmFtZXMiLCJnZXRTcHJpdGVGcmFtZXMiLCJjbGlwIiwiQW5pbWF0aW9uQ2xpcCIsImNyZWF0ZVdpdGhTcHJpdGVGcmFtZXMiLCJsZW5ndGgiLCJuYW1lIiwic3BlZWQiLCJzYW1wbGUiLCJhZGRDbGlwIiwiRGVmYXVsdCIsImFuaW1TdGF0ZSIsImdldEFuaW1hdGlvblN0YXRlIiwicGxheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLFFBQVEsRUFBRUosRUFBRSxDQUFDSyxXQURMO0FBRVJDLElBQUFBLFFBQVEsRUFBRU4sRUFBRSxDQUFDTyxRQUFIO0FBRkYsR0FIUDtBQVFMO0FBRUFDLEVBQUFBLE1BVkssb0JBVUs7QUFDTixTQUFLQyxVQUFMLEdBQWtCLEtBQUtDLFlBQUwsQ0FBa0JWLEVBQUUsQ0FBQ1csU0FBckIsQ0FBbEI7QUFDQSxTQUFLQyxZQUFMO0FBQ0gsR0FiSTtBQWVMQyxFQUFBQSxLQWZLLG1CQWVJO0FBQ0wsU0FBS0MsYUFBTDtBQUNILEdBakJJO0FBbUJMRixFQUFBQSxZQW5CSywwQkFtQlc7QUFDWixRQUFJRyxJQUFJLEdBQUcsSUFBWDs7QUFDQSxRQUFHLEtBQUtYLFFBQVIsRUFBa0I7QUFDZCxVQUFJWSxNQUFNLEdBQUcsS0FBS1osUUFBTCxDQUFjYSxlQUFkLEVBQWI7QUFDQSxVQUFJQyxJQUFJLEdBQUdsQixFQUFFLENBQUNtQixhQUFILENBQWlCQyxzQkFBakIsQ0FBd0NKLE1BQXhDLEVBQStDQSxNQUFNLENBQUNLLE1BQXRELENBQVg7QUFDQUgsTUFBQUEsSUFBSSxDQUFDSSxJQUFMLEdBQVksVUFBWjtBQUNBSixNQUFBQSxJQUFJLENBQUNLLEtBQUwsR0FBYSxHQUFiO0FBQ0FMLE1BQUFBLElBQUksQ0FBQ00sTUFBTCxHQUFjLEVBQWQ7QUFDQU4sTUFBQUEsSUFBSSxDQUFDWixRQUFMLEdBQWdCLEtBQUtBLFFBQXJCOztBQUNBLFdBQUtHLFVBQUwsQ0FBZ0JnQixPQUFoQixDQUF3QlAsSUFBeEI7QUFDSDtBQUNKLEdBOUJJO0FBZ0NMSixFQUFBQSxhQWhDSywyQkFnQ29FO0FBQUEsUUFBMURSLFFBQTBELHVFQUEvQ04sRUFBRSxDQUFDTyxRQUFILENBQVltQixPQUFtQztBQUFBLFFBQTFCSCxLQUEwQix1RUFBbEIsR0FBa0I7QUFBQSxRQUFiQyxNQUFhLHVFQUFKLEVBQUk7O0FBQ3JFLFFBQUcsS0FBS2YsVUFBUixFQUFvQjtBQUNoQixVQUFJa0IsU0FBUyxHQUFHLEtBQUtsQixVQUFMLENBQWdCbUIsaUJBQWhCLENBQWtDLFVBQWxDLENBQWhCOztBQUNBRCxNQUFBQSxTQUFTLENBQUNULElBQVYsQ0FBZVosUUFBZixHQUEwQkEsUUFBMUI7QUFDQXFCLE1BQUFBLFNBQVMsQ0FBQ1QsSUFBVixDQUFlSyxLQUFmLEdBQXVCQSxLQUF2QjtBQUNBSSxNQUFBQSxTQUFTLENBQUNULElBQVYsQ0FBZU0sTUFBZixHQUF3QkEsTUFBeEI7O0FBQ0EsV0FBS2YsVUFBTCxDQUFnQm9CLElBQWhCLENBQXFCLFVBQXJCO0FBQ0g7QUFDSixHQXhDSSxDQTBDTDs7QUExQ0ssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBzcHJBdGxhczogY2MuU3ByaXRlQXRsYXMsXG4gICAgICAgIHdyYXBNb2RlOiBjYy5XcmFwTW9kZS5kZWZhdWx0LFxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IHRoaXMuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKCk7XG4gICAgfSxcblxuICAgIHN0YXJ0ICgpIHtcbiAgICAgICAgdGhpcy5wbGF5QW5pbWF0aW9uKCk7XG4gICAgfSxcblxuICAgIHNldEFuaW1hdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYodGhpcy5zcHJBdGxhcykge1xuICAgICAgICAgICAgdmFyIGZyYW1lcyA9IHRoaXMuc3ByQXRsYXMuZ2V0U3ByaXRlRnJhbWVzKCk7XG4gICAgICAgICAgICB2YXIgY2xpcCA9IGNjLkFuaW1hdGlvbkNsaXAuY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyhmcmFtZXMsZnJhbWVzLmxlbmd0aCk7XG4gICAgICAgICAgICBjbGlwLm5hbWUgPSBcImFuaW1fMDAxXCI7XG4gICAgICAgICAgICBjbGlwLnNwZWVkID0gMC4xO1xuICAgICAgICAgICAgY2xpcC5zYW1wbGUgPSA2MDtcbiAgICAgICAgICAgIGNsaXAud3JhcE1vZGUgPSB0aGlzLndyYXBNb2RlO1xuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uLmFkZENsaXAoY2xpcCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcGxheUFuaW1hdGlvbiAod3JhcE1vZGUgPSBjYy5XcmFwTW9kZS5EZWZhdWx0LCBzcGVlZCA9IDAuNSwgc2FtcGxlID0gNjApIHtcbiAgICAgICAgaWYodGhpcy5fYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYW5pbVN0YXRlID0gdGhpcy5fYW5pbWF0aW9uLmdldEFuaW1hdGlvblN0YXRlKFwiYW5pbV8wMDFcIik7XG4gICAgICAgICAgICBhbmltU3RhdGUuY2xpcC53cmFwTW9kZSA9IHdyYXBNb2RlO1xuICAgICAgICAgICAgYW5pbVN0YXRlLmNsaXAuc3BlZWQgPSBzcGVlZDtcbiAgICAgICAgICAgIGFuaW1TdGF0ZS5jbGlwLnNhbXBsZSA9IHNhbXBsZTtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5wbGF5KFwiYW5pbV8wMDFcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/GameProvider.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fbdd5ReyFxHioXVNcTwoYt5', 'GameProvider');
// scripts/GameProvider.js

"use strict";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// 定义一个判断函数
String.prototype.inArray = function (arr) {
  // 不是数组则抛出异常
  if (!arr) {
    console.log("ERR(in_array):Input is not an array");
  } // 遍历是否在数组中


  for (var i = 0, k = arr.length; i < k; i++) {
    if (this == arr[i]) {
      return true;
    }
  } // 如果不在数组中就会返回false


  return false;
};

Array.prototype.removeByValue = function (val) {
  for (var i = 0; i < this.length; i++) {
    if (this[i] == val) {
      this.splice(i, 1);
      break;
    }
  }
};

Array.prototype.minus = function (arr) {
  var result = new Array();
  var obj = {};

  for (var i = 0; i < arr.length; i++) {
    obj[arr[i]] = 1;
  }

  for (var j = 0; j < this.length; j++) {
    if (!obj[this[j]]) {
      obj[this[j]] = 1;
      result.push(this[j]);
    }
  }

  return result;
};

var socketProvider = require("SocketProvider");

cc.Class({
  "extends": socketProvider,
  properties: {},
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  // start () {},
  hideDragItem: function hideDragItem(innerId) {
    if (this.putSele[innerId]) {
      this.putSele[innerId].destroy();
      this.putSele[innerId] = null;
    }
  },
  createBuff: function createBuff(buff) {
    var myBuff, px, py;
    var canvasNode = this.node.parent;

    if (buff.typeId == 1) {
      this.playSnd("thunder");
      myBuff = cc.instantiate(this.playerPrefab[23]); //canvasNode.getChildByName("buffThunder").active = false;
    } else if (buff.typeId == 2) {
      this.playSnd("heal");
      myBuff = cc.instantiate(this.playerPrefab[24]); //canvasNode.getChildByName("buffHeal").active = false;
    } //hide select frame


    this.dispCharSele(); //remove buff icon

    if (this.putSele[buff.innerId]) {
      this.putSele[buff.innerId].parent.destroy();
    } //hide drag item disp
    //this.hideDragItem(buff.innerId);


    this.clickSele = {};
    px = buff.mypos.x * 30;
    py = buff.mypos.y * 30;
    var moveTo = cc.v2(px, py);
    myBuff.setPosition(moveTo);
    this.node.addChild(myBuff);
  },
  createAgents: function createAgents(agents) {
    var aid, myAgent, agent, agentNode;
    var px, py, eo; //var nodelist = cc.find("Canvas/layout");
    //console.log(nodelist);

    for (var i = 0; i < agents.length; i++) {
      agent = agents[i];
      aid = agent.aid;
      myAgent = this.npcInfo.objectForKey(aid);
      px = agent.mypos.x * 30;
      py = agent.mypos.y * 30;

      if (myAgent == null) {
        this.hideDragItem(agent.innerId);

        if (agent.role == "ske") {
          myAgent = cc.instantiate(this.playerPrefab[0]);
        } else if (agent.role == "ir") {
          myAgent = cc.instantiate(this.playerPrefab[20]);
        } else if (agent.role == "bee") {
          myAgent = cc.instantiate(this.playerPrefab[16]);
        } else if (agent.role == "wiz") {
          myAgent = cc.instantiate(this.playerPrefab[17]);
        } else if (agent.role == "hr") {
          myAgent = cc.instantiate(this.playerPrefab[12]);
        } else if (agent.role == "lm") {
          myAgent = cc.instantiate(this.playerPrefab[14]);
        } else if (agent.role == "lr") {
          myAgent = cc.instantiate(this.playerPrefab[3]);
        } else if (agent.role == "gi") {
          myAgent = cc.instantiate(this.playerPrefab[4]);
        } else {
          continue;
        }

        myAgent.name = aid;
        myAgent.type = "agent";
        myAgent.active = true;
        myAgent.role = agent.role;
        myAgent.size = agent.size;
        myAgent.level = agent.level;
        agentNode = this.getComponentByRole(myAgent);
        agentNode.init();
        agentNode.setId(aid); //shadow should set in layout, because its zindex should be lower than any agents.

        agentNode.setShadow(this.shadowForAgent());
        agentNode.setTotalLife(agent.life);
        agentNode.setBlood(this.bloodForAgent(myAgent)); //if init pos is in south, face to north, otherwise....

        if (this.mainPlayer == 1) {
          agent.rot = 180;
        } else if (this.mainPlayer == 2) {
          agent.rot = 0;
        }

        px = agent.mypos.x * 30;
        py = agent.mypos.y * 30;
        agentNode.updatePos(px, py);
        this.node.addChild(myAgent);
        this.npcInfo.setObject(myAgent, aid);
      }
    }
  },
  createBullets: function createBullets(bullets) {
    var aid, myBullet, bullet, agentNode;
    var px, py, eo, eDis;

    for (var i = 0; i < bullets.length; i++) {
      bullet = bullets[i];
      aid = bullet.aid;
      myBullet = this.npcInfo.objectForKey(aid);

      if (myBullet == null) {
        if (bullet.role == "bullet") {
          myBullet = cc.instantiate(this.playerPrefab[1]);
          myBullet.startPos = bullet.mypos;
          myBullet.active = false;
        } else if (bullet.role == "bomb") {
          console.log("bomb created");
          this.playSnd("fireSend");
          this.hideDragItem(bullet.innerId);
          myBullet = cc.instantiate(this.playerPrefab[5]);
          eDis = this.enemeyDistance(bullet.mypos.x, bullet.mypos.y, bullet.targetpos.x, bullet.targetpos.y);
          myBullet.startPos = bullet.mypos;
          myBullet.targetDis = eDis;
        } else if (bullet.role == "tama") {
          this.playSnd("gun");
          myBullet = cc.instantiate(this.playerPrefab[9]);
          myBullet.startPos = bullet.mypos;
          myBullet.active = false;
        } else if (bullet.role == "wizfire") {
          myBullet = cc.instantiate(this.playerPrefab[18]);
          myBullet.startPos = bullet.mypos;
          myBullet.active = false;
        } else {
          console.log("error, no bullet type.");
        }

        myBullet.name = aid;
        myBullet.type = "bullet"; //myBullet.active = true;

        myBullet.role = bullet.role;
        myBullet.updown = bullet.updown;
        myBullet.zIndex = 9999;
        agentNode = this.getComponentByRole(myBullet); // 将新增的节点添加到 Canvas 节点下面

        this.node.addChild(myBullet);
        px = -1000;
        py = -1000;
        var moveTo = cc.v2(px, py);
        var bulletRot = bullet.rot;

        if (this.mainPlayer == 1) {
          bulletRot += 180;
        } //since 2.1.1 setRotation is desperated.


        myBullet.angle = -1 * bulletRot; //myBullet.setRotation(bulletRot);  //bullet.rot+180

        myBullet.setPosition(moveTo);
        this.npcInfo.setObject(myBullet, aid);
      }
    }
  },
  createBases: function createBases(bases) {
    var aid, myAgent, agent, baseName, baseNode;

    for (var i = 0; i < bases.length; i++) {
      agent = bases[i];
      aid = agent.aid;
      myAgent = this.npcInfo.objectForKey(aid);

      if (myAgent == null) {
        myAgent = {};
        myAgent.name = aid;
        myAgent.type = "base";
        myAgent.active = true;
        myAgent.role = agent.role;
        myAgent.mypos = agent.mypos;
        myAgent.size = agent.size;
        baseName = "base" + agent.objectId;
        myAgent.baseObj = this.node.getChildByName(baseName);
        baseNode = myAgent.baseObj.getComponent("BaseSprite");
        baseNode.setTotalLife(agent.life);
        baseNode.setBlood(this.bloodForAgent(myAgent.baseObj));
        baseNode.setLife(agent.life);
        this.npcInfo.setObject(myAgent, aid);
      }
    }
  },
  createLogs: function createLogs(logs) {
    var aid, myAgent, agent, agentNode;
    var px, py; //this.playSnd("log");

    for (var i = 0; i < logs.length; i++) {
      agent = logs[i];
      aid = agent.aid;
      myAgent = this.npcInfo.objectForKey(aid);
      px = agent.mypos.x * 30;
      py = agent.mypos.y * 30;

      if (myAgent == null) {
        this.hideDragItem(agent.innerId);
        myAgent = cc.instantiate(this.playerPrefab[8]);
        myAgent.name = aid;
        myAgent.type = "log";
        myAgent.active = true;
        myAgent.role = agent.role;
        agentNode = this.getComponentByRole(myAgent);
        agentNode.setId(aid);
        agentNode.setShadow(this.shadowForLog());
        var moveTo = cc.v2(px, py);
        agentNode.move(moveTo); // 将新增的节点添加到 Canvas 节点下面

        this.node.addChild(myAgent);
        this.playSnd("log");
        this.npcInfo.setObject(myAgent, aid);
      }
    }
  },
  createForts: function createForts(forts) {
    var aid, myAgent, agent, agentNode;
    var px, py, eo, zorder; //var nodelist = cc.find("Canvas/layout");
    //console.log(nodelist);

    for (var i = 0; i < forts.length; i++) {
      agent = forts[i];
      aid = agent.aid;
      myAgent = this.npcInfo.objectForKey(aid);
      px = agent.mypos.x * 30;
      py = agent.mypos.y * 30;

      if (myAgent == null) {
        this.hideDragItem(agent.innerId);
        myAgent = cc.instantiate(this.playerPrefab[7]);
        myAgent.name = aid;
        myAgent.type = "fa";
        myAgent.spName = "FortASprite";
        myAgent.active = true;
        myAgent.role = agent.role;
        myAgent.size = agent.size; //1000:agent, 999:bullet 998:this;
        //fort base anchorY is middle, so y-2 is nessesary.

        if (this.mainPlayer == 1) {
          zorder = 1001 + parseInt(32 - agent.mypos.y - 1);
        } else if (this.mainPlayer == 2) {
          zorder = 1001 + parseInt(32 - agent.mypos.y - 1);
        }

        myAgent.zIndex = zorder;
        agentNode = this.getComponentByRole(myAgent);
        agentNode.setZIndex(zorder);
        /*                
                        //agentNode.init();
                        //agentNode.setId(aid);
                        //agentNode.setShadow(this.shadowForAgent());
        */

        agentNode.setTotalLife(agent.life);
        agentNode.setBlood(this.bloodForAgent(myAgent)); //if init pos is in south, face to north, otherwise....

        if (this.mainPlayer == 1) {
          agent.rot = 180;
        } else if (this.mainPlayer == 2) {
          agent.rot = 0;
        }

        var moveTo = cc.v2(px, py);
        myAgent.setPosition(moveTo); //agentNode.playAngleAnimation(agent, null, this.mainPlayer);
        // 将新增的节点添加到 Canvas 节点下面

        this.node.addChild(myAgent);
        this.npcInfo.setObject(myAgent, aid);
      }
    }
  },
  agentProcess: function agentProcess(agents) {
    var remoteAgents = [];
    var localAgents = [];
    var killAgents = [];
    var agentObj, agentNode;
    var agentId;

    for (var i = 0; i < agents.length; i++) {
      remoteAgents.push(agents[i].aid);
    }

    localAgents = this.npcInfo.allKeys();
    killAgents = localAgents.minus(remoteAgents);

    for (var _iterator = _createForOfIteratorHelperLoose(killAgents), _step; !(_step = _iterator()).done;) {
      agentId = _step.value;
      agentObj = this.npcInfo.objectForKey(agentId);

      if (agentObj.type == "agent") {
        agentNode = this.getComponentByRole(agentObj);
        agentNode.remove();
        this.removedNpcInfo.setObject(agentObj, agentId);
        this.npcInfo.removeObjectForKey(agentId);
      }
    }
  },
  baseProcess: function baseProcess(bases) {
    var remoteBases = [];
    var killBases = [];
    var enemyBases = [];
    var baseObj;
    var warriorName;
    var warriorObj;
    var baseName;

    for (var i = 0; i < bases.length; i++) {
      baseName = "base" + bases[i].objectId;
      remoteBases.push(baseName);
      enemyBases.push(baseName);
    } // todo list: should manage to remove the base record in npcInfo.


    killBases = this._defaultBases.minus(remoteBases);

    for (var _iterator2 = _createForOfIteratorHelperLoose(killBases), _step2; !(_step2 = _iterator2()).done;) {
      baseName = _step2.value;
      this.dispLayoutMask(enemyBases, baseName);

      this._defaultBases.removeByValue(baseName);

      baseObj = this.node.getChildByName(baseName); //this.plusBaseKillNum(baseName);

      this.node.removeChild(baseObj);
      this.playEffect("base", baseObj.x, baseObj.y);
    }
  },
  plusBaseKillNum: function plusBaseKillNum(baseName) {
    //todo: layout node must be set in init 
    var enemynum = this.node.getChildByName("upFlag").getChildByName("ringMark").getChildByName("killnum").getComponent("cc.Label");
    var mynum = this.node.getChildByName("downFlag").getChildByName("ringMark").getChildByName("killnum").getComponent("cc.Label");

    if (baseName.inArray(["base1", "base2", "base3"])) {
      enemynum.string = parseInt(enemynum.string) + 1;
    } else {
      mynum.string = parseInt(enemynum.string) + 1;
    }
  },
  //called when game is over
  killBases: function killBases(dir) {
    //todo: layout node must be set in init 
    //var enemynum = this.node.getChildByName("upFlag").getChildByName("ringMark").getChildByName("killnum").getComponent("cc.Label");
    //var mynum = this.node.getChildByName("downFlag").getChildByName("ringMark").getChildByName("killnum").getComponent("cc.Label");
    var killBases;
    var baseObj, bd;
    var baseName;

    if (dir == "up") {
      killBases = ["base1", "base2", "base3"]; //enemynum.string = 3;
    } else {
      killBases = ["base4", "base5", "base6"]; //mynum.string = 3;
    }

    for (var _iterator3 = _createForOfIteratorHelperLoose(killBases), _step3; !(_step3 = _iterator3()).done;) {
      baseName = _step3.value;
      //this._defaultBases.removeByValue(baseName);
      baseObj = this.node.getChildByName(baseName);

      if (baseObj) {
        this.playEffect("base", baseObj.x, baseObj.y);
        this.node.removeChild(baseObj);
      }
    }
  },
  undisplayMask: function undisplayMask(sel) {
    console.log(sel);
    this.node.getChildByName(sel).active = false;
  },
  dispLayoutMask: function dispLayoutMask(killEnemyBases, baseName) {
    var _self = this;

    if (baseName == "base4" || baseName == "base5" || baseName == "base6") {
      return;
    } //if("base1".inArray(killEnemyBases) && "base2".inArray(killEnemyBases) && "base3".inArray(killEnemyBases)) {
    //    return;
    //}


    if ("base1".inArray(killEnemyBases) && "base2".inArray(killEnemyBases)) {
      this.showMask("seleMask12", 2);
    } else if ("base1".inArray(killEnemyBases) && "base3".inArray(killEnemyBases)) {
      this.showMask("seleMask13", 2);
    } else if ("base1".inArray(killEnemyBases)) {
      this.showMask("seleMask1", 2);
    }
  },
  showDragMask: function showDragMask(role) {
    if (!this.ifNotMaskRole(role)) {
      this.node.getChildByName(this.maskType).active = true;
    }
  },
  unshowDragMask: function unshowDragMask() {
    this.node.getChildByName(this.maskType).active = false;
  },
  showMask: function showMask(maskType, delay) {
    var _self = this;

    this.maskType = maskType;
    this.node.getChildByName(maskType).active = true;
    this.scheduleOnce(function () {
      _self.undisplayMask(maskType);
    }, delay);
  },
  putErrorMsg: function putErrorMsg() {
    var _self = this;

    this.node.getChildByName("putError").active = true;
    this.scheduleOnce(function () {
      _self.undisplayPutErr();
    }, 1);
  },
  undisplayPutErr: function undisplayPutErr() {
    this.node.getChildByName("putError").active = false;
  },
  fortProcess: function fortProcess(forts, fortsFuture) {
    var remoteAgents = [];
    var localAgents = [];
    var killAgents = [];
    var agentObj, agentNode;
    var agentId, bd;

    for (var i = 0; i < forts.length; i++) {
      remoteAgents.push(forts[i].aid);
    }

    localAgents = this.npcInfo.allKeys();
    killAgents = localAgents.minus(remoteAgents);

    for (var _iterator4 = _createForOfIteratorHelperLoose(killAgents), _step4; !(_step4 = _iterator4()).done;) {
      agentId = _step4.value;
      agentObj = this.npcInfo.objectForKey(agentId);

      if (agentObj.type == "fa") {
        this.playEffect("fort", agentObj.x, agentObj.y); //agentNode = this.getComponentByRole(agentObj);
        //agentNode.remove();

        this.node.removeChild(agentObj);
        this.removedNpcInfo.setObject(agentObj, agentId);
        this.npcInfo.removeObjectForKey(agentId);
        this.playEffect("base", agentObj.x, agentObj.y);
      }
    }
  },
  logProcess: function logProcess(logs) {
    var remoteAgents = [];
    var localAgents = [];
    var killAgents = [];
    var agentObj, agentNode;
    var agentId, bd;

    for (var i = 0; i < logs.length; i++) {
      remoteAgents.push(logs[i].aid);
    }

    localAgents = this.npcInfo.allKeys();
    killAgents = localAgents.minus(remoteAgents);

    for (var _iterator5 = _createForOfIteratorHelperLoose(killAgents), _step5; !(_step5 = _iterator5()).done;) {
      agentId = _step5.value;
      agentObj = this.npcInfo.objectForKey(agentId);

      if (agentObj.role == "log") {
        this.playEffect("log", agentObj.x, agentObj.y);
        agentNode = this.getComponentByRole(agentObj);
        agentNode.remove();
        this.removedNpcInfo.setObject(agentObj, agentId);
        this.npcInfo.removeObjectForKey(agentId);
      }
    }
  },
  bulletProcess: function bulletProcess(bullets) {
    var remoteBullets = [];
    var localBullets = [];
    var killBullets = [];
    var agentObj, agentNode;
    var agentId;

    for (var i = 0; i < bullets.length; i++) {
      remoteBullets.push(bullets[i].aid);
    }

    localBullets = this.npcInfo.allKeys();
    killBullets = localBullets.minus(remoteBullets);

    for (var _iterator6 = _createForOfIteratorHelperLoose(killBullets), _step6; !(_step6 = _iterator6()).done;) {
      agentId = _step6.value;
      agentObj = this.npcInfo.objectForKey(agentId);

      if (agentObj.role == "bomb") {
        agentNode = this.getComponentByRole(agentObj);
        agentObj.destroy();
        this.removedNpcInfo.setObject(agentObj, agentId);
        this.npcInfo.removeObjectForKey(agentId);
        this.playEffect("bomb", agentObj.x, agentObj.y);
      }

      if (agentObj.role == "wizfire") {
        agentNode = this.getComponentByRole(agentObj);
        agentObj.destroy();
        this.removedNpcInfo.setObject(agentObj, agentId);
        this.npcInfo.removeObjectForKey(agentId);

        if (agentObj.x && agentObj.y) {
          this.playEffect("wizfire", agentObj.x, agentObj.y);
        }
      } else if (agentObj.role == "bullet" || agentObj.role == "tama") {
        agentNode = this.getComponentByRole(agentObj);
        agentObj.destroy();
        this.removedNpcInfo.setObject(agentObj, agentId);
        this.npcInfo.removeObjectForKey(agentId);
      }
    }
  },
  //shake the screen
  startSceneJitter: function startSceneJitter() {
    var sceneNode = this.node;
    var ox = sceneNode.x;
    var oy = sceneNode.y;
    var cnt = 0;
    var lower = -4;
    var upper = 4;

    var callBack = function callBack() {
      cnt++;
      var randomX = Math.floor(Math.random() * (upper - lower)) + lower;
      var randomY = Math.floor(Math.random() * (upper - lower)) + lower;
      sceneNode.x += randomX;
      sceneNode.y += randomY;

      if (cnt >= 10) {
        sceneNode.stopAllActions();
        sceneNode.x = ox;
        sceneNode.y = oy;
      }
    };

    var node = this.node; //场景常驻节点

    var del = cc.delayTime(1 / 30);
    var cal = cc.callFunc(callBack);
    var seq = cc.sequence(del, cal);
    node.runAction(cc.repeatForever(seq));
  },
  playBases: function playBases(bases) {
    var remoteBases = [];
    var baseObj, myAgent, agent;
    var warriorName;
    var warriorObj;
    var baseName, kingNode, agentNode, kingArrow, warrior;
    var actType, attackDura, now;
    var tmpB = {};
    var eoDead;
    var eo = null;

    for (var i = 0; i < bases.length; i++) {
      agent = bases[i];
      baseName = "base" + agent.objectId;
      attackDura = agent.attackDura;
      myAgent = this.npcInfo.objectForKey(agent.aid).baseObj;
      tmpB[agent.aid] = baseName;
      remoteBases.push(baseName);
      actType = agent.actType;

      if (myAgent) {
        myAgent.getComponent("BaseSprite").setLife(agent.life);
        warrior = myAgent.getChildByName("warrior");

        if (warrior) {
          warrior.role = "lr";
          agentNode = this.getComponentByRole(warrior); //if no enmey then standby

          if (myAgent && agent.actType == "wait") {
            agentNode.playBaseWarriorAnimationDefault("move", agent.objectId);
          } else if (myAgent && agent.actType == "sa") {
            agentNode.playBaseWarriorAnimation(agent, this.mainPlayer, "sa");
          }
        }

        warrior = myAgent.getChildByName("gun");

        if (warrior) {
          warrior.role = "gun";
          agentNode = this.getComponentByRole(warrior); //if no enmey then standby

          if (myAgent && agent.actType == "wait") {//agentNode.playFortWarriorAnimationDefault("move", this.mainPlayer, agent.objectId);
          } else if (myAgent && agent.actType == "sa") {
            agentNode.playBaseWarriorAnimation(agent, this.mainPlayer, "sa");
          }
        }
      }
    }
  },
  playAgents: function playAgents(agents, agentsFuture) {
    var myAgent;
    var px, py, aid;
    var agentNode,
        agent,
        eo = null;
    var eoDead;

    for (var i = 0; i < agents.length; i++) {
      agent = agents[i];
      myAgent = this.npcInfo.objectForKey(agent.aid);

      if (myAgent && myAgent.type == "agent") {
        agentNode = this.getComponentByRole(myAgent);
        agentNode.playAni(agent, this.getFutureAgent(agent.aid, agentsFuture), this.mainPlayer);
        agentNode.setLife(agent.life);
        agentNode.setGroupKill(agent.groupKill);
        px = Math.round(agent.mypos.x * 30);
        py = Math.round(agent.mypos.y * 30);
        agentNode.updatePos(px, py);
      }
    }
  },
  playForts: function playForts(forts) {
    var myAgent;
    var agentNode,
        agent,
        warrior = null;

    for (var i = 0; i < forts.length; i++) {
      agent = forts[i];
      myAgent = this.npcInfo.objectForKey(agent.aid);

      if (!myAgent) {
        continue;
      }

      myAgent.role = "fa";
      agentNode = this.getComponentByRole(myAgent);
      agentNode.setLife(agent.life);
      warrior = myAgent.getChildByName("warrior");
      warrior.role = "lr";
      agentNode = this.getComponentByRole(warrior); //if no enmey then standby

      if (myAgent && agent.actType == "move") {
        agentNode.playFortWarriorAnimationDefault("move", agent.isHero, this.mainPlayer);
      } else if (myAgent && agent.actType == "sa") {
        agentNode.playBaseWarriorAnimation(agent, this.mainPlayer, "sa");
      }
    }
  },
  playLogs: function playLogs(logs) {
    var agent, myAgent;
    var px, py, aid;
    var agentNode,
        bullet,
        eo = null;
    var sc;
    var moveTo;

    for (var i = 0; i < logs.length; i++) {
      agent = logs[i];
      myAgent = this.npcInfo.objectForKey(agent.aid);

      if (myAgent) {
        agentNode = this.getComponentByRole(myAgent);
        agentNode.move(agent.mypos);
      }
    }
  },
  playBullets: function playBullets(bullets) {
    var myBullet;
    var px, py, aid;
    var agentNode,
        bullet,
        eo = null;
    var sc;
    var moveTo, bulletRot;

    for (var i = 0; i < bullets.length; i++) {
      bullet = bullets[i];
      myBullet = this.npcInfo.objectForKey(bullet.aid);

      if (myBullet) {
        myBullet.active = true;
        agentNode = this.getComponentByRole(myBullet);

        if (myBullet.role == "bomb") {
          sc = this.getFireBombScale(bullet.mypos, bullet.targetpos, myBullet.targetDis, myBullet.startPos);
          myBullet.scaleX = sc;
          myBullet.scaleY = sc;
          /*
                              var randomTime = Math.ceil(Math.random()*40)-10;
                              var fh = myBullet.getChildByName("fireHead");
                              //fh.skewY = randomTime;
                              //fh.skewX = randomTime;
          
                              //fire bomb size changing according to the distance between target and origin.
                              sc = this.getFireBombScale(bullet.mypos, bullet.targetpos, myBullet.targetDis, myBullet.startPos);
                              agentNode.node.scaleX=sc;
                              agentNode.node.scaleY=sc;
                              myBullet.getComponent(cc.MotionStreak).stroke *= sc;
          */
        } //2 fort bullet emit the same time, only display the proper bullet.


        if (bullet.updown == "up" && this.mainPlayer == 2) {
          continue;
        }

        if (bullet.updown == "down" && this.mainPlayer == 1) {
          continue;
        }

        px = bullet.mypos.x * 30;
        py = bullet.mypos.y * 30;
        moveTo = cc.v2(px, py);
        bulletRot = bullet.rot;

        if (this.mainPlayer == 1) {
          bulletRot += 180;
        } //1000:agent, 999:this bullet 998:forts;
        //make bullet display under agent which is at same position.


        myBullet.zIndex = 1000 + parseInt(32 - bullet.mypos.y); //if bomb, then shake a little bit;

        if (myBullet.role == "bomb" || myBullet.role == "wizfire") {
          myBullet.zIndex = 9999; //var randomTime = Math.ceil(Math.random()*40)-10;
          //bulletRot += randomTime;
        } //since 2.1.1 setRotation is desperated.


        myBullet.angle = -1 * bulletRot; //myBullet.setRotation(bulletRot);

        myBullet.setPosition(moveTo);
      }
    }
  },
  getFireBombScale: function getFireBombScale(bulletPos, targetPos, targetDis, startPos) {
    var xDif, yDif;
    var midPos = {};
    midPos.x = startPos.x + (targetPos.x - startPos.x) / 2;
    midPos.y = startPos.y + (targetPos.y - startPos.y) / 2;
    var xDif = bulletPos.x - midPos.x;
    var yDif = bulletPos.y - midPos.y;
    var dis = Math.sqrt(xDif * xDif + yDif * yDif);
    var targetDis = targetDis * 0.5;
    return (targetDis - dis) * 0.7 / targetDis + 0.5; //scale from 0.5 -- 1.2
  },
  enemeyDistance: function enemeyDistance(px, py, ex, ey) {
    var xDif, yDif, dis;
    xDif = px - ex;
    yDif = py - ey;
    dis = Math.sqrt(xDif * xDif + yDif * yDif);
    return dis;
  },
  getComponentByRole: function getComponentByRole(agentObj) {
    var role = agentObj.role;

    if (role == "ske") {
      return agentObj.getComponent('SkeSprite');
    } else if (role == "ir") {
      return agentObj.getComponent('SkeSprite');
    } else if (role == "bee") {
      return agentObj.getComponent('BeeSprite');
    } else if (role == "wiz") {
      return agentObj.getComponent('WizSprite');
    } else if (role == "hr") {
      return agentObj.getComponent('HeroSprite');
    } else if (role == "lm") {
      return agentObj.getComponent('LightmanSprite');
    } else if (role == "lr") {
      return agentObj.getComponent('ArcSprite');
    } else if (role == "gi") {
      return agentObj.getComponent('GiantSprite');
    } else if (role == "bullet") {
      return agentObj.getComponent('Arrow');
    } else if (role == "bomb") {
      return agentObj.getComponent('BombScript');
    } else if (role == "log") {
      return agentObj.getComponent('LogSprite');
    } else if (role == "gun") {
      return agentObj.getComponent('GunSprite');
    } else if (role == "base") {
      return agentObj.getComponent('BaseSprite');
    } else if (role == "fa") {
      return agentObj.getComponent('BaseSprite');
    }
  },
  getKilledEnemies: function getKilledEnemies() {
    var aids = this.removedNpcInfo.allKeys();
    var aid;
    var killedEnemies = []; //when one attack cause multi kills occured in one frame, multi enemies must be handled. 

    for (var i = 0; i < aids.length; i++) {
      aid = aids[i];
      killedEnemies.push(this.removedNpcInfo.objectForKey(aid));
    }

    return killedEnemies;
  },
  getFutureAgent: function getFutureAgent(aid, agentsFuture) {
    for (var i = 0; i < agentsFuture.length; i++) {
      if (agentsFuture[i].aid == aid) {
        return agentsFuture[i];
      }
    }

    return null;
  },
  bloodForAgent: function bloodForAgent(agent) {
    var bloodObj = cc.instantiate(this.playerPrefab[11]);
    var bloodOp = bloodObj.getComponent("BloodBar");
    bloodOp.setBarLevel(agent.level);
    bloodObj.active = false;
    agent.addChild(bloodObj);
    return bloodObj;
  },
  shadowForAgent: function shadowForAgent() {
    var shadowObj = cc.instantiate(this.playerPrefab[2]);
    shadowObj.active = false;
    this.node.addChild(shadowObj);
    return shadowObj;
  },
  shadowForLog: function shadowForLog() {
    var shadowObj = cc.instantiate(this.playerPrefab[2]); // 将新增的节点添加到 Canvas 节点下面

    shadowObj.scaleX = 1;
    shadowObj.sacleY = 1;
    shadowObj.active = false;
    this.node.addChild(shadowObj);
    return shadowObj;
  },
  setClickItem: function setClickItem(select) {
    this.clickSele = select;
  },
  putClickItem: function putClickItem(selCard, node, pt) {
    var putNode = cc.instantiate(node);
    var innerId = this.nick + "_" + Number(new Date());
    putNode.x = pt.x;
    putNode.y = pt.y;
    putNode.name = innerId;
    putNode.active = true;
    selCard.addChild(putNode);
    this.putSele[innerId] = putNode;
    return innerId;
  },
  setDragItem: function setDragItem(params, node) {
    var card = params.target;
    var dragNode = cc.instantiate(node);
    var innerId = this.nick + "_" + Number(new Date());
    node.x = 0;
    node.y = 0;
    dragNode.name = innerId;
    dragNode.actvie = true;
    card.addChild(dragNode);
    this.putSele[innerId] = dragNode;
    this.draggingItem = innerId;
    return innerId;
  },
  unsetDragItem: function unsetDragItem(innerId) {
    this.unshowDragMask();
    this.draggingItem = "";
    this.putSele[innerId].destroy();
    this.putSele[innerId] = null;
  },
  moveDragItem: function moveDragItem(sel, delta) {
    if (this.putSele[this.draggingItem]) {
      this.putSele[this.draggingItem].x += delta.x;
      this.putSele[this.draggingItem].y += delta.y;

      if (this.putSele[this.draggingItem].y < 0) {//this.putSele[this.draggingItem].y = 0
      }
    }
  },
  clearDragItem: function clearDragItem(param, select) {
    var innerId;
    var card = param.target;
    var sel = card._name;
    var pt = {};
    var layoutPt = this.node.position;
    var yOffset = 0;
    var magicCost = select.magicCost;
    var level = select.level;
    var role = select.role;
    console.log("role:" + role);
    this.unshowDragMask();

    if (this.mainPlayer == 1) {
      yOffset = -50;
    } else {
      yOffset = 20;
    }

    if (this.putSele[this.draggingItem]) {
      innerId = this.putSele[this.draggingItem].name; //layout maybe scaled according to devices.

      pt.x = (this.putSele[this.draggingItem].x + card.x - layoutPt.x) / this.node.scaleX;
      pt.y = (this.putSele[this.draggingItem].y + card.y - layoutPt.y + yOffset) / this.node.scaleY;

      if (!this.isValidPutPoint(pt) && !this.ifNotMaskRole(role)) {
        console.log("invalid postion.");
        this.putSele[innerId].destroy();
        this.putSele[innerId] = null;
        this.putErrorMsg();
        return;
      }

      this.sendSodier(magicCost, role, pt, innerId, level);
      this.draggingItem = "";
    }
  },
  sendSodier: function sendSodier(magicCost, role, pt, innerId, level) {
    //var innerId = this.nick +"_"+ Number(new Date());
    var isHero = this.mainPlayer == 1;
    var bar = this.canvasNode.getChildByName("magicBar");
    var juice = bar.getChildByName("juice");
    var cost = this.useMagic(magicCost);
    this.playSnd("put1");

    if (cost) {
      juice.width = cost;
      MY_SOCKET.json.emit('cmd', {
        'isHero': isHero,
        'roomId': this.roomId,
        'innerId': innerId,
        'role': role,
        'pt': pt,
        'level': level
      });
    } else {
      this.putSele[innerId].destroy();
      this.putSele[innerId] = null;
    }
  },
  setMagicBar: function setMagicBar() {
    var bar = this.canvasNode.getChildByName("magicBar");
    var juice = bar.getChildByName("juice");

    if (juice.width < 600) {
      juice.width += this.addJuice;
    }

    if (juice.width % 50 == 0) {
      this.magicAmount = juice.width / 50;
      this.updateCardStatus();
    }
  },
  useMagic: function useMagic(amount) {
    var bar = this.canvasNode.getChildByName("magicBar");
    var juice = bar.getChildByName("juice");
    var afterUse = juice.width - amount * 50;

    if (afterUse >= 0) {
      return afterUse;
    }

    return false;
  },
  updateCardStatus: function updateCardStatus() {
    var head = "sel";
    var nodeName, selNode;
    var selSprite = null;

    for (var i = 1; i <= 7; i++) {
      nodeName = head + i;
      selNode = this.canvasNode.getChildByName(nodeName);

      if (selNode) {
        selSprite = selNode.getComponent('SelCard');

        if (selSprite) {
          if (selSprite.magicCost <= this.magicAmount) {
            selNode.color = new cc.Color(255, 255, 255);
          } else {
            selNode.color = new cc.Color(127, 127, 127);
          }
        }
      }
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/acdata1.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '059c9En5zlCdYDuYpxXoxZF', 'acdata1');
// scripts/acdata1.js

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var $protobuf = require("./protobuf.js"); // Common aliases


var $Reader = $protobuf.Reader,
    $Writer = $protobuf.Writer,
    $util = $protobuf.util; // Exported root namespace

var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.AcWar = function () {
  /**
   * Namespace AcWar.
   * @exports AcWar
   * @namespace
   */
  var AcWar = {};

  AcWar.Agent = function () {
    /**
     * Properties of an Agent.
     * @memberof AcWar
     * @interface IAgent
     * @property {string} agentType Agent agentType
     * @property {number} mpx Agent mpx
     * @property {number} mpy Agent mpy
     * @property {number} life Agent life
     * @property {boolean} groupKill Agent groupKill
     * @property {boolean} isHero Agent isHero
     * @property {number} rot Agent rot
     * @property {number} attackDura Agent attackDura
     * @property {string} aid Agent aid
     * @property {string} innerId Agent innerId
     * @property {string} role Agent role
     * @property {number} objectId Agent objectId
     * @property {string} actType Agent actType
     * @property {number} size Agent size
     * @property {number} level Agent level
     * @property {number|null} [epx] Agent epx
     * @property {number|null} [epy] Agent epy
     * @property {string|null} [eid] Agent eid
     * @property {number|null} [esize] Agent esize
     * @property {number|null} [tpx] Agent tpx
     * @property {number|null} [tpy] Agent tpy
     * @property {string|null} [updown] Agent updown
     */

    /**
     * Constructs a new Agent.
     * @memberof AcWar
     * @classdesc Represents an Agent.
     * @implements IAgent
     * @constructor
     * @param {AcWar.IAgent=} [properties] Properties to set
     */
    function Agent(properties) {
      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {
        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
      }
    }
    /**
     * Agent agentType.
     * @member {string} agentType
     * @memberof AcWar.Agent
     * @instance
     */


    Agent.prototype.agentType = "";
    /**
     * Agent mpx.
     * @member {number} mpx
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.mpx = 0;
    /**
     * Agent mpy.
     * @member {number} mpy
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.mpy = 0;
    /**
     * Agent life.
     * @member {number} life
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.life = 0;
    /**
     * Agent groupKill.
     * @member {boolean} groupKill
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.groupKill = false;
    /**
     * Agent isHero.
     * @member {boolean} isHero
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.isHero = false;
    /**
     * Agent rot.
     * @member {number} rot
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.rot = 0;
    /**
     * Agent attackDura.
     * @member {number} attackDura
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.attackDura = 0;
    /**
     * Agent aid.
     * @member {string} aid
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.aid = "";
    /**
     * Agent innerId.
     * @member {string} innerId
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.innerId = "";
    /**
     * Agent role.
     * @member {string} role
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.role = "";
    /**
     * Agent objectId.
     * @member {number} objectId
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.objectId = 0;
    /**
     * Agent actType.
     * @member {string} actType
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.actType = "";
    /**
     * Agent size.
     * @member {number} size
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.size = 0;
    /**
     * Agent level.
     * @member {number} level
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.level = 0;
    /**
     * Agent epx.
     * @member {number} epx
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.epx = 0;
    /**
     * Agent epy.
     * @member {number} epy
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.epy = 0;
    /**
     * Agent eid.
     * @member {string} eid
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.eid = "";
    /**
     * Agent esize.
     * @member {number} esize
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.esize = 0;
    /**
     * Agent tpx.
     * @member {number} tpx
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.tpx = 0;
    /**
     * Agent tpy.
     * @member {number} tpy
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.tpy = 0;
    /**
     * Agent updown.
     * @member {string} updown
     * @memberof AcWar.Agent
     * @instance
     */

    Agent.prototype.updown = "";
    /**
     * Creates a new Agent instance using the specified properties.
     * @function create
     * @memberof AcWar.Agent
     * @static
     * @param {AcWar.IAgent=} [properties] Properties to set
     * @returns {AcWar.Agent} Agent instance
     */

    Agent.create = function create(properties) {
      return new Agent(properties);
    };
    /**
     * Encodes the specified Agent message. Does not implicitly {@link AcWar.Agent.verify|verify} messages.
     * @function encode
     * @memberof AcWar.Agent
     * @static
     * @param {AcWar.IAgent} message Agent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    Agent.encode = function encode(message, writer) {
      if (!writer) writer = $Writer.create();
      writer.uint32(
      /* id 1, wireType 2 =*/
      10).string(message.agentType);
      writer.uint32(
      /* id 2, wireType 5 =*/
      21)["float"](message.mpx);
      writer.uint32(
      /* id 3, wireType 5 =*/
      29)["float"](message.mpy);
      writer.uint32(
      /* id 4, wireType 0 =*/
      32).int32(message.life);
      writer.uint32(
      /* id 5, wireType 0 =*/
      40).bool(message.groupKill);
      writer.uint32(
      /* id 6, wireType 0 =*/
      48).bool(message.isHero);
      writer.uint32(
      /* id 7, wireType 5 =*/
      61)["float"](message.rot);
      writer.uint32(
      /* id 8, wireType 5 =*/
      69)["float"](message.attackDura);
      writer.uint32(
      /* id 9, wireType 2 =*/
      74).string(message.aid);
      writer.uint32(
      /* id 10, wireType 2 =*/
      82).string(message.innerId);
      writer.uint32(
      /* id 11, wireType 2 =*/
      90).string(message.role);
      writer.uint32(
      /* id 12, wireType 0 =*/
      96).int32(message.objectId);
      writer.uint32(
      /* id 13, wireType 2 =*/
      106).string(message.actType);
      writer.uint32(
      /* id 14, wireType 5 =*/
      117)["float"](message.size);
      writer.uint32(
      /* id 15, wireType 0 =*/
      120).int32(message.level);
      if (message.epx != null && Object.hasOwnProperty.call(message, "epx")) writer.uint32(
      /* id 16, wireType 5 =*/
      133)["float"](message.epx);
      if (message.epy != null && Object.hasOwnProperty.call(message, "epy")) writer.uint32(
      /* id 17, wireType 5 =*/
      141)["float"](message.epy);
      if (message.eid != null && Object.hasOwnProperty.call(message, "eid")) writer.uint32(
      /* id 18, wireType 2 =*/
      146).string(message.eid);
      if (message.esize != null && Object.hasOwnProperty.call(message, "esize")) writer.uint32(
      /* id 19, wireType 5 =*/
      157)["float"](message.esize);
      if (message.tpx != null && Object.hasOwnProperty.call(message, "tpx")) writer.uint32(
      /* id 20, wireType 5 =*/
      165)["float"](message.tpx);
      if (message.tpy != null && Object.hasOwnProperty.call(message, "tpy")) writer.uint32(
      /* id 21, wireType 5 =*/
      173)["float"](message.tpy);
      if (message.updown != null && Object.hasOwnProperty.call(message, "updown")) writer.uint32(
      /* id 22, wireType 2 =*/
      178).string(message.updown);
      return writer;
    };
    /**
     * Encodes the specified Agent message, length delimited. Does not implicitly {@link AcWar.Agent.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AcWar.Agent
     * @static
     * @param {AcWar.IAgent} message Agent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    Agent.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    /**
     * Decodes an Agent message from the specified reader or buffer.
     * @function decode
     * @memberof AcWar.Agent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AcWar.Agent} Agent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Agent.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
      var end = length === undefined ? reader.len : reader.pos + length,
          message = new $root.AcWar.Agent();

      while (reader.pos < end) {
        var tag = reader.uint32();

        switch (tag >>> 3) {
          case 1:
            message.agentType = reader.string();
            break;

          case 2:
            message.mpx = reader["float"]();
            break;

          case 3:
            message.mpy = reader["float"]();
            break;

          case 4:
            message.life = reader.int32();
            break;

          case 5:
            message.groupKill = reader.bool();
            break;

          case 6:
            message.isHero = reader.bool();
            break;

          case 7:
            message.rot = reader["float"]();
            break;

          case 8:
            message.attackDura = reader["float"]();
            break;

          case 9:
            message.aid = reader.string();
            break;

          case 10:
            message.innerId = reader.string();
            break;

          case 11:
            message.role = reader.string();
            break;

          case 12:
            message.objectId = reader.int32();
            break;

          case 13:
            message.actType = reader.string();
            break;

          case 14:
            message.size = reader["float"]();
            break;

          case 15:
            message.level = reader.int32();
            break;

          case 16:
            message.epx = reader["float"]();
            break;

          case 17:
            message.epy = reader["float"]();
            break;

          case 18:
            message.eid = reader.string();
            break;

          case 19:
            message.esize = reader["float"]();
            break;

          case 20:
            message.tpx = reader["float"]();
            break;

          case 21:
            message.tpy = reader["float"]();
            break;

          case 22:
            message.updown = reader.string();
            break;

          default:
            reader.skipType(tag & 7);
            break;
        }
      }

      if (!message.hasOwnProperty("agentType")) throw $util.ProtocolError("missing required 'agentType'", {
        instance: message
      });
      if (!message.hasOwnProperty("mpx")) throw $util.ProtocolError("missing required 'mpx'", {
        instance: message
      });
      if (!message.hasOwnProperty("mpy")) throw $util.ProtocolError("missing required 'mpy'", {
        instance: message
      });
      if (!message.hasOwnProperty("life")) throw $util.ProtocolError("missing required 'life'", {
        instance: message
      });
      if (!message.hasOwnProperty("groupKill")) throw $util.ProtocolError("missing required 'groupKill'", {
        instance: message
      });
      if (!message.hasOwnProperty("isHero")) throw $util.ProtocolError("missing required 'isHero'", {
        instance: message
      });
      if (!message.hasOwnProperty("rot")) throw $util.ProtocolError("missing required 'rot'", {
        instance: message
      });
      if (!message.hasOwnProperty("attackDura")) throw $util.ProtocolError("missing required 'attackDura'", {
        instance: message
      });
      if (!message.hasOwnProperty("aid")) throw $util.ProtocolError("missing required 'aid'", {
        instance: message
      });
      if (!message.hasOwnProperty("innerId")) throw $util.ProtocolError("missing required 'innerId'", {
        instance: message
      });
      if (!message.hasOwnProperty("role")) throw $util.ProtocolError("missing required 'role'", {
        instance: message
      });
      if (!message.hasOwnProperty("objectId")) throw $util.ProtocolError("missing required 'objectId'", {
        instance: message
      });
      if (!message.hasOwnProperty("actType")) throw $util.ProtocolError("missing required 'actType'", {
        instance: message
      });
      if (!message.hasOwnProperty("size")) throw $util.ProtocolError("missing required 'size'", {
        instance: message
      });
      if (!message.hasOwnProperty("level")) throw $util.ProtocolError("missing required 'level'", {
        instance: message
      });
      return message;
    };
    /**
     * Decodes an Agent message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AcWar.Agent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AcWar.Agent} Agent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Agent.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader)) reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    /**
     * Verifies an Agent message.
     * @function verify
     * @memberof AcWar.Agent
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */


    Agent.verify = function verify(message) {
      if (_typeof(message) !== "object" || message === null) return "object expected";
      if (!$util.isString(message.agentType)) return "agentType: string expected";
      if (typeof message.mpx !== "number") return "mpx: number expected";
      if (typeof message.mpy !== "number") return "mpy: number expected";
      if (!$util.isInteger(message.life)) return "life: integer expected";
      if (typeof message.groupKill !== "boolean") return "groupKill: boolean expected";
      if (typeof message.isHero !== "boolean") return "isHero: boolean expected";
      if (typeof message.rot !== "number") return "rot: number expected";
      if (typeof message.attackDura !== "number") return "attackDura: number expected";
      if (!$util.isString(message.aid)) return "aid: string expected";
      if (!$util.isString(message.innerId)) return "innerId: string expected";
      if (!$util.isString(message.role)) return "role: string expected";
      if (!$util.isInteger(message.objectId)) return "objectId: integer expected";
      if (!$util.isString(message.actType)) return "actType: string expected";
      if (typeof message.size !== "number") return "size: number expected";
      if (!$util.isInteger(message.level)) return "level: integer expected";
      if (message.epx != null && message.hasOwnProperty("epx")) if (typeof message.epx !== "number") return "epx: number expected";
      if (message.epy != null && message.hasOwnProperty("epy")) if (typeof message.epy !== "number") return "epy: number expected";
      if (message.eid != null && message.hasOwnProperty("eid")) if (!$util.isString(message.eid)) return "eid: string expected";
      if (message.esize != null && message.hasOwnProperty("esize")) if (typeof message.esize !== "number") return "esize: number expected";
      if (message.tpx != null && message.hasOwnProperty("tpx")) if (typeof message.tpx !== "number") return "tpx: number expected";
      if (message.tpy != null && message.hasOwnProperty("tpy")) if (typeof message.tpy !== "number") return "tpy: number expected";
      if (message.updown != null && message.hasOwnProperty("updown")) if (!$util.isString(message.updown)) return "updown: string expected";
      return null;
    };
    /**
     * Creates an Agent message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AcWar.Agent
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AcWar.Agent} Agent
     */


    Agent.fromObject = function fromObject(object) {
      if (object instanceof $root.AcWar.Agent) return object;
      var message = new $root.AcWar.Agent();
      if (object.agentType != null) message.agentType = String(object.agentType);
      if (object.mpx != null) message.mpx = Number(object.mpx);
      if (object.mpy != null) message.mpy = Number(object.mpy);
      if (object.life != null) message.life = object.life | 0;
      if (object.groupKill != null) message.groupKill = Boolean(object.groupKill);
      if (object.isHero != null) message.isHero = Boolean(object.isHero);
      if (object.rot != null) message.rot = Number(object.rot);
      if (object.attackDura != null) message.attackDura = Number(object.attackDura);
      if (object.aid != null) message.aid = String(object.aid);
      if (object.innerId != null) message.innerId = String(object.innerId);
      if (object.role != null) message.role = String(object.role);
      if (object.objectId != null) message.objectId = object.objectId | 0;
      if (object.actType != null) message.actType = String(object.actType);
      if (object.size != null) message.size = Number(object.size);
      if (object.level != null) message.level = object.level | 0;
      if (object.epx != null) message.epx = Number(object.epx);
      if (object.epy != null) message.epy = Number(object.epy);
      if (object.eid != null) message.eid = String(object.eid);
      if (object.esize != null) message.esize = Number(object.esize);
      if (object.tpx != null) message.tpx = Number(object.tpx);
      if (object.tpy != null) message.tpy = Number(object.tpy);
      if (object.updown != null) message.updown = String(object.updown);
      return message;
    };
    /**
     * Creates a plain object from an Agent message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AcWar.Agent
     * @static
     * @param {AcWar.Agent} message Agent
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Agent.toObject = function toObject(message, options) {
      if (!options) options = {};
      var object = {};

      if (options.defaults) {
        object.agentType = "";
        object.mpx = 0;
        object.mpy = 0;
        object.life = 0;
        object.groupKill = false;
        object.isHero = false;
        object.rot = 0;
        object.attackDura = 0;
        object.aid = "";
        object.innerId = "";
        object.role = "";
        object.objectId = 0;
        object.actType = "";
        object.size = 0;
        object.level = 0;
        object.epx = 0;
        object.epy = 0;
        object.eid = "";
        object.esize = 0;
        object.tpx = 0;
        object.tpy = 0;
        object.updown = "";
      }

      if (message.agentType != null && message.hasOwnProperty("agentType")) object.agentType = message.agentType;
      if (message.mpx != null && message.hasOwnProperty("mpx")) object.mpx = options.json && !isFinite(message.mpx) ? String(message.mpx) : message.mpx;
      if (message.mpy != null && message.hasOwnProperty("mpy")) object.mpy = options.json && !isFinite(message.mpy) ? String(message.mpy) : message.mpy;
      if (message.life != null && message.hasOwnProperty("life")) object.life = message.life;
      if (message.groupKill != null && message.hasOwnProperty("groupKill")) object.groupKill = message.groupKill;
      if (message.isHero != null && message.hasOwnProperty("isHero")) object.isHero = message.isHero;
      if (message.rot != null && message.hasOwnProperty("rot")) object.rot = options.json && !isFinite(message.rot) ? String(message.rot) : message.rot;
      if (message.attackDura != null && message.hasOwnProperty("attackDura")) object.attackDura = options.json && !isFinite(message.attackDura) ? String(message.attackDura) : message.attackDura;
      if (message.aid != null && message.hasOwnProperty("aid")) object.aid = message.aid;
      if (message.innerId != null && message.hasOwnProperty("innerId")) object.innerId = message.innerId;
      if (message.role != null && message.hasOwnProperty("role")) object.role = message.role;
      if (message.objectId != null && message.hasOwnProperty("objectId")) object.objectId = message.objectId;
      if (message.actType != null && message.hasOwnProperty("actType")) object.actType = message.actType;
      if (message.size != null && message.hasOwnProperty("size")) object.size = options.json && !isFinite(message.size) ? String(message.size) : message.size;
      if (message.level != null && message.hasOwnProperty("level")) object.level = message.level;
      if (message.epx != null && message.hasOwnProperty("epx")) object.epx = options.json && !isFinite(message.epx) ? String(message.epx) : message.epx;
      if (message.epy != null && message.hasOwnProperty("epy")) object.epy = options.json && !isFinite(message.epy) ? String(message.epy) : message.epy;
      if (message.eid != null && message.hasOwnProperty("eid")) object.eid = message.eid;
      if (message.esize != null && message.hasOwnProperty("esize")) object.esize = options.json && !isFinite(message.esize) ? String(message.esize) : message.esize;
      if (message.tpx != null && message.hasOwnProperty("tpx")) object.tpx = options.json && !isFinite(message.tpx) ? String(message.tpx) : message.tpx;
      if (message.tpy != null && message.hasOwnProperty("tpy")) object.tpy = options.json && !isFinite(message.tpy) ? String(message.tpy) : message.tpy;
      if (message.updown != null && message.hasOwnProperty("updown")) object.updown = message.updown;
      return object;
    };
    /**
     * Converts this Agent to JSON.
     * @function toJSON
     * @memberof AcWar.Agent
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Agent.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Agent;
  }();

  AcWar.Info = function () {
    /**
     * Properties of an Info.
     * @memberof AcWar
     * @interface IInfo
     * @property {Array.<AcWar.IAgent>|null} [base] Info base
     * @property {Array.<AcWar.IAgent>|null} [fort] Info fort
     * @property {Array.<AcWar.IAgent>|null} [agent] Info agent
     * @property {Array.<AcWar.IAgent>|null} [bullet] Info bullet
     * @property {Array.<AcWar.IAgent>|null} [rollLog] Info rollLog
     */

    /**
     * Constructs a new Info.
     * @memberof AcWar
     * @classdesc Represents an Info.
     * @implements IInfo
     * @constructor
     * @param {AcWar.IInfo=} [properties] Properties to set
     */
    function Info(properties) {
      this.base = [];
      this.fort = [];
      this.agent = [];
      this.bullet = [];
      this.rollLog = [];
      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {
        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
      }
    }
    /**
     * Info base.
     * @member {Array.<AcWar.IAgent>} base
     * @memberof AcWar.Info
     * @instance
     */


    Info.prototype.base = $util.emptyArray;
    /**
     * Info fort.
     * @member {Array.<AcWar.IAgent>} fort
     * @memberof AcWar.Info
     * @instance
     */

    Info.prototype.fort = $util.emptyArray;
    /**
     * Info agent.
     * @member {Array.<AcWar.IAgent>} agent
     * @memberof AcWar.Info
     * @instance
     */

    Info.prototype.agent = $util.emptyArray;
    /**
     * Info bullet.
     * @member {Array.<AcWar.IAgent>} bullet
     * @memberof AcWar.Info
     * @instance
     */

    Info.prototype.bullet = $util.emptyArray;
    /**
     * Info rollLog.
     * @member {Array.<AcWar.IAgent>} rollLog
     * @memberof AcWar.Info
     * @instance
     */

    Info.prototype.rollLog = $util.emptyArray;
    /**
     * Creates a new Info instance using the specified properties.
     * @function create
     * @memberof AcWar.Info
     * @static
     * @param {AcWar.IInfo=} [properties] Properties to set
     * @returns {AcWar.Info} Info instance
     */

    Info.create = function create(properties) {
      return new Info(properties);
    };
    /**
     * Encodes the specified Info message. Does not implicitly {@link AcWar.Info.verify|verify} messages.
     * @function encode
     * @memberof AcWar.Info
     * @static
     * @param {AcWar.IInfo} message Info message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    Info.encode = function encode(message, writer) {
      if (!writer) writer = $Writer.create();
      if (message.base != null && message.base.length) for (var i = 0; i < message.base.length; ++i) {
        $root.AcWar.Agent.encode(message.base[i], writer.uint32(
        /* id 1, wireType 2 =*/
        10).fork()).ldelim();
      }
      if (message.fort != null && message.fort.length) for (var i = 0; i < message.fort.length; ++i) {
        $root.AcWar.Agent.encode(message.fort[i], writer.uint32(
        /* id 2, wireType 2 =*/
        18).fork()).ldelim();
      }
      if (message.agent != null && message.agent.length) for (var i = 0; i < message.agent.length; ++i) {
        $root.AcWar.Agent.encode(message.agent[i], writer.uint32(
        /* id 3, wireType 2 =*/
        26).fork()).ldelim();
      }
      if (message.bullet != null && message.bullet.length) for (var i = 0; i < message.bullet.length; ++i) {
        $root.AcWar.Agent.encode(message.bullet[i], writer.uint32(
        /* id 4, wireType 2 =*/
        34).fork()).ldelim();
      }
      if (message.rollLog != null && message.rollLog.length) for (var i = 0; i < message.rollLog.length; ++i) {
        $root.AcWar.Agent.encode(message.rollLog[i], writer.uint32(
        /* id 5, wireType 2 =*/
        42).fork()).ldelim();
      }
      return writer;
    };
    /**
     * Encodes the specified Info message, length delimited. Does not implicitly {@link AcWar.Info.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AcWar.Info
     * @static
     * @param {AcWar.IInfo} message Info message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    Info.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    /**
     * Decodes an Info message from the specified reader or buffer.
     * @function decode
     * @memberof AcWar.Info
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AcWar.Info} Info
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Info.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
      var end = length === undefined ? reader.len : reader.pos + length,
          message = new $root.AcWar.Info();

      while (reader.pos < end) {
        var tag = reader.uint32();

        switch (tag >>> 3) {
          case 1:
            if (!(message.base && message.base.length)) message.base = [];
            message.base.push($root.AcWar.Agent.decode(reader, reader.uint32()));
            break;

          case 2:
            if (!(message.fort && message.fort.length)) message.fort = [];
            message.fort.push($root.AcWar.Agent.decode(reader, reader.uint32()));
            break;

          case 3:
            if (!(message.agent && message.agent.length)) message.agent = [];
            message.agent.push($root.AcWar.Agent.decode(reader, reader.uint32()));
            break;

          case 4:
            if (!(message.bullet && message.bullet.length)) message.bullet = [];
            message.bullet.push($root.AcWar.Agent.decode(reader, reader.uint32()));
            break;

          case 5:
            if (!(message.rollLog && message.rollLog.length)) message.rollLog = [];
            message.rollLog.push($root.AcWar.Agent.decode(reader, reader.uint32()));
            break;

          default:
            reader.skipType(tag & 7);
            break;
        }
      }

      return message;
    };
    /**
     * Decodes an Info message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AcWar.Info
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AcWar.Info} Info
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Info.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader)) reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    /**
     * Verifies an Info message.
     * @function verify
     * @memberof AcWar.Info
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */


    Info.verify = function verify(message) {
      if (_typeof(message) !== "object" || message === null) return "object expected";

      if (message.base != null && message.hasOwnProperty("base")) {
        if (!Array.isArray(message.base)) return "base: array expected";

        for (var i = 0; i < message.base.length; ++i) {
          var error = $root.AcWar.Agent.verify(message.base[i]);
          if (error) return "base." + error;
        }
      }

      if (message.fort != null && message.hasOwnProperty("fort")) {
        if (!Array.isArray(message.fort)) return "fort: array expected";

        for (var i = 0; i < message.fort.length; ++i) {
          var error = $root.AcWar.Agent.verify(message.fort[i]);
          if (error) return "fort." + error;
        }
      }

      if (message.agent != null && message.hasOwnProperty("agent")) {
        if (!Array.isArray(message.agent)) return "agent: array expected";

        for (var i = 0; i < message.agent.length; ++i) {
          var error = $root.AcWar.Agent.verify(message.agent[i]);
          if (error) return "agent." + error;
        }
      }

      if (message.bullet != null && message.hasOwnProperty("bullet")) {
        if (!Array.isArray(message.bullet)) return "bullet: array expected";

        for (var i = 0; i < message.bullet.length; ++i) {
          var error = $root.AcWar.Agent.verify(message.bullet[i]);
          if (error) return "bullet." + error;
        }
      }

      if (message.rollLog != null && message.hasOwnProperty("rollLog")) {
        if (!Array.isArray(message.rollLog)) return "rollLog: array expected";

        for (var i = 0; i < message.rollLog.length; ++i) {
          var error = $root.AcWar.Agent.verify(message.rollLog[i]);
          if (error) return "rollLog." + error;
        }
      }

      return null;
    };
    /**
     * Creates an Info message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AcWar.Info
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AcWar.Info} Info
     */


    Info.fromObject = function fromObject(object) {
      if (object instanceof $root.AcWar.Info) return object;
      var message = new $root.AcWar.Info();

      if (object.base) {
        if (!Array.isArray(object.base)) throw TypeError(".AcWar.Info.base: array expected");
        message.base = [];

        for (var i = 0; i < object.base.length; ++i) {
          if (_typeof(object.base[i]) !== "object") throw TypeError(".AcWar.Info.base: object expected");
          message.base[i] = $root.AcWar.Agent.fromObject(object.base[i]);
        }
      }

      if (object.fort) {
        if (!Array.isArray(object.fort)) throw TypeError(".AcWar.Info.fort: array expected");
        message.fort = [];

        for (var i = 0; i < object.fort.length; ++i) {
          if (_typeof(object.fort[i]) !== "object") throw TypeError(".AcWar.Info.fort: object expected");
          message.fort[i] = $root.AcWar.Agent.fromObject(object.fort[i]);
        }
      }

      if (object.agent) {
        if (!Array.isArray(object.agent)) throw TypeError(".AcWar.Info.agent: array expected");
        message.agent = [];

        for (var i = 0; i < object.agent.length; ++i) {
          if (_typeof(object.agent[i]) !== "object") throw TypeError(".AcWar.Info.agent: object expected");
          message.agent[i] = $root.AcWar.Agent.fromObject(object.agent[i]);
        }
      }

      if (object.bullet) {
        if (!Array.isArray(object.bullet)) throw TypeError(".AcWar.Info.bullet: array expected");
        message.bullet = [];

        for (var i = 0; i < object.bullet.length; ++i) {
          if (_typeof(object.bullet[i]) !== "object") throw TypeError(".AcWar.Info.bullet: object expected");
          message.bullet[i] = $root.AcWar.Agent.fromObject(object.bullet[i]);
        }
      }

      if (object.rollLog) {
        if (!Array.isArray(object.rollLog)) throw TypeError(".AcWar.Info.rollLog: array expected");
        message.rollLog = [];

        for (var i = 0; i < object.rollLog.length; ++i) {
          if (_typeof(object.rollLog[i]) !== "object") throw TypeError(".AcWar.Info.rollLog: object expected");
          message.rollLog[i] = $root.AcWar.Agent.fromObject(object.rollLog[i]);
        }
      }

      return message;
    };
    /**
     * Creates a plain object from an Info message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AcWar.Info
     * @static
     * @param {AcWar.Info} message Info
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Info.toObject = function toObject(message, options) {
      if (!options) options = {};
      var object = {};

      if (options.arrays || options.defaults) {
        object.base = [];
        object.fort = [];
        object.agent = [];
        object.bullet = [];
        object.rollLog = [];
      }

      if (message.base && message.base.length) {
        object.base = [];

        for (var j = 0; j < message.base.length; ++j) {
          object.base[j] = $root.AcWar.Agent.toObject(message.base[j], options);
        }
      }

      if (message.fort && message.fort.length) {
        object.fort = [];

        for (var j = 0; j < message.fort.length; ++j) {
          object.fort[j] = $root.AcWar.Agent.toObject(message.fort[j], options);
        }
      }

      if (message.agent && message.agent.length) {
        object.agent = [];

        for (var j = 0; j < message.agent.length; ++j) {
          object.agent[j] = $root.AcWar.Agent.toObject(message.agent[j], options);
        }
      }

      if (message.bullet && message.bullet.length) {
        object.bullet = [];

        for (var j = 0; j < message.bullet.length; ++j) {
          object.bullet[j] = $root.AcWar.Agent.toObject(message.bullet[j], options);
        }
      }

      if (message.rollLog && message.rollLog.length) {
        object.rollLog = [];

        for (var j = 0; j < message.rollLog.length; ++j) {
          object.rollLog[j] = $root.AcWar.Agent.toObject(message.rollLog[j], options);
        }
      }

      return object;
    };
    /**
     * Converts this Info to JSON.
     * @function toJSON
     * @memberof AcWar.Info
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Info.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Info;
  }();

  return AcWar;
}();

module.exports = $root;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/protobuf.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f28ba3pGVlLR6xnGfV2Gugq', 'protobuf');
// scripts/protobuf.js

"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * protobuf.js v6.8.6 (c) 2016, daniel wirtz
 * compiled mon, 26 feb 2018 11:35:34 utc
 * licensed under the bsd-3-clause license
 * see: https://github.com/dcodeio/protobuf.js for details
 */
(function (global, undefined) {
  "use strict";

  (function prelude(modules, cache, entries) {
    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS
    // sources through a conflict-free require shim and is again wrapped within an iife that
    // provides a unified `global` and a minification-friendly `undefined` var plus a global
    // "use strict" directive so that minification can remove the directives of each module.
    function $require(name) {
      var $module = cache[name];
      if (!$module) modules[name][0].call($module = cache[name] = {
        exports: {}
      }, $require, $module, $module.exports);
      return $module.exports;
    } // Expose globally


    var protobuf = global.protobuf = $require(entries[0]); // Be nice to AMD

    if (typeof define === "function" && define.amd) define(["long"], function (Long) {
      if (Long && Long.isLong) {
        protobuf.util.Long = Long;
        protobuf.configure();
      }

      return protobuf;
    }); // Be nice to CommonJS

    if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module && module.exports) module.exports = protobuf;
  })(
  /* end of prelude */
  {
    1: [function (require, module, exports) {
      "use strict";

      module.exports = asPromise;
      /**
       * Callback as used by {@link util.asPromise}.
       * @typedef asPromiseCallback
       * @type {function}
       * @param {Error|null} error Error, if any
       * @param {...*} params Additional arguments
       * @returns {undefined}
       */

      /**
       * Returns a promise from a node-style callback function.
       * @memberof util
       * @param {asPromiseCallback} fn Function to call
       * @param {*} ctx Function context
       * @param {...*} params Function arguments
       * @returns {Promise<*>} Promisified function
       */

      function asPromise(fn, ctx
      /*, varargs */
      ) {
        var params = new Array(arguments.length - 1),
            offset = 0,
            index = 2,
            pending = true;

        while (index < arguments.length) {
          params[offset++] = arguments[index++];
        }

        return new Promise(function executor(resolve, reject) {
          params[offset] = function callback(err
          /*, varargs */
          ) {
            if (pending) {
              pending = false;
              if (err) reject(err);else {
                var params = new Array(arguments.length - 1),
                    offset = 0;

                while (offset < params.length) {
                  params[offset++] = arguments[offset];
                }

                resolve.apply(null, params);
              }
            }
          };

          try {
            fn.apply(ctx || null, params);
          } catch (err) {
            if (pending) {
              pending = false;
              reject(err);
            }
          }
        });
      }
    }, {}],
    2: [function (require, module, exports) {
      "use strict";
      /**
       * A minimal base64 implementation for number arrays.
       * @memberof util
       * @namespace
       */

      var base64 = exports;
      /**
       * Calculates the byte length of a base64 encoded string.
       * @param {string} string Base64 encoded string
       * @returns {number} Byte length
       */

      base64.length = function length(string) {
        var p = string.length;
        if (!p) return 0;
        var n = 0;

        while (--p % 4 > 1 && string.charAt(p) === "=") {
          ++n;
        }

        return Math.ceil(string.length * 3) / 4 - n;
      }; // Base64 encoding table


      var b64 = new Array(64); // Base64 decoding table

      var s64 = new Array(123); // 65..90, 97..122, 48..57, 43, 47

      for (var i = 0; i < 64;) {
        s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
      }
      /**
       * Encodes a buffer to a base64 encoded string.
       * @param {Uint8Array} buffer Source buffer
       * @param {number} start Source start
       * @param {number} end Source end
       * @returns {string} Base64 encoded string
       */


      base64.encode = function encode(buffer, start, end) {
        var parts = null,
            chunk = [];
        var i = 0,
            // output index
        j = 0,
            // goto index
        t; // temporary

        while (start < end) {
          var b = buffer[start++];

          switch (j) {
            case 0:
              chunk[i++] = b64[b >> 2];
              t = (b & 3) << 4;
              j = 1;
              break;

            case 1:
              chunk[i++] = b64[t | b >> 4];
              t = (b & 15) << 2;
              j = 2;
              break;

            case 2:
              chunk[i++] = b64[t | b >> 6];
              chunk[i++] = b64[b & 63];
              j = 0;
              break;
          }

          if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
          }
        }

        if (j) {
          chunk[i++] = b64[t];
          chunk[i++] = 61;
          if (j === 1) chunk[i++] = 61;
        }

        if (parts) {
          if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
          return parts.join("");
        }

        return String.fromCharCode.apply(String, chunk.slice(0, i));
      };

      var invalidEncoding = "invalid encoding";
      /**
       * Decodes a base64 encoded string to a buffer.
       * @param {string} string Source string
       * @param {Uint8Array} buffer Destination buffer
       * @param {number} offset Destination offset
       * @returns {number} Number of bytes written
       * @throws {Error} If encoding is invalid
       */

      base64.decode = function decode(string, buffer, offset) {
        var start = offset;
        var j = 0,
            // goto index
        t; // temporary

        for (var i = 0; i < string.length;) {
          var c = string.charCodeAt(i++);
          if (c === 61 && j > 1) break;
          if ((c = s64[c]) === undefined) throw Error(invalidEncoding);

          switch (j) {
            case 0:
              t = c;
              j = 1;
              break;

            case 1:
              buffer[offset++] = t << 2 | (c & 48) >> 4;
              t = c;
              j = 2;
              break;

            case 2:
              buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
              t = c;
              j = 3;
              break;

            case 3:
              buffer[offset++] = (t & 3) << 6 | c;
              j = 0;
              break;
          }
        }

        if (j === 1) throw Error(invalidEncoding);
        return offset - start;
      };
      /**
       * Tests if the specified string appears to be base64 encoded.
       * @param {string} string String to test
       * @returns {boolean} `true` if probably base64 encoded, otherwise false
       */


      base64.test = function test(string) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
      };
    }, {}],
    3: [function (require, module, exports) {
      "use strict";

      module.exports = codegen;
      /**
       * Begins generating a function.
       * @memberof util
       * @param {string[]} functionParams Function parameter names
       * @param {string} [functionName] Function name if not anonymous
       * @returns {Codegen} Appender that appends code to the function's body
       */

      function codegen(functionParams, functionName) {
        /* istanbul ignore if */
        if (typeof functionParams === "string") {
          functionName = functionParams;
          functionParams = undefined;
        }

        var body = [];
        /**
         * Appends code to the function's body or finishes generation.
         * @typedef Codegen
         * @type {function}
         * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
         * @param {...*} [formatParams] Format parameters
         * @returns {Codegen|Function} Itself or the generated function if finished
         * @throws {Error} If format parameter counts do not match
         */

        function Codegen(formatStringOrScope) {
          // note that explicit array handling below makes this ~50% faster
          // finish the function
          if (typeof formatStringOrScope !== "string") {
            var source = toString();
            if (codegen.verbose) console.log("codegen: " + source); // eslint-disable-line no-console

            source = "return " + source;

            if (formatStringOrScope) {
              var scopeKeys = Object.keys(formatStringOrScope),
                  scopeParams = new Array(scopeKeys.length + 1),
                  scopeValues = new Array(scopeKeys.length),
                  scopeOffset = 0;

              while (scopeOffset < scopeKeys.length) {
                scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
              }

              scopeParams[scopeOffset] = source;
              return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
            }

            return Function(source)(); // eslint-disable-line no-new-func
          } // otherwise append to body


          var formatParams = new Array(arguments.length - 1),
              formatOffset = 0;

          while (formatOffset < formatParams.length) {
            formatParams[formatOffset] = arguments[++formatOffset];
          }

          formatOffset = 0;
          formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
            var value = formatParams[formatOffset++];

            switch ($1) {
              case "d":
              case "f":
                return String(Number(value));

              case "i":
                return String(Math.floor(value));

              case "j":
                return JSON.stringify(value);

              case "s":
                return String(value);
            }

            return "%";
          });
          if (formatOffset !== formatParams.length) throw Error("parameter count mismatch");
          body.push(formatStringOrScope);
          return Codegen;
        }

        function toString(functionNameOverride) {
          return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
        }

        Codegen.toString = toString;
        return Codegen;
      }
      /**
       * Begins generating a function.
       * @memberof util
       * @function codegen
       * @param {string} [functionName] Function name if not anonymous
       * @returns {Codegen} Appender that appends code to the function's body
       * @variation 2
       */

      /**
       * When set to `true`, codegen will log generated code to console. Useful for debugging.
       * @name util.codegen.verbose
       * @type {boolean}
       */


      codegen.verbose = false;
    }, {}],
    4: [function (require, module, exports) {
      "use strict";

      module.exports = EventEmitter;
      /**
       * Constructs a new event emitter instance.
       * @classdesc A minimal event emitter.
       * @memberof util
       * @constructor
       */

      function EventEmitter() {
        /**
         * Registered listeners.
         * @type {Object.<string,*>}
         * @private
         */
        this._listeners = {};
      }
      /**
       * Registers an event listener.
       * @param {string} evt Event name
       * @param {function} fn Listener
       * @param {*} [ctx] Listener context
       * @returns {util.EventEmitter} `this`
       */


      EventEmitter.prototype.on = function on(evt, fn, ctx) {
        (this._listeners[evt] || (this._listeners[evt] = [])).push({
          fn: fn,
          ctx: ctx || this
        });
        return this;
      };
      /**
       * Removes an event listener or any matching listeners if arguments are omitted.
       * @param {string} [evt] Event name. Removes all listeners if omitted.
       * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
       * @returns {util.EventEmitter} `this`
       */


      EventEmitter.prototype.off = function off(evt, fn) {
        if (evt === undefined) this._listeners = {};else {
          if (fn === undefined) this._listeners[evt] = [];else {
            var listeners = this._listeners[evt];

            for (var i = 0; i < listeners.length;) {
              if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;
            }
          }
        }
        return this;
      };
      /**
       * Emits an event by calling its listeners with the specified arguments.
       * @param {string} evt Event name
       * @param {...*} args Arguments
       * @returns {util.EventEmitter} `this`
       */


      EventEmitter.prototype.emit = function emit(evt) {
        var listeners = this._listeners[evt];

        if (listeners) {
          var args = [],
              i = 1;

          for (; i < arguments.length;) {
            args.push(arguments[i++]);
          }

          for (i = 0; i < listeners.length;) {
            listeners[i].fn.apply(listeners[i++].ctx, args);
          }
        }

        return this;
      };
    }, {}],
    5: [function (require, module, exports) {
      "use strict";

      module.exports = fetch;

      var asPromise = require(1),
          inquire = require(7);

      var fs = inquire("fs");
      /**
       * Node-style callback as used by {@link util.fetch}.
       * @typedef FetchCallback
       * @type {function}
       * @param {?Error} error Error, if any, otherwise `null`
       * @param {string} [contents] File contents, if there hasn't been an error
       * @returns {undefined}
       */

      /**
       * Options as used by {@link util.fetch}.
       * @typedef FetchOptions
       * @type {Object}
       * @property {boolean} [binary=false] Whether expecting a binary response
       * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
       */

      /**
       * Fetches the contents of a file.
       * @memberof util
       * @param {string} filename File path or url
       * @param {FetchOptions} options Fetch options
       * @param {FetchCallback} callback Callback function
       * @returns {undefined}
       */

      function fetch(filename, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        } else if (!options) options = {};

        if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this
        // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.

        if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
        }); // use the XHR version otherwise.

        return fetch.xhr(filename, options, callback);
      }

      function fetch1(filename, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        } else if (!options) options = {};

        if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

        if (typeof cc !== "undefined") {
          //判断是否是cocos项目
          if (cc.sys.isNative) {
            //native
            var content = jsb.fileUtils.getStringFromFile(filename); //对于一些新版的creator(作者creator2.3.2)来说，他会把资源混淆在不同的目录下，所以这里是没办法找到该文件的,直接使用cc.loader的loadRes方法尝试加载一次。

            if (content === "") {
              cc.loader.loadRes(filename, cc.TextAsset, function (error, result) {
                cc.log("error1=" + error + ",result = " + result + ",type=" + _typeof(result));

                if (error) {
                  callback(Error("status " + error));
                } else {
                  //callback(null, result);//creator1.9及以下版本使用此行
                  callback(null, result.text); //新版creator可放心运行
                }
              });
            } else {
              callback(content === "" ? Error(filename + " not exits") : null, content);
            }
          } else {
            //cc.log("cc.loader load 1 filename=" + filename);
            //这里可以加载一个url图片 : "Host"+filename
            // cc.loader.load(filename, function (error, result) {
            //     cc.log("error1=" + error + ",result = " + result + ",type=" + typeof result);
            //     // callback(null, result);
            // });
            //cc.log("cc.loader load 2");
            // 这里h5会去加载resources目录下的文件 : "resources/"+ filename
            // 这里filename一般不用指定扩展名,当然你也可以强制指定
            cc.loader.loadRes(filename, cc.TextAsset, function (error, result) {
              //cc.log("error2=" + error + ",result = " + result + ",type=" + typeof result);
              if (error) {
                callback(Error("status " + error));
              } else {
                //callback(null, result);//creator1.9及以下版本使用此行
                callback(null, result.text); //新版creator可放心运行
              }
            }); //cc.log("cc.loader load 3");
          }

          return;
        } // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.


        if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
        }); // use the XHR version otherwise.

        return fetch.xhr(filename, options, callback);
      }
      /**
       * Fetches the contents of a file.
       * @name util.fetch
       * @function
       * @param {string} path File path or url
       * @param {FetchCallback} callback Callback function
       * @returns {undefined}
       * @variation 2
       */

      /**
       * Fetches the contents of a file.
       * @name util.fetch
       * @function
       * @param {string} path File path or url
       * @param {FetchOptions} [options] Fetch options
       * @returns {Promise<string|Uint8Array>} Promise
       * @variation 3
       */

      /**/


      fetch.xhr = function fetch_xhr(filename, options, callback) {
        var xhr = new XMLHttpRequest();

        xhr.onreadystatechange
        /* works everywhere */
        = function fetchOnReadyStateChange() {
          if (xhr.readyState !== 4) return undefined; // local cors security errors return status 0 / empty string, too. afaik this cannot be
          // reliably distinguished from an actually empty file for security reasons. feel free
          // to send a pull request if you are aware of a solution.

          if (xhr.status !== 0 && xhr.status !== 200) return callback(Error("status " + xhr.status)); // if binary data is expected, make sure that some sort of array is returned, even if
          // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.

          if (options.binary) {
            var buffer = xhr.response;

            if (!buffer) {
              buffer = [];

              for (var i = 0; i < xhr.responseText.length; ++i) {
                buffer.push(xhr.responseText.charCodeAt(i) & 255);
              }
            }

            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
          }

          return callback(null, xhr.responseText);
        };

        if (options.binary) {
          // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
          if ("overrideMimeType" in xhr) xhr.overrideMimeType("text/plain; charset=x-user-defined");
          xhr.responseType = "arraybuffer";
        }

        xhr.open("GET", filename);
        xhr.send();
      };
    }, {
      "1": 1,
      "7": 7
    }],
    6: [function (require, module, exports) {
      "use strict";

      module.exports = factory(factory);
      /**
       * Reads / writes floats / doubles from / to buffers.
       * @name util.float
       * @namespace
       */

      /**
       * Writes a 32 bit float to a buffer using little endian byte order.
       * @name util.float.writeFloatLE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Writes a 32 bit float to a buffer using big endian byte order.
       * @name util.float.writeFloatBE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Reads a 32 bit float from a buffer using little endian byte order.
       * @name util.float.readFloatLE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */

      /**
       * Reads a 32 bit float from a buffer using big endian byte order.
       * @name util.float.readFloatBE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */

      /**
       * Writes a 64 bit double to a buffer using little endian byte order.
       * @name util.float.writeDoubleLE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Writes a 64 bit double to a buffer using big endian byte order.
       * @name util.float.writeDoubleBE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Reads a 64 bit double from a buffer using little endian byte order.
       * @name util.float.readDoubleLE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */

      /**
       * Reads a 64 bit double from a buffer using big endian byte order.
       * @name util.float.readDoubleBE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */
      // Factory function for the purpose of node-based testing in modified global environments

      function factory(exports) {
        // float: typed array
        if (typeof Float32Array !== "undefined") (function () {
          var f32 = new Float32Array([-0]),
              f8b = new Uint8Array(f32.buffer),
              le = f8b[3] === 128;

          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }

          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          /* istanbul ignore next */


          exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          /* istanbul ignore next */

          exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }

          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          /* istanbul ignore next */


          exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          /* istanbul ignore next */

          exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy; // float: ieee754
        })();else (function () {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) writeUint(1 / val > 0 ?
            /* positive */
            0 :
            /* negative 0 */
            2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38) // +-Infinity
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38) // denormal
              writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {
              var exponent = Math.floor(Math.log(val) / Math.LN2),
                  mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }

          exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
            ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }

          exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })(); // double: typed array

        if (typeof Float64Array !== "undefined") (function () {
          var f64 = new Float64Array([-0]),
              f8b = new Uint8Array(f64.buffer),
              le = f8b[7] === 128;

          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }

          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          /* istanbul ignore next */


          exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          /* istanbul ignore next */

          exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }

          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          /* istanbul ignore next */


          exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          /* istanbul ignore next */

          exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy; // double: ieee754
        })();else (function () {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;

            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ?
              /* positive */
              0 :
              /* negative 0 */
              2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) {
              // +-Infinity
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;

              if (val < 2.2250738585072014e-308) {
                // denormal
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024) exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }

          exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
            ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }

          exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
        return exports;
      } // uint helpers


      function writeUintLE(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }

      function writeUintBE(val, buf, pos) {
        buf[pos] = val >>> 24;
        buf[pos + 1] = val >>> 16 & 255;
        buf[pos + 2] = val >>> 8 & 255;
        buf[pos + 3] = val & 255;
      }

      function readUintLE(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
      }

      function readUintBE(buf, pos) {
        return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
      }
    }, {}],
    7: [function (require, module, exports) {
      "use strict";

      module.exports = inquire;
      /**
       * Requires a module only if available.
       * @memberof util
       * @param {string} moduleName Module to require
       * @returns {?Object} Required module if available and not empty, otherwise `null`
       */

      function inquire(moduleName) {
        try {
          var mod = eval("quire".replace(/^/, "re"))(moduleName); // eslint-disable-line no-eval

          if (mod && (mod.length || Object.keys(mod).length)) return mod;
        } catch (e) {} // eslint-disable-line no-empty


        return null;
      }
    }, {}],
    8: [function (require, module, exports) {
      "use strict";
      /**
       * A minimal path module to resolve Unix, Windows and URL paths alike.
       * @memberof util
       * @namespace
       */

      var path = exports;

      var isAbsolute =
      /**
       * Tests if the specified path is absolute.
       * @param {string} path Path to test
       * @returns {boolean} `true` if path is absolute
       */
      path.isAbsolute = function isAbsolute(path) {
        return /^(?:\/|\w+:)/.test(path);
      };

      var normalize =
      /**
       * Normalizes the specified path.
       * @param {string} path Path to normalize
       * @returns {string} Normalized path
       */
      path.normalize = function normalize(path) {
        path = path.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
        var parts = path.split("/"),
            absolute = isAbsolute(path),
            prefix = "";
        if (absolute) prefix = parts.shift() + "/";

        for (var i = 0; i < parts.length;) {
          if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;
          } else if (parts[i] === ".") parts.splice(i, 1);else ++i;
        }

        return prefix + parts.join("/");
      };
      /**
       * Resolves the specified include path against the specified origin path.
       * @param {string} originPath Path to the origin file
       * @param {string} includePath Include path relative to origin path
       * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
       * @returns {string} Path to the include file
       */


      path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
        if (!alreadyNormalized) includePath = normalize(includePath);
        if (isAbsolute(includePath)) return includePath;
        if (!alreadyNormalized) originPath = normalize(originPath);
        return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
      };
    }, {}],
    9: [function (require, module, exports) {
      "use strict";

      module.exports = pool;
      /**
       * An allocator as used by {@link util.pool}.
       * @typedef PoolAllocator
       * @type {function}
       * @param {number} size Buffer size
       * @returns {Uint8Array} Buffer
       */

      /**
       * A slicer as used by {@link util.pool}.
       * @typedef PoolSlicer
       * @type {function}
       * @param {number} start Start offset
       * @param {number} end End offset
       * @returns {Uint8Array} Buffer slice
       * @this {Uint8Array}
       */

      /**
       * A general purpose buffer pool.
       * @memberof util
       * @function
       * @param {PoolAllocator} alloc Allocator
       * @param {PoolSlicer} slice Slicer
       * @param {number} [size=8192] Slab size
       * @returns {PoolAllocator} Pooled allocator
       */

      function pool(alloc, slice, size) {
        var SIZE = size || 8192;
        var MAX = SIZE >>> 1;
        var slab = null;
        var offset = SIZE;
        return function pool_alloc(size) {
          if (size < 1 || size > MAX) return alloc(size);

          if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
          }

          var buf = slice.call(slab, offset, offset += size);
          if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
          return buf;
        };
      }
    }, {}],
    10: [function (require, module, exports) {
      "use strict";
      /**
       * A minimal UTF8 implementation for number arrays.
       * @memberof util
       * @namespace
       */

      var utf8 = exports;
      /**
       * Calculates the UTF8 byte length of a string.
       * @param {string} string String
       * @returns {number} Byte length
       */

      utf8.length = function utf8_length(string) {
        var len = 0,
            c = 0;

        for (var i = 0; i < string.length; ++i) {
          c = string.charCodeAt(i);
          if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
          } else len += 3;
        }

        return len;
      };
      /**
       * Reads UTF8 bytes as a string.
       * @param {Uint8Array} buffer Source buffer
       * @param {number} start Source start
       * @param {number} end Source end
       * @returns {string} String read
       */


      utf8.read = function utf8_read(buffer, start, end) {
        var len = end - start;
        if (len < 1) return "";
        var parts = null,
            chunk = [],
            i = 0,
            // char offset
        t; // temporary

        while (start < end) {
          t = buffer[start++];
          if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
          } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;

          if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
          }
        }

        if (parts) {
          if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
          return parts.join("");
        }

        return String.fromCharCode.apply(String, chunk.slice(0, i));
      };
      /**
       * Writes a string as UTF8 bytes.
       * @param {string} string Source string
       * @param {Uint8Array} buffer Destination buffer
       * @param {number} offset Destination offset
       * @returns {number} Bytes written
       */


      utf8.write = function utf8_write(string, buffer, offset) {
        var start = offset,
            c1,
            // character 1
        c2; // character 2

        for (var i = 0; i < string.length; ++i) {
          c1 = string.charCodeAt(i);

          if (c1 < 128) {
            buffer[offset++] = c1;
          } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
          } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          }
        }

        return offset - start;
      };
    }, {}],
    11: [function (require, module, exports) {
      "use strict";

      module.exports = common;
      var commonRe = /\/|\./;
      /**
       * Provides common type definitions.
       * Can also be used to provide additional google types or your own custom types.
       * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
       * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
       * @returns {undefined}
       * @property {INamespace} google/protobuf/any.proto Any
       * @property {INamespace} google/protobuf/duration.proto Duration
       * @property {INamespace} google/protobuf/empty.proto Empty
       * @property {INamespace} google/protobuf/field_mask.proto FieldMask
       * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
       * @property {INamespace} google/protobuf/timestamp.proto Timestamp
       * @property {INamespace} google/protobuf/wrappers.proto Wrappers
       * @example
       * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
       * protobuf.common("descriptor", descriptorJson);
       *
       * // manually provides a custom definition (uses my.foo namespace)
       * protobuf.common("my/foo/bar.proto", myFooBarJson);
       */

      function common(name, json) {
        if (!commonRe.test(name)) {
          name = "google/protobuf/" + name + ".proto";
          json = {
            nested: {
              google: {
                nested: {
                  protobuf: {
                    nested: json
                  }
                }
              }
            }
          };
        }

        common[name] = json;
      } // Not provided because of limited use (feel free to discuss or to provide yourself):
      //
      // google/protobuf/descriptor.proto
      // google/protobuf/source_context.proto
      // google/protobuf/type.proto
      //
      // Stripped and pre-parsed versions of these non-bundled files are instead available as part of
      // the repository or package within the google/protobuf directory.


      common("any", {
        /**
         * Properties of a google.protobuf.Any message.
         * @interface IAny
         * @type {Object}
         * @property {string} [typeUrl]
         * @property {Uint8Array} [bytes]
         * @memberof common
         */
        Any: {
          fields: {
            type_url: {
              type: "string",
              id: 1
            },
            value: {
              type: "bytes",
              id: 2
            }
          }
        }
      });
      var timeType;
      common("duration", {
        /**
         * Properties of a google.protobuf.Duration message.
         * @interface IDuration
         * @type {Object}
         * @property {number|Long} [seconds]
         * @property {number} [nanos]
         * @memberof common
         */
        Duration: timeType = {
          fields: {
            seconds: {
              type: "int64",
              id: 1
            },
            nanos: {
              type: "int32",
              id: 2
            }
          }
        }
      });
      common("timestamp", {
        /**
         * Properties of a google.protobuf.Timestamp message.
         * @interface ITimestamp
         * @type {Object}
         * @property {number|Long} [seconds]
         * @property {number} [nanos]
         * @memberof common
         */
        Timestamp: timeType
      });
      common("empty", {
        /**
         * Properties of a google.protobuf.Empty message.
         * @interface IEmpty
         * @memberof common
         */
        Empty: {
          fields: {}
        }
      });
      common("struct", {
        /**
         * Properties of a google.protobuf.Struct message.
         * @interface IStruct
         * @type {Object}
         * @property {Object.<string,IValue>} [fields]
         * @memberof common
         */
        Struct: {
          fields: {
            fields: {
              keyType: "string",
              type: "Value",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.Value message.
         * @interface IValue
         * @type {Object}
         * @property {string} [kind]
         * @property {0} [nullValue]
         * @property {number} [numberValue]
         * @property {string} [stringValue]
         * @property {boolean} [boolValue]
         * @property {IStruct} [structValue]
         * @property {IListValue} [listValue]
         * @memberof common
         */
        Value: {
          oneofs: {
            kind: {
              oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]
            }
          },
          fields: {
            nullValue: {
              type: "NullValue",
              id: 1
            },
            numberValue: {
              type: "double",
              id: 2
            },
            stringValue: {
              type: "string",
              id: 3
            },
            boolValue: {
              type: "bool",
              id: 4
            },
            structValue: {
              type: "Struct",
              id: 5
            },
            listValue: {
              type: "ListValue",
              id: 6
            }
          }
        },
        NullValue: {
          values: {
            NULL_VALUE: 0
          }
        },

        /**
         * Properties of a google.protobuf.ListValue message.
         * @interface IListValue
         * @type {Object}
         * @property {Array.<IValue>} [values]
         * @memberof common
         */
        ListValue: {
          fields: {
            values: {
              rule: "repeated",
              type: "Value",
              id: 1
            }
          }
        }
      });
      common("wrappers", {
        /**
         * Properties of a google.protobuf.DoubleValue message.
         * @interface IDoubleValue
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        DoubleValue: {
          fields: {
            value: {
              type: "double",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.FloatValue message.
         * @interface IFloatValue
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        FloatValue: {
          fields: {
            value: {
              type: "float",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.Int64Value message.
         * @interface IInt64Value
         * @type {Object}
         * @property {number|Long} [value]
         * @memberof common
         */
        Int64Value: {
          fields: {
            value: {
              type: "int64",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.UInt64Value message.
         * @interface IUInt64Value
         * @type {Object}
         * @property {number|Long} [value]
         * @memberof common
         */
        UInt64Value: {
          fields: {
            value: {
              type: "uint64",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.Int32Value message.
         * @interface IInt32Value
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        Int32Value: {
          fields: {
            value: {
              type: "int32",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.UInt32Value message.
         * @interface IUInt32Value
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        UInt32Value: {
          fields: {
            value: {
              type: "uint32",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.BoolValue message.
         * @interface IBoolValue
         * @type {Object}
         * @property {boolean} [value]
         * @memberof common
         */
        BoolValue: {
          fields: {
            value: {
              type: "bool",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.StringValue message.
         * @interface IStringValue
         * @type {Object}
         * @property {string} [value]
         * @memberof common
         */
        StringValue: {
          fields: {
            value: {
              type: "string",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.BytesValue message.
         * @interface IBytesValue
         * @type {Object}
         * @property {Uint8Array} [value]
         * @memberof common
         */
        BytesValue: {
          fields: {
            value: {
              type: "bytes",
              id: 1
            }
          }
        }
      });
      common("field_mask", {
        /**
         * Properties of a google.protobuf.FieldMask message.
         * @interface IDoubleValue
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        FieldMask: {
          fields: {
            paths: {
              rule: "repeated",
              type: "string",
              id: 1
            }
          }
        }
      });
      /**
       * Gets the root definition of the specified common proto file.
       *
       * Bundled definitions are:
       * - google/protobuf/any.proto
       * - google/protobuf/duration.proto
       * - google/protobuf/empty.proto
       * - google/protobuf/field_mask.proto
       * - google/protobuf/struct.proto
       * - google/protobuf/timestamp.proto
       * - google/protobuf/wrappers.proto
       *
       * @param {string} file Proto file name
       * @returns {INamespace|null} Root definition or `null` if not defined
       */

      common.get = function get(file) {
        return common[file] || null;
      };
    }, {}],
    12: [function (require, module, exports) {
      "use strict";
      /**
       * Runtime message from/to plain object converters.
       * @namespace
       */

      var converter = exports;

      var Enum = require(15),
          util = require(37);
      /**
       * Generates a partial value fromObject conveter.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} prop Property reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        if (field.resolvedType) {
          if (field.resolvedType instanceof Enum) {
            gen("switch(d%s){", prop);

            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
              if (field.repeated && values[keys[i]] === field.typeDefault) gen("default:");
              gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
            }

            gen("}");
          } else gen("if(typeof d%s!==\"object\")", prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
        } else {
          var isUnsigned = false;

          switch (field.type) {
            case "double":
            case "float":
              gen("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"

              break;

            case "uint32":
            case "fixed32":
              gen("m%s=d%s>>>0", prop, prop);
              break;

            case "int32":
            case "sint32":
            case "sfixed32":
              gen("m%s=d%s|0", prop, prop);
              break;

            case "uint64":
              isUnsigned = true;
            // eslint-disable-line no-fallthrough

            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
              gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)("else if(typeof d%s===\"string\")", prop)("m%s=parseInt(d%s,10)", prop, prop)("else if(typeof d%s===\"number\")", prop)("m%s=d%s", prop, prop)("else if(typeof d%s===\"object\")", prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
              break;

            case "bytes":
              gen("if(typeof d%s===\"string\")", prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
              break;

            case "string":
              gen("m%s=String(d%s)", prop, prop);
              break;

            case "bool":
              gen("m%s=Boolean(d%s)", prop, prop);
              break;

            /* default: gen
                ("m%s=d%s", prop, prop);
                break; */
          }
        }

        return gen;
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      }
      /**
       * Generates a plain object to runtime message converter specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      converter.fromObject = function fromObject(mtype) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        var fields = mtype.fieldsArray;
        var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
        if (!fields.length) return gen("return new this.ctor");
        gen("var m=new this.ctor");

        for (var i = 0; i < fields.length; ++i) {
          var field = fields[i].resolve(),
              prop = util.safeProp(field.name); // Map fields

          if (field.map) {
            gen("if(d%s){", prop)("if(typeof d%s!==\"object\")", prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field,
            /* not sorted */
            i, prop + "[ks[i]]")("}")("}"); // Repeated fields
          } else if (field.repeated) {
            gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field,
            /* not sorted */
            i, prop + "[i]")("}")("}"); // Non-repeated fields
          } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
            ("if(d%s!=null){", prop); // !== undefined && !== null

            genValuePartial_fromObject(gen, field,
            /* not sorted */
            i, prop);
            if (!(field.resolvedType instanceof Enum)) gen("}");
          }
        }

        return gen("return m");
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      };
      /**
       * Generates a partial value toObject converter.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} prop Property reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genValuePartial_toObject(gen, field, fieldIndex, prop) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        if (field.resolvedType) {
          if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);else gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
        } else {
          var isUnsigned = false;

          switch (field.type) {
            case "double":
            case "float":
              gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
              break;

            case "uint64":
              isUnsigned = true;
            // eslint-disable-line no-fallthrough

            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
              gen("if(typeof m%s===\"number\")", prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else") // Long-like
              ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
              break;

            case "bytes":
              gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
              break;

            default:
              gen("d%s=m%s", prop, prop);
              break;
          }
        }

        return gen;
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      }
      /**
       * Generates a runtime message to plain object converter specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      converter.toObject = function toObject(mtype) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
        if (!fields.length) return util.codegen()("return {}");
        var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
        var repeatedFields = [],
            mapFields = [],
            normalFields = [],
            i = 0;

        for (; i < fields.length; ++i) {
          if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
        }

        if (repeatedFields.length) {
          gen("if(o.arrays||o.defaults){");

          for (i = 0; i < repeatedFields.length; ++i) {
            gen("d%s=[]", util.safeProp(repeatedFields[i].name));
          }

          gen("}");
        }

        if (mapFields.length) {
          gen("if(o.objects||o.defaults){");

          for (i = 0; i < mapFields.length; ++i) {
            gen("d%s={}", util.safeProp(mapFields[i].name));
          }

          gen("}");
        }

        if (normalFields.length) {
          gen("if(o.defaults){");

          for (i = 0; i < normalFields.length; ++i) {
            var field = normalFields[i],
                prop = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field["long"]) gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) gen("d%s=o.bytes===String?%j:%s", prop, String.fromCharCode.apply(String, field.typeDefault), "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]");else gen("d%s=%j", prop, field.typeDefault); // also messages (=null)
          }

          gen("}");
        }

        var hasKs2 = false;

        for (i = 0; i < fields.length; ++i) {
          var field = fields[i],
              index = mtype._fieldsArray.indexOf(field),
              prop = util.safeProp(field.name);

          if (field.map) {
            if (!hasKs2) {
              hasKs2 = true;
              gen("var ks2");
            }

            gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field,
            /* sorted */
            index, prop + "[ks2[j]]")("}");
          } else if (field.repeated) {
            gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field,
            /* sorted */
            index, prop + "[j]")("}");
          } else {
            gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null

            genValuePartial_toObject(gen, field,
            /* sorted */
            index, prop);
            if (field.partOf) gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
          }

          gen("}");
        }

        return gen("return d");
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      };
    }, {
      "15": 15,
      "37": 37
    }],
    13: [function (require, module, exports) {
      "use strict";

      module.exports = decoder;

      var Enum = require(15),
          types = require(36),
          util = require(37);

      function missing(field) {
        return "missing required '" + field.name + "'";
      }
      /**
       * Generates a decoder specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      function decoder(mtype) {
        /* eslint-disable no-unexpected-multiline */
        var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function (field) {
          return field.map;
        }).length ? ",k" : ""))("while(r.pos<c){")("var t=r.uint32()");
        if (mtype.group) gen("if((t&7)===4)")("break");
        gen("switch(t>>>3){");
        var i = 0;

        for (; i <
        /* initializes */
        mtype.fieldsArray.length; ++i) {
          var field = mtype._fieldsArray[i].resolve(),
              type = field.resolvedType instanceof Enum ? "int32" : field.type,
              ref = "m" + util.safeProp(field.name);

          gen("case %i:", field.id); // Map fields

          if (field.map) {
            gen("r.skip().pos++") // assumes id 1 + key wireType
            ("if(%s===util.emptyObject)", ref)("%s={}", ref)("k=r.%s()", field.keyType)("r.pos++"); // assumes id 2 + value wireType

            if (types["long"][field.keyType] !== undefined) {
              if (types.basic[type] === undefined) gen("%s[typeof k===\"object\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
              else gen("%s[typeof k===\"object\"?util.longToHash(k):k]=r.%s()", ref, type);
            } else {
              if (types.basic[type] === undefined) gen("%s[k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
              else gen("%s[k]=r.%s()", ref, type);
            } // Repeated fields

          } else if (field.repeated) {
            gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref); // Packable (always check for forward and backward compatiblity)

            if (types.packed[type] !== undefined) gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else"); // Non-packed

            if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);else gen("%s.push(r.%s())", ref, type); // Non-repeated
          } else if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);else gen("%s=r.%s()", ref, type);

          gen("break"); // Unknown fields
        }

        gen("default:")("r.skipType(t&7)")("break")("}")("}"); // Field presence

        for (i = 0; i < mtype._fieldsArray.length; ++i) {
          var rfield = mtype._fieldsArray[i];
          if (rfield.required) gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
        }

        return gen("return m");
        /* eslint-enable no-unexpected-multiline */
      }
    }, {
      "15": 15,
      "36": 36,
      "37": 37
    }],
    14: [function (require, module, exports) {
      "use strict";

      module.exports = encoder;

      var Enum = require(15),
          types = require(36),
          util = require(37);
      /**
       * Generates a partial message type encoder.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} ref Variable reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genTypePartial(gen, field, fieldIndex, ref) {
        return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
      }
      /**
       * Generates an encoder specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      function encoder(mtype) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
        var i, ref; // "when a message is serialized its known fields should be written sequentially by field number"

        var fields =
        /* initializes */
        mtype.fieldsArray.slice().sort(util.compareFieldsById);

        for (var i = 0; i < fields.length; ++i) {
          var field = fields[i].resolve(),
              index = mtype._fieldsArray.indexOf(field),
              type = field.resolvedType instanceof Enum ? "int32" : field.type,
              wireType = types.basic[type];

          ref = "m" + util.safeProp(field.name); // Map fields

          if (field.map) {
            gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name) // !== undefined && !== null
            ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined) gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen("}")("}"); // Repeated fields
          } else if (field.repeated) {
            gen("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null
            // Packed repeated

            if (field.packed && types.packed[type] !== undefined) {
              gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()"); // Non-packed
            } else {
              gen("for(var i=0;i<%s.length;++i)", ref);
              if (wireType === undefined) genTypePartial(gen, field, index, ref + "[i]");else gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
            }

            gen("}"); // Non-repeated
          } else {
            if (field.optional) gen("if(%s!=null&&m.hasOwnProperty(%j))", ref, field.name); // !== undefined && !== null

            if (wireType === undefined) genTypePartial(gen, field, index, ref);else gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
          }
        }

        return gen("return w");
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      }
    }, {
      "15": 15,
      "36": 36,
      "37": 37
    }],
    15: [function (require, module, exports) {
      "use strict";

      module.exports = Enum; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

      var Namespace = require(23),
          util = require(37);
      /**
       * Constructs a new enum instance.
       * @classdesc Reflected enum.
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {Object.<string,number>} [values] Enum values as an object, by name
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] The comment for this enum
       * @param {Object.<string,string>} [comments] The value comments for this enum
       */


      function Enum(name, values, options, comment, comments) {
        ReflectionObject.call(this, name, options);
        if (values && _typeof(values) !== "object") throw TypeError("values must be an object");
        /**
         * Enum values by id.
         * @type {Object.<number,string>}
         */

        this.valuesById = {};
        /**
         * Enum values by name.
         * @type {Object.<string,number>}
         */

        this.values = Object.create(this.valuesById); // toJSON, marker

        /**
         * Enum comment text.
         * @type {string|null}
         */

        this.comment = comment;
        /**
         * Value comment texts, if any.
         * @type {Object.<string,string>}
         */

        this.comments = comments || {};
        /**
         * Reserved ranges, if any.
         * @type {Array.<number[]|string>}
         */

        this.reserved = undefined; // toJSON
        // Note that values inherit valuesById on their prototype which makes them a TypeScript-
        // compatible enum. This is used by pbts to write actual enum definitions that work for
        // static and reflection code alike instead of emitting generic object definitions.

        if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) {
          if (typeof values[keys[i]] === "number") // use forward entries only
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
        }
      }
      /**
       * Enum descriptor.
       * @interface IEnum
       * @property {Object.<string,number>} values Enum values
       * @property {Object.<string,*>} [options] Enum options
       */

      /**
       * Constructs an enum from an enum descriptor.
       * @param {string} name Enum name
       * @param {IEnum} json Enum descriptor
       * @returns {Enum} Created enum
       * @throws {TypeError} If arguments are invalid
       */


      Enum.fromJSON = function fromJSON(name, json) {
        var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
        enm.reserved = json.reserved;
        return enm;
      };
      /**
       * Converts this enum to an enum descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IEnum} Enum descriptor
       */


      Enum.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", this.options, "values", this.values, "reserved", this.reserved && this.reserved.length ? this.reserved : undefined, "comment", keepComments ? this.comment : undefined, "comments", keepComments ? this.comments : undefined]);
      };
      /**
       * Adds a value to this enum.
       * @param {string} name Value name
       * @param {number} id Value id
       * @param {string} [comment] Comment, if any
       * @returns {Enum} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If there is already a value with this name or id
       */


      Enum.prototype.add = function add(name, id, comment) {
        // utilized by the parser but not by .fromJSON
        if (!util.isString(name)) throw TypeError("name must be a string");
        if (!util.isInteger(id)) throw TypeError("id must be an integer");
        if (this.values[name] !== undefined) throw Error("duplicate name '" + name + "' in " + this);
        if (this.isReservedId(id)) throw Error("id " + id + " is reserved in " + this);
        if (this.isReservedName(name)) throw Error("name '" + name + "' is reserved in " + this);

        if (this.valuesById[id] !== undefined) {
          if (!(this.options && this.options.allow_alias)) throw Error("duplicate id " + id + " in " + this);
          this.values[name] = id;
        } else this.valuesById[this.values[name] = id] = name;

        this.comments[name] = comment || null;
        return this;
      };
      /**
       * Removes a value from this enum
       * @param {string} name Value name
       * @returns {Enum} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If `name` is not a name of this enum
       */


      Enum.prototype.remove = function remove(name) {
        if (!util.isString(name)) throw TypeError("name must be a string");
        var val = this.values[name];
        if (val == null) throw Error("name '" + name + "' does not exist in " + this);
        delete this.valuesById[val];
        delete this.values[name];
        delete this.comments[name];
        return this;
      };
      /**
       * Tests if the specified id is reserved.
       * @param {number} id Id to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Enum.prototype.isReservedId = function isReservedId(id) {
        return Namespace.isReservedId(this.reserved, id);
      };
      /**
       * Tests if the specified name is reserved.
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Enum.prototype.isReservedName = function isReservedName(name) {
        return Namespace.isReservedName(this.reserved, name);
      };
    }, {
      "23": 23,
      "24": 24,
      "37": 37
    }],
    16: [function (require, module, exports) {
      "use strict";

      module.exports = Field; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

      var Enum = require(15),
          types = require(36),
          util = require(37);

      var Type; // cyclic

      var ruleRe = /^required|optional|repeated$/;
      /**
       * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
       * @name Field
       * @classdesc Reflected message field.
       * @extends FieldBase
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {number} id Unique id within its namespace
       * @param {string} type Value type
       * @param {string|Object.<string,*>} [rule="optional"] Field rule
       * @param {string|Object.<string,*>} [extend] Extended type if different from parent
       * @param {Object.<string,*>} [options] Declared options
       */

      /**
       * Constructs a field from a field descriptor.
       * @param {string} name Field name
       * @param {IField} json Field descriptor
       * @returns {Field} Created field
       * @throws {TypeError} If arguments are invalid
       */

      Field.fromJSON = function fromJSON(name, json) {
        return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
      };
      /**
       * Not an actual constructor. Use {@link Field} instead.
       * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
       * @exports FieldBase
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {number} id Unique id within its namespace
       * @param {string} type Value type
       * @param {string|Object.<string,*>} [rule="optional"] Field rule
       * @param {string|Object.<string,*>} [extend] Extended type if different from parent
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] Comment associated with this field
       */


      function Field(name, id, type, rule, extend, options, comment) {
        if (util.isObject(rule)) {
          comment = extend;
          options = rule;
          rule = extend = undefined;
        } else if (util.isObject(extend)) {
          comment = options;
          options = extend;
          extend = undefined;
        }

        ReflectionObject.call(this, name, options);
        if (!util.isInteger(id) || id < 0) throw TypeError("id must be a non-negative integer");
        if (!util.isString(type)) throw TypeError("type must be a string");
        if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError("rule must be a string rule");
        if (extend !== undefined && !util.isString(extend)) throw TypeError("extend must be a string");
        /**
         * Field rule, if any.
         * @type {string|undefined}
         */

        this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

        /**
         * Field type.
         * @type {string}
         */

        this.type = type; // toJSON

        /**
         * Unique field id.
         * @type {number}
         */

        this.id = id; // toJSON, marker

        /**
         * Extended type if different from parent.
         * @type {string|undefined}
         */

        this.extend = extend || undefined; // toJSON

        /**
         * Whether this field is required.
         * @type {boolean}
         */

        this.required = rule === "required";
        /**
         * Whether this field is optional.
         * @type {boolean}
         */

        this.optional = !this.required;
        /**
         * Whether this field is repeated.
         * @type {boolean}
         */

        this.repeated = rule === "repeated";
        /**
         * Whether this field is a map or not.
         * @type {boolean}
         */

        this.map = false;
        /**
         * Message this field belongs to.
         * @type {Type|null}
         */

        this.message = null;
        /**
         * OneOf this field belongs to, if any,
         * @type {OneOf|null}
         */

        this.partOf = null;
        /**
         * The field type's default value.
         * @type {*}
         */

        this.typeDefault = null;
        /**
         * The field's default value on prototypes.
         * @type {*}
         */

        this.defaultValue = null;
        /**
         * Whether this field's value should be treated as a long.
         * @type {boolean}
         */

        this["long"] = util.Long ? types["long"][type] !== undefined :
        /* istanbul ignore next */
        false;
        /**
         * Whether this field's value is a buffer.
         * @type {boolean}
         */

        this.bytes = type === "bytes";
        /**
         * Resolved type if not a basic type.
         * @type {Type|Enum|null}
         */

        this.resolvedType = null;
        /**
         * Sister-field within the extended type if a declaring extension field.
         * @type {Field|null}
         */

        this.extensionField = null;
        /**
         * Sister-field within the declaring namespace if an extended field.
         * @type {Field|null}
         */

        this.declaringField = null;
        /**
         * Internally remembers whether this field is packed.
         * @type {boolean|null}
         * @private
         */

        this._packed = null;
        /**
         * Comment for this field.
         * @type {string|null}
         */

        this.comment = comment;
      }
      /**
       * Determines whether this field is packed. Only relevant when repeated and working with proto2.
       * @name Field#packed
       * @type {boolean}
       * @readonly
       */


      Object.defineProperty(Field.prototype, "packed", {
        get: function get() {
          // defaults to packed=true if not explicity set to false
          if (this._packed === null) this._packed = this.getOption("packed") !== false;
          return this._packed;
        }
      });
      /**
       * @override
       */

      Field.prototype.setOption = function setOption(name, value, ifNotSet) {
        if (name === "packed") // clear cached before setting
          this._packed = null;
        return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
      };
      /**
       * Field descriptor.
       * @interface IField
       * @property {string} [rule="optional"] Field rule
       * @property {string} type Field type
       * @property {number} id Field id
       * @property {Object.<string,*>} [options] Field options
       */

      /**
       * Extension field descriptor.
       * @interface IExtensionField
       * @extends IField
       * @property {string} extend Extended type
       */

      /**
       * Converts this field to a field descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IField} Field descriptor
       */


      Field.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["rule", this.rule !== "optional" && this.rule || undefined, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * Resolves this field's type references.
       * @returns {Field} `this`
       * @throws {Error} If any reference cannot be resolved
       */


      Field.prototype.resolve = function resolve() {
        if (this.resolved) return this;

        if ((this.typeDefault = types.defaults[this.type]) === undefined) {
          // if not a basic type, resolve it
          this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
          if (this.resolvedType instanceof Type) this.typeDefault = null;else // instanceof Enum
            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
        } // use explicitly set default value if present


        if (this.options && this.options["default"] != null) {
          this.typeDefault = this.options["default"];
          if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string") this.typeDefault = this.resolvedType.values[this.typeDefault];
        } // remove unnecessary options


        if (this.options) {
          if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;
          if (!Object.keys(this.options).length) this.options = undefined;
        } // convert to internal data type if necesssary


        if (this["long"]) {
          this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
          /* istanbul ignore else */

          if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)
        } else if (this.bytes && typeof this.typeDefault === "string") {
          var buf;
          if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
          this.typeDefault = buf;
        } // take special care of maps and repeated fields


        if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault; // ensure proper value on prototype

        if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;
        return ReflectionObject.prototype.resolve.call(this);
      };
      /**
       * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
       * @typedef FieldDecorator
       * @type {function}
       * @param {Object} prototype Target prototype
       * @param {string} fieldName Field name
       * @returns {undefined}
       */

      /**
       * Field decorator (TypeScript).
       * @name Field.d
       * @function
       * @param {number} fieldId Field id
       * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
       * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
       * @param {T} [defaultValue] Default value
       * @returns {FieldDecorator} Decorator function
       * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
       */


      Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
        // submessage: decorate the submessage and use its name as the type
        if (typeof fieldType === "function") fieldType = util.decorateType(fieldType).name; // enum reference: create a reflected copy of the enum and keep reuseing it
        else if (fieldType && _typeof(fieldType) === "object") fieldType = util.decorateEnum(fieldType).name;
        return function fieldDecorator(prototype, fieldName) {
          util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {
            "default": defaultValue
          }));
        };
      };
      /**
       * Field decorator (TypeScript).
       * @name Field.d
       * @function
       * @param {number} fieldId Field id
       * @param {Constructor<T>|string} fieldType Field type
       * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
       * @returns {FieldDecorator} Decorator function
       * @template T extends Message<T>
       * @variation 2
       */
      // like Field.d but without a default value


      Field._configure = function configure(Type_) {
        Type = Type_;
      };
    }, {
      "15": 15,
      "24": 24,
      "36": 36,
      "37": 37
    }],
    17: [function (require, module, exports) {
      "use strict";

      var protobuf = module.exports = require(18);

      protobuf.build = "light";
      /**
       * A node-style callback as used by {@link load} and {@link Root#load}.
       * @typedef LoadCallback
       * @type {function}
       * @param {Error|null} error Error, if any, otherwise `null`
       * @param {Root} [root] Root, if there hasn't been an error
       * @returns {undefined}
       */

      /**
       * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
       * @param {string|string[]} filename One or multiple files to load
       * @param {Root} root Root namespace, defaults to create a new one if omitted.
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       * @see {@link Root#load}
       */

      function load(filename, root, callback) {
        if (typeof root === "function") {
          callback = root;
          root = new protobuf.Root();
        } else if (!root) root = new protobuf.Root();

        return root.load(filename, callback);
      }
      /**
       * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
       * @name load
       * @function
       * @param {string|string[]} filename One or multiple files to load
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       * @see {@link Root#load}
       * @variation 2
       */
      // function load(filename:string, callback:LoadCallback):undefined

      /**
       * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
       * @name load
       * @function
       * @param {string|string[]} filename One or multiple files to load
       * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
       * @returns {Promise<Root>} Promise
       * @see {@link Root#load}
       * @variation 3
       */
      // function load(filename:string, [root:Root]):Promise<Root>


      protobuf.load = load;
      /**
       * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
       * @param {string|string[]} filename One or multiple files to load
       * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
       * @returns {Root} Root namespace
       * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
       * @see {@link Root#loadSync}
       */

      function loadSync(filename, root) {
        if (!root) root = new protobuf.Root();
        return root.loadSync(filename);
      }

      protobuf.loadSync = loadSync; // Serialization

      protobuf.encoder = require(14);
      protobuf.decoder = require(13);
      protobuf.verifier = require(40);
      protobuf.converter = require(12); // Reflection

      protobuf.ReflectionObject = require(24);
      protobuf.Namespace = require(23);
      protobuf.Root = require(29);
      protobuf.Enum = require(15);
      protobuf.Type = require(35);
      protobuf.Field = require(16);
      protobuf.OneOf = require(25);
      protobuf.MapField = require(20);
      protobuf.Service = require(33);
      protobuf.Method = require(22); // Runtime

      protobuf.Message = require(21);
      protobuf.wrappers = require(41); // Utility

      protobuf.types = require(36);
      protobuf.util = require(37); // Configure reflection

      protobuf.ReflectionObject._configure(protobuf.Root);

      protobuf.Namespace._configure(protobuf.Type, protobuf.Service);

      protobuf.Root._configure(protobuf.Type);

      protobuf.Field._configure(protobuf.Type);
    }, {
      "12": 12,
      "13": 13,
      "14": 14,
      "15": 15,
      "16": 16,
      "18": 18,
      "20": 20,
      "21": 21,
      "22": 22,
      "23": 23,
      "24": 24,
      "25": 25,
      "29": 29,
      "33": 33,
      "35": 35,
      "36": 36,
      "37": 37,
      "40": 40,
      "41": 41
    }],
    18: [function (require, module, exports) {
      "use strict";

      var protobuf = exports;
      /**
       * Build type, one of `"full"`, `"light"` or `"minimal"`.
       * @name build
       * @type {string}
       * @const
       */

      protobuf.build = "minimal"; // Serialization

      protobuf.Writer = require(42);
      protobuf.BufferWriter = require(43);
      protobuf.Reader = require(27);
      protobuf.BufferReader = require(28); // Utility

      protobuf.util = require(39);
      protobuf.rpc = require(31);
      protobuf.roots = require(30);
      protobuf.configure = configure;
      /* istanbul ignore next */

      /**
       * Reconfigures the library according to the environment.
       * @returns {undefined}
       */

      function configure() {
        protobuf.Reader._configure(protobuf.BufferReader);

        protobuf.util._configure();
      } // Configure serialization


      protobuf.Writer._configure(protobuf.BufferWriter);

      configure();
    }, {
      "27": 27,
      "28": 28,
      "30": 30,
      "31": 31,
      "39": 39,
      "42": 42,
      "43": 43
    }],
    19: [function (require, module, exports) {
      "use strict";

      var protobuf = module.exports = require(17);

      protobuf.build = "full"; // Parser

      protobuf.tokenize = require(34);
      protobuf.parse = require(26);
      protobuf.common = require(11); // Configure parser

      protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
    }, {
      "11": 11,
      "17": 17,
      "26": 26,
      "34": 34
    }],
    20: [function (require, module, exports) {
      "use strict";

      module.exports = MapField; // extends Field

      var Field = require(16);

      ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

      var types = require(36),
          util = require(37);
      /**
       * Constructs a new map field instance.
       * @classdesc Reflected map field.
       * @extends FieldBase
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {number} id Unique id within its namespace
       * @param {string} keyType Key type
       * @param {string} type Value type
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] Comment associated with this field
       */


      function MapField(name, id, keyType, type, options, comment) {
        Field.call(this, name, id, type, undefined, undefined, options, comment);
        /* istanbul ignore if */

        if (!util.isString(keyType)) throw TypeError("keyType must be a string");
        /**
         * Key type.
         * @type {string}
         */

        this.keyType = keyType; // toJSON, marker

        /**
         * Resolved key type if not a basic type.
         * @type {ReflectionObject|null}
         */

        this.resolvedKeyType = null; // Overrides Field#map

        this.map = true;
      }
      /**
       * Map field descriptor.
       * @interface IMapField
       * @extends {IField}
       * @property {string} keyType Key type
       */

      /**
       * Extension map field descriptor.
       * @interface IExtensionMapField
       * @extends IMapField
       * @property {string} extend Extended type
       */

      /**
       * Constructs a map field from a map field descriptor.
       * @param {string} name Field name
       * @param {IMapField} json Map field descriptor
       * @returns {MapField} Created map field
       * @throws {TypeError} If arguments are invalid
       */


      MapField.fromJSON = function fromJSON(name, json) {
        return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
      };
      /**
       * Converts this map field to a map field descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IMapField} Map field descriptor
       */


      MapField.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["keyType", this.keyType, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * @override
       */


      MapField.prototype.resolve = function resolve() {
        if (this.resolved) return this; // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"

        if (types.mapKey[this.keyType] === undefined) throw Error("invalid key type: " + this.keyType);
        return Field.prototype.resolve.call(this);
      };
      /**
       * Map field decorator (TypeScript).
       * @name MapField.d
       * @function
       * @param {number} fieldId Field id
       * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
       * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
       * @returns {FieldDecorator} Decorator function
       * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
       */


      MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
        // submessage value: decorate the submessage and use its name as the type
        if (typeof fieldValueType === "function") fieldValueType = util.decorateType(fieldValueType).name; // enum reference value: create a reflected copy of the enum and keep reuseing it
        else if (fieldValueType && _typeof(fieldValueType) === "object") fieldValueType = util.decorateEnum(fieldValueType).name;
        return function mapFieldDecorator(prototype, fieldName) {
          util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
        };
      };
    }, {
      "16": 16,
      "36": 36,
      "37": 37
    }],
    21: [function (require, module, exports) {
      "use strict";

      module.exports = Message;

      var util = require(39);
      /**
       * Constructs a new message instance.
       * @classdesc Abstract runtime message.
       * @constructor
       * @param {Properties<T>} [properties] Properties to set
       * @template T extends object
       */


      function Message(properties) {
        // not used internally
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {
          this[keys[i]] = properties[keys[i]];
        }
      }
      /**
       * Reference to the reflected type.
       * @name Message.$type
       * @type {Type}
       * @readonly
       */

      /**
       * Reference to the reflected type.
       * @name Message#$type
       * @type {Type}
       * @readonly
       */

      /*eslint-disable valid-jsdoc*/

      /**
       * Creates a new message of this type using the specified properties.
       * @param {Object.<string,*>} [properties] Properties to set
       * @returns {Message<T>} Message instance
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.create = function create(properties) {
        return this.$type.create(properties);
      };
      /**
       * Encodes a message of this type.
       * @param {T|Object.<string,*>} message Message to encode
       * @param {Writer} [writer] Writer to use
       * @returns {Writer} Writer
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.encode = function encode(message, writer) {
        return this.$type.encode(message, writer);
      };
      /**
       * Encodes a message of this type preceeded by its length as a varint.
       * @param {T|Object.<string,*>} message Message to encode
       * @param {Writer} [writer] Writer to use
       * @returns {Writer} Writer
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.encodeDelimited = function encodeDelimited(message, writer) {
        return this.$type.encodeDelimited(message, writer);
      };
      /**
       * Decodes a message of this type.
       * @name Message.decode
       * @function
       * @param {Reader|Uint8Array} reader Reader or buffer to decode
       * @returns {T} Decoded message
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.decode = function decode(reader) {
        return this.$type.decode(reader);
      };
      /**
       * Decodes a message of this type preceeded by its length as a varint.
       * @name Message.decodeDelimited
       * @function
       * @param {Reader|Uint8Array} reader Reader or buffer to decode
       * @returns {T} Decoded message
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.decodeDelimited = function decodeDelimited(reader) {
        return this.$type.decodeDelimited(reader);
      };
      /**
       * Verifies a message of this type.
       * @name Message.verify
       * @function
       * @param {Object.<string,*>} message Plain object to verify
       * @returns {string|null} `null` if valid, otherwise the reason why it is not
       */


      Message.verify = function verify(message) {
        return this.$type.verify(message);
      };
      /**
       * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
       * @param {Object.<string,*>} object Plain object
       * @returns {T} Message instance
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.fromObject = function fromObject(object) {
        return this.$type.fromObject(object);
      };
      /**
       * Creates a plain object from a message of this type. Also converts values to other types if specified.
       * @param {T} message Message instance
       * @param {IConversionOptions} [options] Conversion options
       * @returns {Object.<string,*>} Plain object
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.toObject = function toObject(message, options) {
        return this.$type.toObject(message, options);
      };
      /**
       * Converts this message to JSON.
       * @returns {Object.<string,*>} JSON object
       */


      Message.prototype.toJSON = function toJSON() {
        return this.$type.toObject(this, util.toJSONOptions);
      };
      /*eslint-enable valid-jsdoc*/

    }, {
      "39": 39
    }],
    22: [function (require, module, exports) {
      "use strict";

      module.exports = Method; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

      var util = require(37);
      /**
       * Constructs a new service method instance.
       * @classdesc Reflected service method.
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Method name
       * @param {string|undefined} type Method type, usually `"rpc"`
       * @param {string} requestType Request message type
       * @param {string} responseType Response message type
       * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
       * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] The comment for this method
       */


      function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {
        /* istanbul ignore next */
        if (util.isObject(requestStream)) {
          options = requestStream;
          requestStream = responseStream = undefined;
        } else if (util.isObject(responseStream)) {
          options = responseStream;
          responseStream = undefined;
        }
        /* istanbul ignore if */


        if (!(type === undefined || util.isString(type))) throw TypeError("type must be a string");
        /* istanbul ignore if */

        if (!util.isString(requestType)) throw TypeError("requestType must be a string");
        /* istanbul ignore if */

        if (!util.isString(responseType)) throw TypeError("responseType must be a string");
        ReflectionObject.call(this, name, options);
        /**
         * Method type.
         * @type {string}
         */

        this.type = type || "rpc"; // toJSON

        /**
         * Request type.
         * @type {string}
         */

        this.requestType = requestType; // toJSON, marker

        /**
         * Whether requests are streamed or not.
         * @type {boolean|undefined}
         */

        this.requestStream = requestStream ? true : undefined; // toJSON

        /**
         * Response type.
         * @type {string}
         */

        this.responseType = responseType; // toJSON

        /**
         * Whether responses are streamed or not.
         * @type {boolean|undefined}
         */

        this.responseStream = responseStream ? true : undefined; // toJSON

        /**
         * Resolved request type.
         * @type {Type|null}
         */

        this.resolvedRequestType = null;
        /**
         * Resolved response type.
         * @type {Type|null}
         */

        this.resolvedResponseType = null;
        /**
         * Comment for this method
         * @type {string|null}
         */

        this.comment = comment;
      }
      /**
       * Method descriptor.
       * @interface IMethod
       * @property {string} [type="rpc"] Method type
       * @property {string} requestType Request type
       * @property {string} responseType Response type
       * @property {boolean} [requestStream=false] Whether requests are streamed
       * @property {boolean} [responseStream=false] Whether responses are streamed
       * @property {Object.<string,*>} [options] Method options
       */

      /**
       * Constructs a method from a method descriptor.
       * @param {string} name Method name
       * @param {IMethod} json Method descriptor
       * @returns {Method} Created method
       * @throws {TypeError} If arguments are invalid
       */


      Method.fromJSON = function fromJSON(name, json) {
        return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);
      };
      /**
       * Converts this method to a method descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IMethod} Method descriptor
       */


      Method.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["type", this.type !== "rpc" &&
        /* istanbul ignore next */
        this.type || undefined, "requestType", this.requestType, "requestStream", this.requestStream, "responseType", this.responseType, "responseStream", this.responseStream, "options", this.options, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * @override
       */


      Method.prototype.resolve = function resolve() {
        /* istanbul ignore if */
        if (this.resolved) return this;
        this.resolvedRequestType = this.parent.lookupType(this.requestType);
        this.resolvedResponseType = this.parent.lookupType(this.responseType);
        return ReflectionObject.prototype.resolve.call(this);
      };
    }, {
      "24": 24,
      "37": 37
    }],
    23: [function (require, module, exports) {
      "use strict";

      module.exports = Namespace; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

      var Enum = require(15),
          Field = require(16),
          util = require(37);

      var Type, // cyclic
      Service; // "

      /**
       * Constructs a new namespace instance.
       * @name Namespace
       * @classdesc Reflected namespace.
       * @extends NamespaceBase
       * @constructor
       * @param {string} name Namespace name
       * @param {Object.<string,*>} [options] Declared options
       */

      /**
       * Constructs a namespace from JSON.
       * @memberof Namespace
       * @function
       * @param {string} name Namespace name
       * @param {Object.<string,*>} json JSON object
       * @returns {Namespace} Created namespace
       * @throws {TypeError} If arguments are invalid
       */

      Namespace.fromJSON = function fromJSON(name, json) {
        return new Namespace(name, json.options).addJSON(json.nested);
      };
      /**
       * Converts an array of reflection objects to JSON.
       * @memberof Namespace
       * @param {ReflectionObject[]} array Object array
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
       */


      function arrayToJSON(array, toJSONOptions) {
        if (!(array && array.length)) return undefined;
        var obj = {};

        for (var i = 0; i < array.length; ++i) {
          obj[array[i].name] = array[i].toJSON(toJSONOptions);
        }

        return obj;
      }

      Namespace.arrayToJSON = arrayToJSON;
      /**
       * Tests if the specified id is reserved.
       * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
       * @param {number} id Id to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */

      Namespace.isReservedId = function isReservedId(reserved, id) {
        if (reserved) for (var i = 0; i < reserved.length; ++i) {
          if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] >= id) return true;
        }
        return false;
      };
      /**
       * Tests if the specified name is reserved.
       * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Namespace.isReservedName = function isReservedName(reserved, name) {
        if (reserved) for (var i = 0; i < reserved.length; ++i) {
          if (reserved[i] === name) return true;
        }
        return false;
      };
      /**
       * Not an actual constructor. Use {@link Namespace} instead.
       * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
       * @exports NamespaceBase
       * @extends ReflectionObject
       * @abstract
       * @constructor
       * @param {string} name Namespace name
       * @param {Object.<string,*>} [options] Declared options
       * @see {@link Namespace}
       */


      function Namespace(name, options) {
        ReflectionObject.call(this, name, options);
        /**
         * Nested objects by name.
         * @type {Object.<string,ReflectionObject>|undefined}
         */

        this.nested = undefined; // toJSON

        /**
         * Cached nested objects as an array.
         * @type {ReflectionObject[]|null}
         * @private
         */

        this._nestedArray = null;
      }

      function clearCache(namespace) {
        namespace._nestedArray = null;
        return namespace;
      }
      /**
       * Nested objects of this namespace as an array for iteration.
       * @name NamespaceBase#nestedArray
       * @type {ReflectionObject[]}
       * @readonly
       */


      Object.defineProperty(Namespace.prototype, "nestedArray", {
        get: function get() {
          return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
        }
      });
      /**
       * Namespace descriptor.
       * @interface INamespace
       * @property {Object.<string,*>} [options] Namespace options
       * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
       */

      /**
       * Any extension field descriptor.
       * @typedef AnyExtensionField
       * @type {IExtensionField|IExtensionMapField}
       */

      /**
       * Any nested object descriptor.
       * @typedef AnyNestedObject
       * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
       */
      // ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

      /**
       * Converts this namespace to a namespace descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {INamespace} Namespace descriptor
       */

      Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
        return util.toObject(["options", this.options, "nested", arrayToJSON(this.nestedArray, toJSONOptions)]);
      };
      /**
       * Adds nested objects to this namespace from nested object descriptors.
       * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
       * @returns {Namespace} `this`
       */


      Namespace.prototype.addJSON = function addJSON(nestedJson) {
        var ns = this;
        /* istanbul ignore else */

        if (nestedJson) {
          for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
            (nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));
          }
        }

        return this;
      };
      /**
       * Gets the nested object of the specified name.
       * @param {string} name Nested object name
       * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
       */


      Namespace.prototype.get = function get(name) {
        return this.nested && this.nested[name] || null;
      };
      /**
       * Gets the values of the nested {@link Enum|enum} of the specified name.
       * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
       * @param {string} name Nested enum name
       * @returns {Object.<string,number>} Enum values
       * @throws {Error} If there is no such enum
       */


      Namespace.prototype.getEnum = function getEnum(name) {
        if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;
        throw Error("no such enum: " + name);
      };
      /**
       * Adds a nested object to this namespace.
       * @param {ReflectionObject} object Nested object to add
       * @returns {Namespace} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If there is already a nested object with this name
       */


      Namespace.prototype.add = function add(object) {
        if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError("object must be a valid nested object");
        if (!this.nested) this.nested = {};else {
          var prev = this.get(object.name);

          if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
              // replace plain namespace but keep existing nested elements and options
              var nested = prev.nestedArray;

              for (var i = 0; i < nested.length; ++i) {
                object.add(nested[i]);
              }

              this.remove(prev);
              if (!this.nested) this.nested = {};
              object.setOptions(prev.options, true);
            } else throw Error("duplicate name '" + object.name + "' in " + this);
          }
        }
        this.nested[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      };
      /**
       * Removes a nested object from this namespace.
       * @param {ReflectionObject} object Nested object to remove
       * @returns {Namespace} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If `object` is not a member of this namespace
       */


      Namespace.prototype.remove = function remove(object) {
        if (!(object instanceof ReflectionObject)) throw TypeError("object must be a ReflectionObject");
        if (object.parent !== this) throw Error(object + " is not a member of " + this);
        delete this.nested[object.name];
        if (!Object.keys(this.nested).length) this.nested = undefined;
        object.onRemove(this);
        return clearCache(this);
      };
      /**
       * Defines additial namespaces within this one if not yet existing.
       * @param {string|string[]} path Path to create
       * @param {*} [json] Nested types to create from JSON
       * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
       */


      Namespace.prototype.define = function define(path, json) {
        if (util.isString(path)) path = path.split(".");else if (!Array.isArray(path)) throw TypeError("illegal path");
        if (path && path.length && path[0] === "") throw Error("path must be relative");
        var ptr = this;

        while (path.length > 0) {
          var part = path.shift();

          if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace)) throw Error("path conflicts with non-namespace objects");
          } else ptr.add(ptr = new Namespace(part));
        }

        if (json) ptr.addJSON(json);
        return ptr;
      };
      /**
       * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
       * @returns {Namespace} `this`
       */


      Namespace.prototype.resolveAll = function resolveAll() {
        var nested = this.nestedArray,
            i = 0;

        while (i < nested.length) {
          if (nested[i] instanceof Namespace) nested[i++].resolveAll();else nested[i++].resolve();
        }

        return this.resolve();
      };
      /**
       * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
       * @param {string|string[]} path Path to look up
       * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
       * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
       * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
       */


      Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
        /* istanbul ignore next */
        if (typeof filterTypes === "boolean") {
          parentAlreadyChecked = filterTypes;
          filterTypes = undefined;
        } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [filterTypes];

        if (util.isString(path) && path.length) {
          if (path === ".") return this.root;
          path = path.split(".");
        } else if (!path.length) return this; // Start at root if path is absolute


        if (path[0] === "") return this.root.lookup(path.slice(1), filterTypes); // Test if the first part matches any nested object, and if so, traverse if path contains more

        var found = this.get(path[0]);

        if (found) {
          if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;
          } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found; // Otherwise try each nested namespace

        } else for (var i = 0; i < this.nestedArray.length; ++i) {
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;
        } // If there hasn't been a match, try again at the parent


        if (this.parent === null || parentAlreadyChecked) return null;
        return this.parent.lookup(path, filterTypes);
      };
      /**
       * Looks up the reflection object at the specified path, relative to this namespace.
       * @name NamespaceBase#lookup
       * @function
       * @param {string|string[]} path Path to look up
       * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
       * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
       * @variation 2
       */
      // lookup(path: string, [parentAlreadyChecked: boolean])

      /**
       * Looks up the {@link Type|type} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Type} Looked up type
       * @throws {Error} If `path` does not point to a type
       */


      Namespace.prototype.lookupType = function lookupType(path) {
        var found = this.lookup(path, [Type]);
        if (!found) throw Error("no such type: " + path);
        return found;
      };
      /**
       * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Enum} Looked up enum
       * @throws {Error} If `path` does not point to an enum
       */


      Namespace.prototype.lookupEnum = function lookupEnum(path) {
        var found = this.lookup(path, [Enum]);
        if (!found) throw Error("no such Enum '" + path + "' in " + this);
        return found;
      };
      /**
       * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Type} Looked up type or enum
       * @throws {Error} If `path` does not point to a type or enum
       */


      Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
        var found = this.lookup(path, [Type, Enum]);
        if (!found) throw Error("no such Type or Enum '" + path + "' in " + this);
        return found;
      };
      /**
       * Looks up the {@link Service|service} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Service} Looked up service
       * @throws {Error} If `path` does not point to a service
       */


      Namespace.prototype.lookupService = function lookupService(path) {
        var found = this.lookup(path, [Service]);
        if (!found) throw Error("no such Service '" + path + "' in " + this);
        return found;
      };

      Namespace._configure = function (Type_, Service_) {
        Type = Type_;
        Service = Service_;
      };
    }, {
      "15": 15,
      "16": 16,
      "24": 24,
      "37": 37
    }],
    24: [function (require, module, exports) {
      "use strict";

      module.exports = ReflectionObject;
      ReflectionObject.className = "ReflectionObject";

      var util = require(37);

      var Root; // cyclic

      /**
       * Constructs a new reflection object instance.
       * @classdesc Base class of all reflection objects.
       * @constructor
       * @param {string} name Object name
       * @param {Object.<string,*>} [options] Declared options
       * @abstract
       */

      function ReflectionObject(name, options) {
        if (!util.isString(name)) throw TypeError("name must be a string");
        if (options && !util.isObject(options)) throw TypeError("options must be an object");
        /**
         * Options.
         * @type {Object.<string,*>|undefined}
         */

        this.options = options; // toJSON

        /**
         * Unique name within its namespace.
         * @type {string}
         */

        this.name = name;
        /**
         * Parent namespace.
         * @type {Namespace|null}
         */

        this.parent = null;
        /**
         * Whether already resolved or not.
         * @type {boolean}
         */

        this.resolved = false;
        /**
         * Comment text, if any.
         * @type {string|null}
         */

        this.comment = null;
        /**
         * Defining file name.
         * @type {string|null}
         */

        this.filename = null;
      }

      Object.defineProperties(ReflectionObject.prototype, {
        /**
         * Reference to the root namespace.
         * @name ReflectionObject#root
         * @type {Root}
         * @readonly
         */
        root: {
          get: function get() {
            var ptr = this;

            while (ptr.parent !== null) {
              ptr = ptr.parent;
            }

            return ptr;
          }
        },

        /**
         * Full name including leading dot.
         * @name ReflectionObject#fullName
         * @type {string}
         * @readonly
         */
        fullName: {
          get: function get() {
            var path = [this.name],
                ptr = this.parent;

            while (ptr) {
              path.unshift(ptr.name);
              ptr = ptr.parent;
            }

            return path.join(".");
          }
        }
      });
      /**
       * Converts this reflection object to its descriptor representation.
       * @returns {Object.<string,*>} Descriptor
       * @abstract
       */

      ReflectionObject.prototype.toJSON =
      /* istanbul ignore next */
      function toJSON() {
        throw Error(); // not implemented, shouldn't happen
      };
      /**
       * Called when this object is added to a parent.
       * @param {ReflectionObject} parent Parent added to
       * @returns {undefined}
       */


      ReflectionObject.prototype.onAdd = function onAdd(parent) {
        if (this.parent && this.parent !== parent) this.parent.remove(this);
        this.parent = parent;
        this.resolved = false;
        var root = parent.root;
        if (root instanceof Root) root._handleAdd(this);
      };
      /**
       * Called when this object is removed from a parent.
       * @param {ReflectionObject} parent Parent removed from
       * @returns {undefined}
       */


      ReflectionObject.prototype.onRemove = function onRemove(parent) {
        var root = parent.root;
        if (root instanceof Root) root._handleRemove(this);
        this.parent = null;
        this.resolved = false;
      };
      /**
       * Resolves this objects type references.
       * @returns {ReflectionObject} `this`
       */


      ReflectionObject.prototype.resolve = function resolve() {
        if (this.resolved) return this;
        if (this.root instanceof Root) this.resolved = true; // only if part of a root

        return this;
      };
      /**
       * Gets an option value.
       * @param {string} name Option name
       * @returns {*} Option value or `undefined` if not set
       */


      ReflectionObject.prototype.getOption = function getOption(name) {
        if (this.options) return this.options[name];
        return undefined;
      };
      /**
       * Sets an option.
       * @param {string} name Option name
       * @param {*} value Option value
       * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
       * @returns {ReflectionObject} `this`
       */


      ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
        if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;
        return this;
      };
      /**
       * Sets multiple options.
       * @param {Object.<string,*>} options Options to set
       * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
       * @returns {ReflectionObject} `this`
       */


      ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
        if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) {
          this.setOption(keys[i], options[keys[i]], ifNotSet);
        }
        return this;
      };
      /**
       * Converts this instance to its string representation.
       * @returns {string} Class name[, space, full name]
       */


      ReflectionObject.prototype.toString = function toString() {
        var className = this.constructor.className,
            fullName = this.fullName;
        if (fullName.length) return className + " " + fullName;
        return className;
      };

      ReflectionObject._configure = function (Root_) {
        Root = Root_;
      };
    }, {
      "37": 37
    }],
    25: [function (require, module, exports) {
      "use strict";

      module.exports = OneOf; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

      var Field = require(16),
          util = require(37);
      /**
       * Constructs a new oneof instance.
       * @classdesc Reflected oneof.
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Oneof name
       * @param {string[]|Object.<string,*>} [fieldNames] Field names
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] Comment associated with this field
       */


      function OneOf(name, fieldNames, options, comment) {
        if (!Array.isArray(fieldNames)) {
          options = fieldNames;
          fieldNames = undefined;
        }

        ReflectionObject.call(this, name, options);
        /* istanbul ignore if */

        if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError("fieldNames must be an Array");
        /**
         * Field names that belong to this oneof.
         * @type {string[]}
         */

        this.oneof = fieldNames || []; // toJSON, marker

        /**
         * Fields that belong to this oneof as an array for iteration.
         * @type {Field[]}
         * @readonly
         */

        this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

        /**
         * Comment for this field.
         * @type {string|null}
         */

        this.comment = comment;
      }
      /**
       * Oneof descriptor.
       * @interface IOneOf
       * @property {Array.<string>} oneof Oneof field names
       * @property {Object.<string,*>} [options] Oneof options
       */

      /**
       * Constructs a oneof from a oneof descriptor.
       * @param {string} name Oneof name
       * @param {IOneOf} json Oneof descriptor
       * @returns {OneOf} Created oneof
       * @throws {TypeError} If arguments are invalid
       */


      OneOf.fromJSON = function fromJSON(name, json) {
        return new OneOf(name, json.oneof, json.options, json.comment);
      };
      /**
       * Converts this oneof to a oneof descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IOneOf} Oneof descriptor
       */


      OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", this.options, "oneof", this.oneof, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * Adds the fields of the specified oneof to the parent if not already done so.
       * @param {OneOf} oneof The oneof
       * @returns {undefined}
       * @inner
       * @ignore
       */


      function addFieldsToParent(oneof) {
        if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) {
          if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);
        }
      }
      /**
       * Adds a field to this oneof and removes it from its current parent, if any.
       * @param {Field} field Field to add
       * @returns {OneOf} `this`
       */


      OneOf.prototype.add = function add(field) {
        /* istanbul ignore if */
        if (!(field instanceof Field)) throw TypeError("field must be a Field");
        if (field.parent && field.parent !== this.parent) field.parent.remove(field);
        this.oneof.push(field.name);
        this.fieldsArray.push(field);
        field.partOf = this; // field.parent remains null

        addFieldsToParent(this);
        return this;
      };
      /**
       * Removes a field from this oneof and puts it back to the oneof's parent.
       * @param {Field} field Field to remove
       * @returns {OneOf} `this`
       */


      OneOf.prototype.remove = function remove(field) {
        /* istanbul ignore if */
        if (!(field instanceof Field)) throw TypeError("field must be a Field");
        var index = this.fieldsArray.indexOf(field);
        /* istanbul ignore if */

        if (index < 0) throw Error(field + " is not a member of " + this);
        this.fieldsArray.splice(index, 1);
        index = this.oneof.indexOf(field.name);
        /* istanbul ignore else */

        if (index > -1) // theoretical
          this.oneof.splice(index, 1);
        field.partOf = null;
        return this;
      };
      /**
       * @override
       */


      OneOf.prototype.onAdd = function onAdd(parent) {
        ReflectionObject.prototype.onAdd.call(this, parent);
        var self = this; // Collect present fields

        for (var i = 0; i < this.oneof.length; ++i) {
          var field = parent.get(this.oneof[i]);

          if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
          }
        } // Add not yet present fields


        addFieldsToParent(this);
      };
      /**
       * @override
       */


      OneOf.prototype.onRemove = function onRemove(parent) {
        for (var i = 0, field; i < this.fieldsArray.length; ++i) {
          if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);
        }

        ReflectionObject.prototype.onRemove.call(this, parent);
      };
      /**
       * Decorator function as returned by {@link OneOf.d} (TypeScript).
       * @typedef OneOfDecorator
       * @type {function}
       * @param {Object} prototype Target prototype
       * @param {string} oneofName OneOf name
       * @returns {undefined}
       */

      /**
       * OneOf decorator (TypeScript).
       * @function
       * @param {...string} fieldNames Field names
       * @returns {OneOfDecorator} Decorator function
       * @template T extends string
       */


      OneOf.d = function decorateOneOf() {
        var fieldNames = new Array(arguments.length),
            index = 0;

        while (index < arguments.length) {
          fieldNames[index] = arguments[index++];
        }

        return function oneOfDecorator(prototype, oneofName) {
          util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
          Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
          });
        };
      };
    }, {
      "16": 16,
      "24": 24,
      "37": 37
    }],
    26: [function (require, module, exports) {
      "use strict";

      module.exports = parse;
      parse.filename = null;
      parse.defaults = {
        keepCase: false
      };

      var tokenize = require(34),
          Root = require(29),
          Type = require(35),
          Field = require(16),
          MapField = require(20),
          OneOf = require(25),
          Enum = require(15),
          Service = require(33),
          Method = require(22),
          types = require(36),
          util = require(37);

      var base10Re = /^[1-9][0-9]*$/,
          base10NegRe = /^-?[1-9][0-9]*$/,
          base16Re = /^0[x][0-9a-fA-F]+$/,
          base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
          base8Re = /^0[0-7]+$/,
          base8NegRe = /^-?0[0-7]+$/,
          numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
          nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
          typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
          fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
      /**
       * Result object returned from {@link parse}.
       * @interface IParserResult
       * @property {string|undefined} package Package name, if declared
       * @property {string[]|undefined} imports Imports, if any
       * @property {string[]|undefined} weakImports Weak imports, if any
       * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
       * @property {Root} root Populated root instance
       */

      /**
       * Options modifying the behavior of {@link parse}.
       * @interface IParseOptions
       * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
       * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
       */

      /**
       * Options modifying the behavior of JSON serialization.
       * @interface IToJSONOptions
       * @property {boolean} [keepComments=false] Serializes comments.
       */

      /**
       * Parses the given .proto source and returns an object with the parsed contents.
       * @param {string} source Source contents
       * @param {Root} root Root to populate
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {IParserResult} Parser result
       * @property {string} filename=null Currently processing file name for error reporting, if known
       * @property {IParseOptions} defaults Default {@link IParseOptions}
       */

      function parse(source, root, options) {
        /* eslint-disable callback-return */
        if (!(root instanceof Root)) {
          options = root;
          root = new Root();
        }

        if (!options) options = parse.defaults;
        var tn = tokenize(source, options.alternateCommentMode || false),
            next = tn.next,
            push = tn.push,
            peek = tn.peek,
            skip = tn.skip,
            cmnt = tn.cmnt;
        var head = true,
            pkg,
            imports,
            weakImports,
            syntax,
            isProto3 = false;
        var ptr = root;
        var applyCase = options.keepCase ? function (name) {
          return name;
        } : util.camelCase;
        /* istanbul ignore next */

        function illegal(token, name, insideTryCatch) {
          var filename = parse.filename;
          if (!insideTryCatch) parse.filename = null;
          return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
        }

        function readString() {
          var values = [],
              token;

          do {
            /* istanbul ignore if */
            if ((token = next()) !== "\"" && token !== "'") throw illegal(token);
            values.push(next());
            skip(token);
            token = peek();
          } while (token === "\"" || token === "'");

          return values.join("");
        }

        function readValue(acceptTypeRef) {
          var token = next();

          switch (token) {
            case "'":
            case "\"":
              push(token);
              return readString();

            case "true":
            case "TRUE":
              return true;

            case "false":
            case "FALSE":
              return false;
          }

          try {
            return parseNumber(token,
            /* insideTryCatch */
            true);
          } catch (e) {
            /* istanbul ignore else */
            if (acceptTypeRef && typeRefRe.test(token)) return token;
            /* istanbul ignore next */

            throw illegal(token, "value");
          }
        }

        function readRanges(target, acceptStrings) {
          var token, start;

          do {
            if (acceptStrings && ((token = peek()) === "\"" || token === "'")) target.push(readString());else target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
          } while (skip(",", true));

          skip(";");
        }

        function parseNumber(token, insideTryCatch) {
          var sign = 1;

          if (token.charAt(0) === "-") {
            sign = -1;
            token = token.substring(1);
          }

          switch (token) {
            case "inf":
            case "INF":
            case "Inf":
              return sign * Infinity;

            case "nan":
            case "NAN":
            case "Nan":
            case "NaN":
              return NaN;

            case "0":
              return 0;
          }

          if (base10Re.test(token)) return sign * parseInt(token, 10);
          if (base16Re.test(token)) return sign * parseInt(token, 16);
          if (base8Re.test(token)) return sign * parseInt(token, 8);
          /* istanbul ignore else */

          if (numberRe.test(token)) return sign * parseFloat(token);
          /* istanbul ignore next */

          throw illegal(token, "number", insideTryCatch);
        }

        function parseId(token, acceptNegative) {
          switch (token) {
            case "max":
            case "MAX":
            case "Max":
              return 536870911;

            case "0":
              return 0;
          }
          /* istanbul ignore if */


          if (!acceptNegative && token.charAt(0) === "-") throw illegal(token, "id");
          if (base10NegRe.test(token)) return parseInt(token, 10);
          if (base16NegRe.test(token)) return parseInt(token, 16);
          /* istanbul ignore else */

          if (base8NegRe.test(token)) return parseInt(token, 8);
          /* istanbul ignore next */

          throw illegal(token, "id");
        }

        function parsePackage() {
          /* istanbul ignore if */
          if (pkg !== undefined) throw illegal("package");
          pkg = next();
          /* istanbul ignore if */

          if (!typeRefRe.test(pkg)) throw illegal(pkg, "name");
          ptr = ptr.define(pkg);
          skip(";");
        }

        function parseImport() {
          var token = peek();
          var whichImports;

          switch (token) {
            case "weak":
              whichImports = weakImports || (weakImports = []);
              next();
              break;

            case "public":
              next();
            // eslint-disable-line no-fallthrough

            default:
              whichImports = imports || (imports = []);
              break;
          }

          token = readString();
          skip(";");
          whichImports.push(token);
        }

        function parseSyntax() {
          skip("=");
          syntax = readString();
          isProto3 = syntax === "proto3";
          /* istanbul ignore if */

          if (!isProto3 && syntax !== "proto2") throw illegal(syntax, "syntax");
          skip(";");
        }

        function parseCommon(parent, token) {
          switch (token) {
            case "option":
              parseOption(parent, token);
              skip(";");
              return true;

            case "message":
              parseType(parent, token);
              return true;

            case "enum":
              parseEnum(parent, token);
              return true;

            case "service":
              parseService(parent, token);
              return true;

            case "extend":
              parseExtension(parent, token);
              return true;
          }

          return false;
        }

        function ifBlock(obj, fnIf, fnElse) {
          var trailingLine = tn.line;

          if (obj) {
            obj.comment = cmnt(); // try block-type comment

            obj.filename = parse.filename;
          }

          if (skip("{", true)) {
            var token;

            while ((token = next()) !== "}") {
              fnIf(token);
            }

            skip(";", true);
          } else {
            if (fnElse) fnElse();
            skip(";");
            if (obj && typeof obj.comment !== "string") obj.comment = cmnt(trailingLine); // try line-type comment if no block
          }
        }

        function parseType(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "type name");
          var type = new Type(token);
          ifBlock(type, function parseType_block(token) {
            if (parseCommon(type, token)) return;

            switch (token) {
              case "map":
                parseMapField(type, token);
                break;

              case "required":
              case "optional":
              case "repeated":
                parseField(type, token);
                break;

              case "oneof":
                parseOneOf(type, token);
                break;

              case "extensions":
                readRanges(type.extensions || (type.extensions = []));
                break;

              case "reserved":
                readRanges(type.reserved || (type.reserved = []), true);
                break;

              default:
                /* istanbul ignore if */
                if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);
                push(token);
                parseField(type, "optional");
                break;
            }
          });
          parent.add(type);
        }

        function parseField(parent, rule, extend) {
          var type = next();

          if (type === "group") {
            parseGroup(parent, rule);
            return;
          }
          /* istanbul ignore if */


          if (!typeRefRe.test(type)) throw illegal(type, "type");
          var name = next();
          /* istanbul ignore if */

          if (!nameRe.test(name)) throw illegal(name, "name");
          name = applyCase(name);
          skip("=");
          var field = new Field(name, parseId(next()), type, rule, extend);
          ifBlock(field, function parseField_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(field, token);
              skip(";");
            } else throw illegal(token);
          }, function parseField_line() {
            parseInlineOptions(field);
          });
          parent.add(field); // JSON defaults to packed=true if not set so we have to set packed=false explicity when
          // parsing proto2 descriptors without the option, where applicable. This must be done for
          // all known packable types and anything that could be an enum (= is not a basic type).

          if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption("packed", false,
          /* ifNotSet */
          true);
        }

        function parseGroup(parent, rule) {
          var name = next();
          /* istanbul ignore if */

          if (!nameRe.test(name)) throw illegal(name, "name");
          var fieldName = util.lcFirst(name);
          if (name === fieldName) name = util.ucFirst(name);
          skip("=");
          var id = parseId(next());
          var type = new Type(name);
          type.group = true;
          var field = new Field(fieldName, id, name, rule);
          field.filename = parse.filename;
          ifBlock(type, function parseGroup_block(token) {
            switch (token) {
              case "option":
                parseOption(type, token);
                skip(";");
                break;

              case "required":
              case "optional":
              case "repeated":
                parseField(type, token);
                break;

              /* istanbul ignore next */

              default:
                throw illegal(token);
              // there are no groups with proto3 semantics
            }
          });
          parent.add(type).add(field);
        }

        function parseMapField(parent) {
          skip("<");
          var keyType = next();
          /* istanbul ignore if */

          if (types.mapKey[keyType] === undefined) throw illegal(keyType, "type");
          skip(",");
          var valueType = next();
          /* istanbul ignore if */

          if (!typeRefRe.test(valueType)) throw illegal(valueType, "type");
          skip(">");
          var name = next();
          /* istanbul ignore if */

          if (!nameRe.test(name)) throw illegal(name, "name");
          skip("=");
          var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
          ifBlock(field, function parseMapField_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(field, token);
              skip(";");
            } else throw illegal(token);
          }, function parseMapField_line() {
            parseInlineOptions(field);
          });
          parent.add(field);
        }

        function parseOneOf(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "name");
          var oneof = new OneOf(applyCase(token));
          ifBlock(oneof, function parseOneOf_block(token) {
            if (token === "option") {
              parseOption(oneof, token);
              skip(";");
            } else {
              push(token);
              parseField(oneof, "optional");
            }
          });
          parent.add(oneof);
        }

        function parseEnum(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "name");
          var enm = new Enum(token);
          ifBlock(enm, function parseEnum_block(token) {
            switch (token) {
              case "option":
                parseOption(enm, token);
                skip(";");
                break;

              case "reserved":
                readRanges(enm.reserved || (enm.reserved = []), true);
                break;

              default:
                parseEnumValue(enm, token);
            }
          });
          parent.add(enm);
        }

        function parseEnumValue(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token)) throw illegal(token, "name");
          skip("=");
          var value = parseId(next(), true),
              dummy = {};
          ifBlock(dummy, function parseEnumValue_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(dummy, token); // skip

              skip(";");
            } else throw illegal(token);
          }, function parseEnumValue_line() {
            parseInlineOptions(dummy); // skip
          });
          parent.add(token, value, dummy.comment);
        }

        function parseOption(parent, token) {
          var isCustom = skip("(", true);
          /* istanbul ignore if */

          if (!typeRefRe.test(token = next())) throw illegal(token, "name");
          var name = token;

          if (isCustom) {
            skip(")");
            name = "(" + name + ")";
            token = peek();

            if (fqTypeRefRe.test(token)) {
              name += token;
              next();
            }
          }

          skip("=");
          parseOptionValue(parent, name);
        }

        function parseOptionValue(parent, name) {
          if (skip("{", true)) {
            // { a: "foo" b { c: "bar" } }
            do {
              /* istanbul ignore if */
              if (!nameRe.test(token = next())) throw illegal(token, "name");
              if (peek() === "{") parseOptionValue(parent, name + "." + token);else {
                skip(":");
                if (peek() === "{") parseOptionValue(parent, name + "." + token);else setOption(parent, name + "." + token, readValue(true));
              }
            } while (!skip("}", true));
          } else setOption(parent, name, readValue(true)); // Does not enforce a delimiter to be universal

        }

        function setOption(parent, name, value) {
          if (parent.setOption) parent.setOption(name, value);
        }

        function parseInlineOptions(parent) {
          if (skip("[", true)) {
            do {
              parseOption(parent, "option");
            } while (skip(",", true));

            skip("]");
          }

          return parent;
        }

        function parseService(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "service name");
          var service = new Service(token);
          ifBlock(service, function parseService_block(token) {
            if (parseCommon(service, token)) return;
            /* istanbul ignore else */

            if (token === "rpc") parseMethod(service, token);else throw illegal(token);
          });
          parent.add(service);
        }

        function parseMethod(parent, token) {
          var type = token;
          /* istanbul ignore if */

          if (!nameRe.test(token = next())) throw illegal(token, "name");
          var name = token,
              requestType,
              requestStream,
              responseType,
              responseStream;
          skip("(");
          if (skip("stream", true)) requestStream = true;
          /* istanbul ignore if */

          if (!typeRefRe.test(token = next())) throw illegal(token);
          requestType = token;
          skip(")");
          skip("returns");
          skip("(");
          if (skip("stream", true)) responseStream = true;
          /* istanbul ignore if */

          if (!typeRefRe.test(token = next())) throw illegal(token);
          responseType = token;
          skip(")");
          var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
          ifBlock(method, function parseMethod_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(method, token);
              skip(";");
            } else throw illegal(token);
          });
          parent.add(method);
        }

        function parseExtension(parent, token) {
          /* istanbul ignore if */
          if (!typeRefRe.test(token = next())) throw illegal(token, "reference");
          var reference = token;
          ifBlock(null, function parseExtension_block(token) {
            switch (token) {
              case "required":
              case "repeated":
              case "optional":
                parseField(parent, token, reference);
                break;

              default:
                /* istanbul ignore if */
                if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);
                push(token);
                parseField(parent, "optional", reference);
                break;
            }
          });
        }

        var token;

        while ((token = next()) !== null) {
          switch (token) {
            case "package":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parsePackage();
              break;

            case "import":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parseImport();
              break;

            case "syntax":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parseSyntax();
              break;

            case "option":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parseOption(ptr, token);
              skip(";");
              break;

            default:
              /* istanbul ignore else */
              if (parseCommon(ptr, token)) {
                head = false;
                continue;
              }
              /* istanbul ignore next */


              throw illegal(token);
          }
        }

        parse.filename = null;
        return {
          "package": pkg,
          "imports": imports,
          weakImports: weakImports,
          syntax: syntax,
          root: root
        };
      }
      /**
       * Parses the given .proto source and returns an object with the parsed contents.
       * @name parse
       * @function
       * @param {string} source Source contents
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {IParserResult} Parser result
       * @property {string} filename=null Currently processing file name for error reporting, if known
       * @property {IParseOptions} defaults Default {@link IParseOptions}
       * @variation 2
       */

    }, {
      "15": 15,
      "16": 16,
      "20": 20,
      "22": 22,
      "25": 25,
      "29": 29,
      "33": 33,
      "34": 34,
      "35": 35,
      "36": 36,
      "37": 37
    }],
    27: [function (require, module, exports) {
      "use strict";

      module.exports = Reader;

      var util = require(39);

      var BufferReader; // cyclic

      var LongBits = util.LongBits,
          utf8 = util.utf8;
      /* istanbul ignore next */

      function indexOutOfRange(reader, writeLength) {
        return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
      }
      /**
       * Constructs a new reader instance using the specified buffer.
       * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
       * @constructor
       * @param {Uint8Array} buffer Buffer to read from
       */


      function Reader(buffer) {
        /**
         * Read buffer.
         * @type {Uint8Array}
         */
        this.buf = buffer;
        /**
         * Read buffer position.
         * @type {number}
         */

        this.pos = 0;
        /**
         * Read buffer length.
         * @type {number}
         */

        this.len = buffer.length;
      }

      var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
        throw Error("illegal buffer");
      }
      /* istanbul ignore next */
      : function create_array(buffer) {
        if (Array.isArray(buffer)) return new Reader(buffer);
        throw Error("illegal buffer");
      };
      /**
       * Creates a new reader using the specified buffer.
       * @function
       * @param {Uint8Array|Buffer} buffer Buffer to read from
       * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
       * @throws {Error} If `buffer` is not a valid buffer
       */

      Reader.create = util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
          return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)
          /* istanbul ignore next */
          : create_array(buffer);
        })(buffer);
      }
      /* istanbul ignore next */
      : create_array;
      Reader.prototype._slice = util.Array.prototype.subarray ||
      /* istanbul ignore next */
      util.Array.prototype.slice;
      /**
       * Reads a varint as an unsigned 32 bit value.
       * @function
       * @returns {number} Value read
       */

      Reader.prototype.uint32 = function read_uint32_setup() {
        var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)

        return function read_uint32() {
          value = (this.buf[this.pos] & 127) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          /* istanbul ignore if */

          if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
          }

          return value;
        };
      }();
      /**
       * Reads a varint as a signed 32 bit value.
       * @returns {number} Value read
       */


      Reader.prototype.int32 = function read_int32() {
        return this.uint32() | 0;
      };
      /**
       * Reads a zig-zag encoded varint as a signed 32 bit value.
       * @returns {number} Value read
       */


      Reader.prototype.sint32 = function read_sint32() {
        var value = this.uint32();
        return value >>> 1 ^ -(value & 1) | 0;
      };
      /* eslint-disable no-invalid-this */


      function readLongVarint() {
        // tends to deopt with local vars for octet etc.
        var bits = new LongBits(0, 0);
        var i = 0;

        if (this.len - this.pos > 4) {
          // fast route (lo)
          for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          } // 5th


          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
          if (this.buf[this.pos++] < 128) return bits;
          i = 0;
        } else {
          for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this); // 1st..3th

            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          } // 4th


          bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
          return bits;
        }

        if (this.len - this.pos > 4) {
          // fast route (hi)
          for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          }
        } else {
          for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this); // 6th..10th

            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          }
        }
        /* istanbul ignore next */


        throw Error("invalid varint encoding");
      }
      /* eslint-enable no-invalid-this */

      /**
       * Reads a varint as a signed 64 bit value.
       * @name Reader#int64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a varint as an unsigned 64 bit value.
       * @name Reader#uint64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a zig-zag encoded varint as a signed 64 bit value.
       * @name Reader#sint64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a varint as a boolean.
       * @returns {boolean} Value read
       */


      Reader.prototype.bool = function read_bool() {
        return this.uint32() !== 0;
      };

      function readFixed32_end(buf, end) {
        // note that this uses `end`, not `pos`
        return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
      }
      /**
       * Reads fixed 32 bits as an unsigned 32 bit integer.
       * @returns {number} Value read
       */


      Reader.prototype.fixed32 = function read_fixed32() {
        /* istanbul ignore if */
        if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4);
      };
      /**
       * Reads fixed 32 bits as a signed 32 bit integer.
       * @returns {number} Value read
       */


      Reader.prototype.sfixed32 = function read_sfixed32() {
        /* istanbul ignore if */
        if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4) | 0;
      };
      /* eslint-disable no-invalid-this */


      function readFixed64()
      /* this: Reader */
      {
        /* istanbul ignore if */
        if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
        return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
      }
      /* eslint-enable no-invalid-this */

      /**
       * Reads fixed 64 bits.
       * @name Reader#fixed64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads zig-zag encoded fixed 64 bits.
       * @name Reader#sfixed64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a float (32 bit) as a number.
       * @function
       * @returns {number} Value read
       */


      Reader.prototype["float"] = function read_float() {
        /* istanbul ignore if */
        if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
        var value = util["float"].readFloatLE(this.buf, this.pos);
        this.pos += 4;
        return value;
      };
      /**
       * Reads a double (64 bit float) as a number.
       * @function
       * @returns {number} Value read
       */


      Reader.prototype["double"] = function read_double() {
        /* istanbul ignore if */
        if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
        var value = util["float"].readDoubleLE(this.buf, this.pos);
        this.pos += 8;
        return value;
      };
      /**
       * Reads a sequence of bytes preceeded by its length as a varint.
       * @returns {Uint8Array} Value read
       */


      Reader.prototype.bytes = function read_bytes() {
        var length = this.uint32(),
            start = this.pos,
            end = this.pos + length;
        /* istanbul ignore if */

        if (end > this.len) throw indexOutOfRange(this, length);
        this.pos += length;
        if (Array.isArray(this.buf)) // plain array
          return this.buf.slice(start, end);
        return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
      };
      /**
       * Reads a string preceeded by its byte length as a varint.
       * @returns {string} Value read
       */


      Reader.prototype.string = function read_string() {
        var bytes = this.bytes();
        return utf8.read(bytes, 0, bytes.length);
      };
      /**
       * Skips the specified number of bytes if specified, otherwise skips a varint.
       * @param {number} [length] Length if known, otherwise a varint is assumed
       * @returns {Reader} `this`
       */


      Reader.prototype.skip = function skip(length) {
        if (typeof length === "number") {
          /* istanbul ignore if */
          if (this.pos + length > this.len) throw indexOutOfRange(this, length);
          this.pos += length;
        } else {
          do {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this);
          } while (this.buf[this.pos++] & 128);
        }

        return this;
      };
      /**
       * Skips the next element of the specified wire type.
       * @param {number} wireType Wire type received
       * @returns {Reader} `this`
       */


      Reader.prototype.skipType = function (wireType) {
        switch (wireType) {
          case 0:
            this.skip();
            break;

          case 1:
            this.skip(8);
            break;

          case 2:
            this.skip(this.uint32());
            break;

          case 3:
            do {
              // eslint-disable-line no-constant-condition
              if ((wireType = this.uint32() & 7) === 4) break;
              this.skipType(wireType);
            } while (true);

            break;

          case 5:
            this.skip(4);
            break;

          /* istanbul ignore next */

          default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
        }

        return this;
      };

      Reader._configure = function (BufferReader_) {
        BufferReader = BufferReader_;
        var fn = util.Long ? "toLong" :
        /* istanbul ignore next */
        "toNumber";
        util.merge(Reader.prototype, {
          int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
          },
          uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
          },
          sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
          },
          fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
          },
          sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
          }
        });
      };
    }, {
      "39": 39
    }],
    28: [function (require, module, exports) {
      "use strict";

      module.exports = BufferReader; // extends Reader

      var Reader = require(27);

      (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

      var util = require(39);
      /**
       * Constructs a new buffer reader instance.
       * @classdesc Wire format reader using node buffers.
       * @extends Reader
       * @constructor
       * @param {Buffer} buffer Buffer to read from
       */


      function BufferReader(buffer) {
        Reader.call(this, buffer);
        /**
         * Read buffer.
         * @name BufferReader#buf
         * @type {Buffer}
         */
      }
      /* istanbul ignore else */


      if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;
      /**
       * @override
       */

      BufferReader.prototype.string = function read_string_buffer() {
        var len = this.uint32(); // modifies pos

        return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
      };
      /**
       * Reads a sequence of bytes preceeded by its length as a varint.
       * @name BufferReader#bytes
       * @function
       * @returns {Buffer} Value read
       */

    }, {
      "27": 27,
      "39": 39
    }],
    29: [function (require, module, exports) {
      "use strict";

      module.exports = Root; // extends Namespace

      var Namespace = require(23);

      ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

      var Field = require(16),
          Enum = require(15),
          OneOf = require(25),
          util = require(37);

      var Type, // cyclic
      parse, // might be excluded
      common; // "

      /**
       * Constructs a new root namespace instance.
       * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
       * @extends NamespaceBase
       * @constructor
       * @param {Object.<string,*>} [options] Top level options
       */

      function Root(options) {
        Namespace.call(this, "", options);
        /**
         * Deferred extension fields.
         * @type {Field[]}
         */

        this.deferred = [];
        /**
         * Resolved file names of loaded files.
         * @type {string[]}
         */

        this.files = [];
      }
      /**
       * Loads a namespace descriptor into a root namespace.
       * @param {INamespace} json Nameespace descriptor
       * @param {Root} [root] Root namespace, defaults to create a new one if omitted
       * @returns {Root} Root namespace
       */


      Root.fromJSON = function fromJSON(json, root) {
        if (!root) root = new Root();
        if (json.options) root.setOptions(json.options);
        return root.addJSON(json.nested);
      };
      /**
       * Resolves the path of an imported file, relative to the importing origin.
       * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
       * @function
       * @param {string} origin The file name of the importing file
       * @param {string} target The file name being imported
       * @returns {string|null} Resolved path to `target` or `null` to skip the file
       */


      Root.prototype.resolvePath = util.path.resolve; // A symbol-like function to safely signal synchronous loading

      /* istanbul ignore next */

      function SYNC() {} // eslint-disable-line no-empty-function

      /**
       * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {IParseOptions} options Parse options
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       */


      Root.prototype.load = function load(filename, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = undefined;
        }

        var self = this;
        if (!callback) return util.asPromise(load, self, filename, options);
        var sync = callback === SYNC; // undocumented
        // Finishes loading by calling the callback (exactly once)

        function finish(err, root) {
          /* istanbul ignore if */
          if (!callback) return;
          var cb = callback;
          callback = null;
          if (sync) throw err;
          cb(err, root);
        } // Processes a single file


        function process(filename, source) {
          try {
            if (util.isString(source) && source.charAt(0) === "{") source = JSON.parse(source);
            if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {
              parse.filename = filename;
              var parsed = parse(source, self, options),
                  resolved,
                  i = 0;
              if (parsed.imports) for (; i < parsed.imports.length; ++i) {
                if (resolved = self.resolvePath(filename, parsed.imports[i])) fetch(resolved);
              }
              if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) {
                if (resolved = self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);
              }
            }
          } catch (err) {
            finish(err);
          }

          if (!sync && !queued) finish(null, self); // only once anyway
        } // Fetches a single file


        function fetch(filename, weak) {
          // Strip path if this file references a bundled definition
          var idx = filename.lastIndexOf("google/protobuf/");

          if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common) filename = altname;
          } // Skip if already loaded / attempted


          if (self.files.indexOf(filename) > -1) return;
          self.files.push(filename); // Shortcut bundled definitions

          if (filename in common) {
            if (sync) process(filename, common[filename]);else {
              ++queued;
              setTimeout(function () {
                --queued;
                process(filename, common[filename]);
              });
            }
            return;
          } // Otherwise fetch from disk or network


          if (sync) {
            var source;

            try {
              source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
              if (!weak) finish(err);
              return;
            }

            process(filename, source);
          } else {
            ++queued;
            util.fetch(filename, function (err, source) {
              --queued;
              /* istanbul ignore if */

              if (!callback) return; // terminated meanwhile

              if (err) {
                /* istanbul ignore else */
                if (!weak) finish(err);else if (!queued) // can't be covered reliably
                  finish(null, self);
                return;
              }

              process(filename, source);
            });
          }
        }

        var queued = 0; // Assembling the root namespace doesn't require working type
        // references anymore, so we can load everything in parallel

        if (util.isString(filename)) filename = [filename];

        for (var i = 0, resolved; i < filename.length; ++i) {
          if (resolved = self.resolvePath("", filename[i])) fetch(resolved);
        }

        if (sync) return self;
        if (!queued) finish(null, self);
        return undefined;
      }; // function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

      /**
       * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
       * @function Root#load
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       * @variation 2
       */
      // function load(filename:string, callback:LoadCallback):undefined

      /**
       * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
       * @function Root#load
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {Promise<Root>} Promise
       * @variation 3
       */
      // function load(filename:string, [options:IParseOptions]):Promise<Root>

      /**
       * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
       * @function Root#loadSync
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {Root} Root namespace
       * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
       */


      Root.prototype.loadSync = function loadSync(filename, options) {
        if (!util.isNode) throw Error("not supported");
        return this.load(filename, options, SYNC);
      };
      /**
       * @override
       */


      Root.prototype.resolveAll = function resolveAll() {
        if (this.deferred.length) throw Error("unresolvable extensions: " + this.deferred.map(function (field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
        return Namespace.prototype.resolveAll.call(this);
      }; // only uppercased (and thus conflict-free) children are exposed, see below


      var exposeRe = /^[A-Z]/;
      /**
       * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
       * @param {Root} root Root instance
       * @param {Field} field Declaring extension field witin the declaring type
       * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
       * @inner
       * @ignore
       */

      function tryHandleExtension(root, field) {
        var extendedType = field.parent.lookup(field.extend);

        if (extendedType) {
          var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
          sisterField.declaringField = field;
          field.extensionField = sisterField;
          extendedType.add(sisterField);
          return true;
        }

        return false;
      }
      /**
       * Called when any object is added to this root or its sub-namespaces.
       * @param {ReflectionObject} object Object added
       * @returns {undefined}
       * @private
       */


      Root.prototype._handleAdd = function _handleAdd(object) {
        if (object instanceof Field) {
          if (
          /* an extension field (implies not part of a oneof) */
          object.extend !== undefined &&
          /* not already handled */
          !object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);
        } else if (object instanceof Enum) {
          if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent
        } else if (!(object instanceof OneOf))
          /* everything else is a namespace */
          {
            if (object instanceof Type) // Try to handle any deferred extensions
              for (var i = 0; i < this.deferred.length;) {
                if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;
              }

            for (var j = 0; j <
            /* initializes */
            object.nestedArray.length; ++j) {
              // recurse into the namespace
              this._handleAdd(object._nestedArray[j]);
            }

            if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent
          } // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
        // properties of namespaces just like static code does. This allows using a .d.ts generated for
        // a static module with reflection-based solutions where the condition is met.

      };
      /**
       * Called when any object is removed from this root or its sub-namespaces.
       * @param {ReflectionObject} object Object removed
       * @returns {undefined}
       * @private
       */


      Root.prototype._handleRemove = function _handleRemove(object) {
        if (object instanceof Field) {
          if (
          /* an extension field */
          object.extend !== undefined) {
            if (
            /* already handled */
            object.extensionField) {
              // remove its sister field
              object.extensionField.parent.remove(object.extensionField);
              object.extensionField = null;
            } else {
              // cancel the extension
              var index = this.deferred.indexOf(object);
              /* istanbul ignore else */

              if (index > -1) this.deferred.splice(index, 1);
            }
          }
        } else if (object instanceof Enum) {
          if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values
        } else if (object instanceof Namespace) {
          for (var i = 0; i <
          /* initializes */
          object.nestedArray.length; ++i) {
            // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);
          }

          if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces
        }
      };

      Root._configure = function (Type_, parse_, common_) {
        Type = Type_;
        parse = parse_;
        common = common_;
      };
    }, {
      "15": 15,
      "16": 16,
      "23": 23,
      "25": 25,
      "37": 37
    }],
    30: [function (require, module, exports) {
      "use strict";

      module.exports = {};
      /**
       * Named roots.
       * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
       * Can also be used manually to make roots available accross modules.
       * @name roots
       * @type {Object.<string,Root>}
       * @example
       * // pbjs -r myroot -o compiled.js ...
       *
       * // in another module:
       * require("./compiled.js");
       *
       * // in any subsequent module:
       * var root = protobuf.roots["myroot"];
       */
    }, {}],
    31: [function (require, module, exports) {
      "use strict";
      /**
       * Streaming RPC helpers.
       * @namespace
       */

      var rpc = exports;
      /**
       * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
       * @typedef RPCImpl
       * @type {function}
       * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
       * @param {Uint8Array} requestData Request data
       * @param {RPCImplCallback} callback Callback function
       * @returns {undefined}
       * @example
       * function rpcImpl(method, requestData, callback) {
       *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
       *         throw Error("no such method");
       *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
       *         callback(err, responseData);
       *     });
       * }
       */

      /**
       * Node-style callback as used by {@link RPCImpl}.
       * @typedef RPCImplCallback
       * @type {function}
       * @param {Error|null} error Error, if any, otherwise `null`
       * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
       * @returns {undefined}
       */

      rpc.Service = require(32);
    }, {
      "32": 32
    }],
    32: [function (require, module, exports) {
      "use strict";

      module.exports = Service;

      var util = require(39); // Extends EventEmitter


      (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
      /**
       * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
       *
       * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
       * @typedef rpc.ServiceMethodCallback
       * @template TRes extends Message<TRes>
       * @type {function}
       * @param {Error|null} error Error, if any
       * @param {TRes} [response] Response message
       * @returns {undefined}
       */

      /**
       * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
       * @typedef rpc.ServiceMethod
       * @template TReq extends Message<TReq>
       * @template TRes extends Message<TRes>
       * @type {function}
       * @param {TReq|Properties<TReq>} request Request message or plain object
       * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
       * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
       */

      /**
       * Constructs a new RPC service instance.
       * @classdesc An RPC service as returned by {@link Service#create}.
       * @exports rpc.Service
       * @extends util.EventEmitter
       * @constructor
       * @param {RPCImpl} rpcImpl RPC implementation
       * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
       * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
       */

      function Service(rpcImpl, requestDelimited, responseDelimited) {
        if (typeof rpcImpl !== "function") throw TypeError("rpcImpl must be a function");
        util.EventEmitter.call(this);
        /**
         * RPC implementation. Becomes `null` once the service is ended.
         * @type {RPCImpl|null}
         */

        this.rpcImpl = rpcImpl;
        /**
         * Whether requests are length-delimited.
         * @type {boolean}
         */

        this.requestDelimited = Boolean(requestDelimited);
        /**
         * Whether responses are length-delimited.
         * @type {boolean}
         */

        this.responseDelimited = Boolean(responseDelimited);
      }
      /**
       * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
       * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
       * @param {Constructor<TReq>} requestCtor Request constructor
       * @param {Constructor<TRes>} responseCtor Response constructor
       * @param {TReq|Properties<TReq>} request Request message or plain object
       * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
       * @returns {undefined}
       * @template TReq extends Message<TReq>
       * @template TRes extends Message<TRes>
       */


      Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
        if (!request) throw TypeError("request must be specified");
        var self = this;
        if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

        if (!self.rpcImpl) {
          setTimeout(function () {
            callback(Error("already ended"));
          }, 0);
          return undefined;
        }

        try {
          return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
            if (err) {
              self.emit("error", err, method);
              return callback(err);
            }

            if (response === null) {
              self.end(
              /* endedByRPC */
              true);
              return undefined;
            }

            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err) {
                self.emit("error", err, method);
                return callback(err);
              }
            }

            self.emit("data", response, method);
            return callback(null, response);
          });
        } catch (err) {
          self.emit("error", err, method);
          setTimeout(function () {
            callback(err);
          }, 0);
          return undefined;
        }
      };
      /**
       * Ends this service and emits the `end` event.
       * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
       * @returns {rpc.Service} `this`
       */


      Service.prototype.end = function end(endedByRPC) {
        if (this.rpcImpl) {
          if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
          this.rpcImpl = null;
          this.emit("end").off();
        }

        return this;
      };
    }, {
      "39": 39
    }],
    33: [function (require, module, exports) {
      "use strict";

      module.exports = Service; // extends Namespace

      var Namespace = require(23);

      ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

      var Method = require(22),
          util = require(37),
          rpc = require(31);
      /**
       * Constructs a new service instance.
       * @classdesc Reflected service.
       * @extends NamespaceBase
       * @constructor
       * @param {string} name Service name
       * @param {Object.<string,*>} [options] Service options
       * @throws {TypeError} If arguments are invalid
       */


      function Service(name, options) {
        Namespace.call(this, name, options);
        /**
         * Service methods.
         * @type {Object.<string,Method>}
         */

        this.methods = {}; // toJSON, marker

        /**
         * Cached methods as an array.
         * @type {Method[]|null}
         * @private
         */

        this._methodsArray = null;
      }
      /**
       * Service descriptor.
       * @interface IService
       * @extends INamespace
       * @property {Object.<string,IMethod>} methods Method descriptors
       */

      /**
       * Constructs a service from a service descriptor.
       * @param {string} name Service name
       * @param {IService} json Service descriptor
       * @returns {Service} Created service
       * @throws {TypeError} If arguments are invalid
       */


      Service.fromJSON = function fromJSON(name, json) {
        var service = new Service(name, json.options);
        /* istanbul ignore else */

        if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) {
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
        }
        if (json.nested) service.addJSON(json.nested);
        service.comment = json.comment;
        return service;
      };
      /**
       * Converts this service to a service descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IService} Service descriptor
       */


      Service.prototype.toJSON = function toJSON(toJSONOptions) {
        var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", inherited && inherited.options || undefined, "methods", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) ||
        /* istanbul ignore next */
        {}, "nested", inherited && inherited.nested || undefined, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * Methods of this service as an array for iteration.
       * @name Service#methodsArray
       * @type {Method[]}
       * @readonly
       */


      Object.defineProperty(Service.prototype, "methodsArray", {
        get: function get() {
          return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
        }
      });

      function clearCache(service) {
        service._methodsArray = null;
        return service;
      }
      /**
       * @override
       */


      Service.prototype.get = function get(name) {
        return this.methods[name] || Namespace.prototype.get.call(this, name);
      };
      /**
       * @override
       */


      Service.prototype.resolveAll = function resolveAll() {
        var methods = this.methodsArray;

        for (var i = 0; i < methods.length; ++i) {
          methods[i].resolve();
        }

        return Namespace.prototype.resolve.call(this);
      };
      /**
       * @override
       */


      Service.prototype.add = function add(object) {
        /* istanbul ignore if */
        if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);

        if (object instanceof Method) {
          this.methods[object.name] = object;
          object.parent = this;
          return clearCache(this);
        }

        return Namespace.prototype.add.call(this, object);
      };
      /**
       * @override
       */


      Service.prototype.remove = function remove(object) {
        if (object instanceof Method) {
          /* istanbul ignore if */
          if (this.methods[object.name] !== object) throw Error(object + " is not a member of " + this);
          delete this.methods[object.name];
          object.parent = null;
          return clearCache(this);
        }

        return Namespace.prototype.remove.call(this, object);
      };
      /**
       * Creates a runtime service using the specified rpc implementation.
       * @param {RPCImpl} rpcImpl RPC implementation
       * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
       * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
       * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
       */


      Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
        var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);

        for (var i = 0, method; i <
        /* initializes */
        this.methodsArray.length; ++i) {
          var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
          rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
          });
        }

        return rpcService;
      };
    }, {
      "22": 22,
      "23": 23,
      "31": 31,
      "37": 37
    }],
    34: [function (require, module, exports) {
      "use strict";

      module.exports = tokenize;
      var delimRe = /[\s{}=;:[\],'"()<>]/g,
          stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
          stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
      var setCommentRe = /^ *[*/]+ */,
          setCommentAltRe = /^\s*\*?\/*/,
          setCommentSplitRe = /\n/g,
          whitespaceRe = /\s/,
          unescapeRe = /\\(.?)/g;
      var unescapeMap = {
        "0": "\0",
        "r": "\r",
        "n": "\n",
        "t": "\t"
      };
      /**
       * Unescapes a string.
       * @param {string} str String to unescape
       * @returns {string} Unescaped string
       * @property {Object.<string,string>} map Special characters map
       * @memberof tokenize
       */

      function unescape(str) {
        return str.replace(unescapeRe, function ($0, $1) {
          switch ($1) {
            case "\\":
            case "":
              return $1;

            default:
              return unescapeMap[$1] || "";
          }
        });
      }

      tokenize.unescape = unescape;
      /**
       * Gets the next token and advances.
       * @typedef TokenizerHandleNext
       * @type {function}
       * @returns {string|null} Next token or `null` on eof
       */

      /**
       * Peeks for the next token.
       * @typedef TokenizerHandlePeek
       * @type {function}
       * @returns {string|null} Next token or `null` on eof
       */

      /**
       * Pushes a token back to the stack.
       * @typedef TokenizerHandlePush
       * @type {function}
       * @param {string} token Token
       * @returns {undefined}
       */

      /**
       * Skips the next token.
       * @typedef TokenizerHandleSkip
       * @type {function}
       * @param {string} expected Expected token
       * @param {boolean} [optional=false] If optional
       * @returns {boolean} Whether the token matched
       * @throws {Error} If the token didn't match and is not optional
       */

      /**
       * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
       * @typedef TokenizerHandleCmnt
       * @type {function}
       * @param {number} [line] Line number
       * @returns {string|null} Comment text or `null` if none
       */

      /**
       * Handle object returned from {@link tokenize}.
       * @interface ITokenizerHandle
       * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
       * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
       * @property {TokenizerHandlePush} push Pushes a token back to the stack
       * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
       * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
       * @property {number} line Current line number
       */

      /**
       * Tokenizes the given .proto source and returns an object with useful utility functions.
       * @param {string} source Source contents
       * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
       * @returns {ITokenizerHandle} Tokenizer handle
       */

      function tokenize(source, alternateCommentMode) {
        /* eslint-disable callback-return */
        source = source.toString();
        var offset = 0,
            length = source.length,
            line = 1,
            commentType = null,
            commentText = null,
            commentLine = 0,
            commentLineEmpty = false;
        var stack = [];
        var stringDelim = null;
        /* istanbul ignore next */

        /**
         * Creates an error for illegal syntax.
         * @param {string} subject Subject
         * @returns {Error} Error created
         * @inner
         */

        function illegal(subject) {
          return Error("illegal " + subject + " (line " + line + ")");
        }
        /**
         * Reads a string till its end.
         * @returns {string} String read
         * @inner
         */


        function readString() {
          var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
          re.lastIndex = offset - 1;
          var match = re.exec(source);
          if (!match) throw illegal("string");
          offset = re.lastIndex;
          push(stringDelim);
          stringDelim = null;
          return unescape(match[1]);
        }
        /**
         * Gets the character at `pos` within the source.
         * @param {number} pos Position
         * @returns {string} Character
         * @inner
         */


        function charAt(pos) {
          return source.charAt(pos);
        }
        /**
         * Sets the current comment text.
         * @param {number} start Start offset
         * @param {number} end End offset
         * @returns {undefined}
         * @inner
         */


        function setComment(start, end) {
          commentType = source.charAt(start++);
          commentLine = line;
          commentLineEmpty = false;
          var lookback;

          if (alternateCommentMode) {
            lookback = 2; // alternate comment parsing: "//" or "/*"
          } else {
            lookback = 3; // "///" or "/**"
          }

          var commentOffset = start - lookback,
              c;

          do {
            if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
              commentLineEmpty = true;
              break;
            }
          } while (c === " " || c === "\t");

          var lines = source.substring(start, end).split(setCommentSplitRe);

          for (var i = 0; i < lines.length; ++i) {
            lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
          }

          commentText = lines.join("\n").trim();
        }

        function isDoubleSlashCommentLine(startOffset) {
          var endOffset = findEndOfLine(startOffset); // see if remaining line matches comment pattern

          var lineText = source.substring(startOffset, endOffset); // look for 1 or 2 slashes since startOffset would already point past
          // the first slash that started the comment.

          var isComment = /^\s*\/{1,2}/.test(lineText);
          return isComment;
        }

        function findEndOfLine(cursor) {
          // find end of cursor's line
          var endOffset = cursor;

          while (endOffset < length && charAt(endOffset) !== "\n") {
            endOffset++;
          }

          return endOffset;
        }
        /**
         * Obtains the next token.
         * @returns {string|null} Next token or `null` on eof
         * @inner
         */


        function next() {
          if (stack.length > 0) return stack.shift();
          if (stringDelim) return readString();
          var repeat, prev, curr, start, isDoc;

          do {
            if (offset === length) return null;
            repeat = false;

            while (whitespaceRe.test(curr = charAt(offset))) {
              if (curr === "\n") ++line;
              if (++offset === length) return null;
            }

            if (charAt(offset) === "/") {
              if (++offset === length) {
                throw illegal("comment");
              }

              if (charAt(offset) === "/") {
                // Line
                if (!alternateCommentMode) {
                  // check for triple-slash comment
                  isDoc = charAt(start = offset + 1) === "/";

                  while (charAt(++offset) !== "\n") {
                    if (offset === length) {
                      return null;
                    }
                  }

                  ++offset;

                  if (isDoc) {
                    setComment(start, offset - 1);
                  }

                  ++line;
                  repeat = true;
                } else {
                  // check for double-slash comments, consolidating consecutive lines
                  start = offset;
                  isDoc = false;

                  if (isDoubleSlashCommentLine(offset)) {
                    isDoc = true;

                    do {
                      offset = findEndOfLine(offset);

                      if (offset === length) {
                        break;
                      }

                      offset++;
                    } while (isDoubleSlashCommentLine(offset));
                  } else {
                    offset = Math.min(length, findEndOfLine(offset) + 1);
                  }

                  if (isDoc) {
                    setComment(start, offset);
                  }

                  line++;
                  repeat = true;
                }
              } else if ((curr = charAt(offset)) === "*") {
                /* Block */
                // check for /** (regular comment mode) or /* (alternate comment mode)
                start = offset + 1;
                isDoc = alternateCommentMode || charAt(start) === "*";

                do {
                  if (curr === "\n") {
                    ++line;
                  }

                  if (++offset === length) {
                    throw illegal("comment");
                  }

                  prev = curr;
                  curr = charAt(offset);
                } while (prev !== "*" || curr !== "/");

                ++offset;

                if (isDoc) {
                  setComment(start, offset - 2);
                }

                repeat = true;
              } else {
                return "/";
              }
            }
          } while (repeat); // offset !== length if we got here


          var end = offset;
          delimRe.lastIndex = 0;
          var delim = delimRe.test(charAt(end++));
          if (!delim) while (end < length && !delimRe.test(charAt(end))) {
            ++end;
          }
          var token = source.substring(offset, offset = end);
          if (token === "\"" || token === "'") stringDelim = token;
          return token;
        }
        /**
         * Pushes a token back to the stack.
         * @param {string} token Token
         * @returns {undefined}
         * @inner
         */


        function push(token) {
          stack.push(token);
        }
        /**
         * Peeks for the next token.
         * @returns {string|null} Token or `null` on eof
         * @inner
         */


        function peek() {
          if (!stack.length) {
            var token = next();
            if (token === null) return null;
            push(token);
          }

          return stack[0];
        }
        /**
         * Skips a token.
         * @param {string} expected Expected token
         * @param {boolean} [optional=false] Whether the token is optional
         * @returns {boolean} `true` when skipped, `false` if not
         * @throws {Error} When a required token is not present
         * @inner
         */


        function skip(expected, optional) {
          var actual = peek(),
              equals = actual === expected;

          if (equals) {
            next();
            return true;
          }

          if (!optional) throw illegal("token '" + actual + "', '" + expected + "' expected");
          return false;
        }
        /**
         * Gets a comment.
         * @param {number} [trailingLine] Line number if looking for a trailing comment
         * @returns {string|null} Comment text
         * @inner
         */


        function cmnt(trailingLine) {
          var ret = null;

          if (trailingLine === undefined) {
            if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
              ret = commentText;
            }
          } else {
            /* istanbul ignore else */
            if (commentLine < trailingLine) {
              peek();
            }

            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
              ret = commentText;
            }
          }

          return ret;
        }

        return Object.defineProperty({
          next: next,
          peek: peek,
          push: push,
          skip: skip,
          cmnt: cmnt
        }, "line", {
          get: function get() {
            return line;
          }
        });
        /* eslint-enable callback-return */
      }
    }, {}],
    35: [function (require, module, exports) {
      "use strict";

      module.exports = Type; // extends Namespace

      var Namespace = require(23);

      ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

      var Enum = require(15),
          OneOf = require(25),
          Field = require(16),
          MapField = require(20),
          Service = require(33),
          Message = require(21),
          Reader = require(27),
          Writer = require(42),
          util = require(37),
          encoder = require(14),
          decoder = require(13),
          verifier = require(40),
          converter = require(12),
          wrappers = require(41);
      /**
       * Constructs a new reflected message type instance.
       * @classdesc Reflected message type.
       * @extends NamespaceBase
       * @constructor
       * @param {string} name Message name
       * @param {Object.<string,*>} [options] Declared options
       */


      function Type(name, options) {
        Namespace.call(this, name, options);
        /**
         * Message fields.
         * @type {Object.<string,Field>}
         */

        this.fields = {}; // toJSON, marker

        /**
         * Oneofs declared within this namespace, if any.
         * @type {Object.<string,OneOf>}
         */

        this.oneofs = undefined; // toJSON

        /**
         * Extension ranges, if any.
         * @type {number[][]}
         */

        this.extensions = undefined; // toJSON

        /**
         * Reserved ranges, if any.
         * @type {Array.<number[]|string>}
         */

        this.reserved = undefined; // toJSON

        /*?
         * Whether this type is a legacy group.
         * @type {boolean|undefined}
         */

        this.group = undefined; // toJSON

        /**
         * Cached fields by id.
         * @type {Object.<number,Field>|null}
         * @private
         */

        this._fieldsById = null;
        /**
         * Cached fields as an array.
         * @type {Field[]|null}
         * @private
         */

        this._fieldsArray = null;
        /**
         * Cached oneofs as an array.
         * @type {OneOf[]|null}
         * @private
         */

        this._oneofsArray = null;
        /**
         * Cached constructor.
         * @type {Constructor<{}>}
         * @private
         */

        this._ctor = null;
      }

      Object.defineProperties(Type.prototype, {
        /**
         * Message fields by id.
         * @name Type#fieldsById
         * @type {Object.<number,Field>}
         * @readonly
         */
        fieldsById: {
          get: function get() {
            /* istanbul ignore if */
            if (this._fieldsById) return this._fieldsById;
            this._fieldsById = {};

            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
              var field = this.fields[names[i]],
                  id = field.id;
              /* istanbul ignore if */

              if (this._fieldsById[id]) throw Error("duplicate id " + id + " in " + this);
              this._fieldsById[id] = field;
            }

            return this._fieldsById;
          }
        },

        /**
         * Fields of this message as an array for iteration.
         * @name Type#fieldsArray
         * @type {Field[]}
         * @readonly
         */
        fieldsArray: {
          get: function get() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
          }
        },

        /**
         * Oneofs of this message as an array for iteration.
         * @name Type#oneofsArray
         * @type {OneOf[]}
         * @readonly
         */
        oneofsArray: {
          get: function get() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
          }
        },

        /**
         * The registered constructor, if any registered, otherwise a generic constructor.
         * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
         * @name Type#ctor
         * @type {Constructor<{}>}
         */
        ctor: {
          get: function get() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
          },
          set: function set(ctor) {
            // Ensure proper prototype
            var prototype = ctor.prototype;

            if (!(prototype instanceof Message)) {
              (ctor.prototype = new Message()).constructor = ctor;
              util.merge(ctor.prototype, prototype);
            } // Classes and messages reference their reflected type


            ctor.$type = ctor.prototype.$type = this; // Mix in static methods

            util.merge(ctor, Message, true);
            this._ctor = ctor; // Messages have non-enumerable default values on their prototype

            var i = 0;

            for (; i <
            /* initializes */
            this.fieldsArray.length; ++i) {
              this._fieldsArray[i].resolve();
            } // ensures a proper value
            // Messages have non-enumerable getters and setters for each virtual oneof field


            var ctorProperties = {};

            for (i = 0; i <
            /* initializes */
            this.oneofsArray.length; ++i) {
              ctorProperties[this._oneofsArray[i].resolve().name] = {
                get: util.oneOfGetter(this._oneofsArray[i].oneof),
                set: util.oneOfSetter(this._oneofsArray[i].oneof)
              };
            }

            if (i) Object.defineProperties(ctor.prototype, ctorProperties);
          }
        }
      });
      /**
       * Generates a constructor function for the specified type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */

      Type.generateConstructor = function generateConstructor(mtype) {
        /* eslint-disable no-unexpected-multiline */
        var gen = util.codegen(["p"], mtype.name); // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype

        for (var i = 0, field; i < mtype.fieldsArray.length; ++i) {
          if ((field = mtype._fieldsArray[i]).map) gen("this%s={}", util.safeProp(field.name));else if (field.repeated) gen("this%s=[]", util.safeProp(field.name));
        }

        return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
        ("this[ks[i]]=p[ks[i]]");
        /* eslint-enable no-unexpected-multiline */
      };

      function clearCache(type) {
        type._fieldsById = type._fieldsArray = type._oneofsArray = null;
        delete type.encode;
        delete type.decode;
        delete type.verify;
        return type;
      }
      /**
       * Message type descriptor.
       * @interface IType
       * @extends INamespace
       * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
       * @property {Object.<string,IField>} fields Field descriptors
       * @property {number[][]} [extensions] Extension ranges
       * @property {number[][]} [reserved] Reserved ranges
       * @property {boolean} [group=false] Whether a legacy group or not
       */

      /**
       * Creates a message type from a message type descriptor.
       * @param {string} name Message name
       * @param {IType} json Message type descriptor
       * @returns {Type} Created message type
       */


      Type.fromJSON = function fromJSON(name, json) {
        var type = new Type(name, json.options);
        type.extensions = json.extensions;
        type.reserved = json.reserved;
        var names = Object.keys(json.fields),
            i = 0;

        for (; i < names.length; ++i) {
          type.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
        }

        if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) {
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
        }
        if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add( // most to least likely
          (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
        }
        if (json.extensions && json.extensions.length) type.extensions = json.extensions;
        if (json.reserved && json.reserved.length) type.reserved = json.reserved;
        if (json.group) type.group = true;
        if (json.comment) type.comment = json.comment;
        return type;
      };
      /**
       * Converts this message type to a message type descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IType} Message type descriptor
       */


      Type.prototype.toJSON = function toJSON(toJSONOptions) {
        var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", inherited && inherited.options || undefined, "oneofs", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), "fields", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {}, "extensions", this.extensions && this.extensions.length ? this.extensions : undefined, "reserved", this.reserved && this.reserved.length ? this.reserved : undefined, "group", this.group || undefined, "nested", inherited && inherited.nested || undefined, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * @override
       */


      Type.prototype.resolveAll = function resolveAll() {
        var fields = this.fieldsArray,
            i = 0;

        while (i < fields.length) {
          fields[i++].resolve();
        }

        var oneofs = this.oneofsArray;
        i = 0;

        while (i < oneofs.length) {
          oneofs[i++].resolve();
        }

        return Namespace.prototype.resolveAll.call(this);
      };
      /**
       * @override
       */


      Type.prototype.get = function get(name) {
        return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
      };
      /**
       * Adds a nested object to this type.
       * @param {ReflectionObject} object Nested object to add
       * @returns {Type} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
       */


      Type.prototype.add = function add(object) {
        if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);

        if (object instanceof Field && object.extend === undefined) {
          // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
          // The root object takes care of adding distinct sister-fields to the respective extended
          // type instead.
          // avoids calling the getter if not absolutely necessary because it's called quite frequently
          if (this._fieldsById ?
          /* istanbul ignore next */
          this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error("duplicate id " + object.id + " in " + this);
          if (this.isReservedId(object.id)) throw Error("id " + object.id + " is reserved in " + this);
          if (this.isReservedName(object.name)) throw Error("name '" + object.name + "' is reserved in " + this);
          if (object.parent) object.parent.remove(object);
          this.fields[object.name] = object;
          object.message = this;
          object.onAdd(this);
          return clearCache(this);
        }

        if (object instanceof OneOf) {
          if (!this.oneofs) this.oneofs = {};
          this.oneofs[object.name] = object;
          object.onAdd(this);
          return clearCache(this);
        }

        return Namespace.prototype.add.call(this, object);
      };
      /**
       * Removes a nested object from this type.
       * @param {ReflectionObject} object Nested object to remove
       * @returns {Type} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If `object` is not a member of this type
       */


      Type.prototype.remove = function remove(object) {
        if (object instanceof Field && object.extend === undefined) {
          // See Type#add for the reason why extension fields are excluded here.

          /* istanbul ignore if */
          if (!this.fields || this.fields[object.name] !== object) throw Error(object + " is not a member of " + this);
          delete this.fields[object.name];
          object.parent = null;
          object.onRemove(this);
          return clearCache(this);
        }

        if (object instanceof OneOf) {
          /* istanbul ignore if */
          if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + " is not a member of " + this);
          delete this.oneofs[object.name];
          object.parent = null;
          object.onRemove(this);
          return clearCache(this);
        }

        return Namespace.prototype.remove.call(this, object);
      };
      /**
       * Tests if the specified id is reserved.
       * @param {number} id Id to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Type.prototype.isReservedId = function isReservedId(id) {
        return Namespace.isReservedId(this.reserved, id);
      };
      /**
       * Tests if the specified name is reserved.
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Type.prototype.isReservedName = function isReservedName(name) {
        return Namespace.isReservedName(this.reserved, name);
      };
      /**
       * Creates a new message of this type using the specified properties.
       * @param {Object.<string,*>} [properties] Properties to set
       * @returns {Message<{}>} Message instance
       */


      Type.prototype.create = function create(properties) {
        return new this.ctor(properties);
      };
      /**
       * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
       * @returns {Type} `this`
       */


      Type.prototype.setup = function setup() {
        // Sets up everything at once so that the prototype chain does not have to be re-evaluated
        // multiple times (V8, soft-deopt prototype-check).
        var fullName = this.fullName,
            types = [];

        for (var i = 0; i <
        /* initializes */
        this.fieldsArray.length; ++i) {
          types.push(this._fieldsArray[i].resolve().resolvedType);
        } // Replace setup methods with type-specific generated functions


        this.encode = encoder(this)({
          Writer: Writer,
          types: types,
          util: util
        });
        this.decode = decoder(this)({
          Reader: Reader,
          types: types,
          util: util
        });
        this.verify = verifier(this)({
          types: types,
          util: util
        });
        this.fromObject = converter.fromObject(this)({
          types: types,
          util: util
        });
        this.toObject = converter.toObject(this)({
          types: types,
          util: util
        }); // Inject custom wrappers for common types

        var wrapper = wrappers[fullName];

        if (wrapper) {
          var originalThis = Object.create(this); // if (wrapper.fromObject) {

          originalThis.fromObject = this.fromObject;
          this.fromObject = wrapper.fromObject.bind(originalThis); // }
          // if (wrapper.toObject) {

          originalThis.toObject = this.toObject;
          this.toObject = wrapper.toObject.bind(originalThis); // }
        }

        return this;
      };
      /**
       * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
       * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
       * @param {Writer} [writer] Writer to encode to
       * @returns {Writer} writer
       */


      Type.prototype.encode = function encode_setup(message, writer) {
        return this.setup().encode(message, writer); // overrides this method
      };
      /**
       * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
       * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
       * @param {Writer} [writer] Writer to encode to
       * @returns {Writer} writer
       */


      Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
      };
      /**
       * Decodes a message of this type.
       * @param {Reader|Uint8Array} reader Reader or buffer to decode from
       * @param {number} [length] Length of the message, if known beforehand
       * @returns {Message<{}>} Decoded message
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {util.ProtocolError<{}>} If required fields are missing
       */


      Type.prototype.decode = function decode_setup(reader, length) {
        return this.setup().decode(reader, length); // overrides this method
      };
      /**
       * Decodes a message of this type preceeded by its byte length as a varint.
       * @param {Reader|Uint8Array} reader Reader or buffer to decode from
       * @returns {Message<{}>} Decoded message
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {util.ProtocolError} If required fields are missing
       */


      Type.prototype.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof Reader)) reader = Reader.create(reader);
        return this.decode(reader, reader.uint32());
      };
      /**
       * Verifies that field values are valid and that required fields are present.
       * @param {Object.<string,*>} message Plain object to verify
       * @returns {null|string} `null` if valid, otherwise the reason why it is not
       */


      Type.prototype.verify = function verify_setup(message) {
        return this.setup().verify(message); // overrides this method
      };
      /**
       * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
       * @param {Object.<string,*>} object Plain object to convert
       * @returns {Message<{}>} Message instance
       */


      Type.prototype.fromObject = function fromObject(object) {
        return this.setup().fromObject(object);
      };
      /**
       * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
       * @interface IConversionOptions
       * @property {Function} [longs] Long conversion type.
       * Valid values are `String` and `Number` (the global types).
       * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
       * @property {Function} [enums] Enum value conversion type.
       * Only valid value is `String` (the global type).
       * Defaults to copy the present value, which is the numeric id.
       * @property {Function} [bytes] Bytes value conversion type.
       * Valid values are `Array` and (a base64 encoded) `String` (the global types).
       * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
       * @property {boolean} [defaults=false] Also sets default values on the resulting object
       * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
       * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
       * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
       * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
       */

      /**
       * Creates a plain object from a message of this type. Also converts values to other types if specified.
       * @param {Message<{}>} message Message instance
       * @param {IConversionOptions} [options] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      Type.prototype.toObject = function toObject(message, options) {
        return this.setup().toObject(message, options);
      };
      /**
       * Decorator function as returned by {@link Type.d} (TypeScript).
       * @typedef TypeDecorator
       * @type {function}
       * @param {Constructor<T>} target Target constructor
       * @returns {undefined}
       * @template T extends Message<T>
       */

      /**
       * Type decorator (TypeScript).
       * @param {string} [typeName] Type name, defaults to the constructor's name
       * @returns {TypeDecorator<T>} Decorator function
       * @template T extends Message<T>
       */


      Type.d = function decorateType(typeName) {
        return function typeDecorator(target) {
          util.decorateType(target, typeName);
        };
      };
    }, {
      "12": 12,
      "13": 13,
      "14": 14,
      "15": 15,
      "16": 16,
      "20": 20,
      "21": 21,
      "23": 23,
      "25": 25,
      "27": 27,
      "33": 33,
      "37": 37,
      "40": 40,
      "41": 41,
      "42": 42
    }],
    36: [function (require, module, exports) {
      "use strict";
      /**
       * Common type constants.
       * @namespace
       */

      var types = exports;

      var util = require(37);

      var s = ["double", // 0
      "float", // 1
      "int32", // 2
      "uint32", // 3
      "sint32", // 4
      "fixed32", // 5
      "sfixed32", // 6
      "int64", // 7
      "uint64", // 8
      "sint64", // 9
      "fixed64", // 10
      "sfixed64", // 11
      "bool", // 12
      "string", // 13
      "bytes" // 14
      ];

      function bake(values, offset) {
        var i = 0,
            o = {};
        offset |= 0;

        while (i < values.length) {
          o[s[i + offset]] = values[i++];
        }

        return o;
      }
      /**
       * Basic type wire types.
       * @type {Object.<string,number>}
       * @const
       * @property {number} double=1 Fixed64 wire type
       * @property {number} float=5 Fixed32 wire type
       * @property {number} int32=0 Varint wire type
       * @property {number} uint32=0 Varint wire type
       * @property {number} sint32=0 Varint wire type
       * @property {number} fixed32=5 Fixed32 wire type
       * @property {number} sfixed32=5 Fixed32 wire type
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       * @property {number} bool=0 Varint wire type
       * @property {number} string=2 Ldelim wire type
       * @property {number} bytes=2 Ldelim wire type
       */


      types.basic = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2,
      /* bytes    */
      2]);
      /**
       * Basic type defaults.
       * @type {Object.<string,*>}
       * @const
       * @property {number} double=0 Double default
       * @property {number} float=0 Float default
       * @property {number} int32=0 Int32 default
       * @property {number} uint32=0 Uint32 default
       * @property {number} sint32=0 Sint32 default
       * @property {number} fixed32=0 Fixed32 default
       * @property {number} sfixed32=0 Sfixed32 default
       * @property {number} int64=0 Int64 default
       * @property {number} uint64=0 Uint64 default
       * @property {number} sint64=0 Sint32 default
       * @property {number} fixed64=0 Fixed64 default
       * @property {number} sfixed64=0 Sfixed64 default
       * @property {boolean} bool=false Bool default
       * @property {string} string="" String default
       * @property {Array.<number>} bytes=Array(0) Bytes default
       * @property {null} message=null Message default
       */

      types.defaults = bake([
      /* double   */
      0,
      /* float    */
      0,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      0,
      /* sfixed32 */
      0,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      0,
      /* sfixed64 */
      0,
      /* bool     */
      false,
      /* string   */
      "",
      /* bytes    */
      util.emptyArray,
      /* message  */
      null]);
      /**
       * Basic long type wire types.
       * @type {Object.<string,number>}
       * @const
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       */

      types["long"] = bake([
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1], 7);
      /**
       * Allowed types for map keys with their associated wire type.
       * @type {Object.<string,number>}
       * @const
       * @property {number} int32=0 Varint wire type
       * @property {number} uint32=0 Varint wire type
       * @property {number} sint32=0 Varint wire type
       * @property {number} fixed32=5 Fixed32 wire type
       * @property {number} sfixed32=5 Fixed32 wire type
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       * @property {number} bool=0 Varint wire type
       * @property {number} string=2 Ldelim wire type
       */

      types.mapKey = bake([
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2], 2);
      /**
       * Allowed types for packed repeated fields with their associated wire type.
       * @type {Object.<string,number>}
       * @const
       * @property {number} double=1 Fixed64 wire type
       * @property {number} float=5 Fixed32 wire type
       * @property {number} int32=0 Varint wire type
       * @property {number} uint32=0 Varint wire type
       * @property {number} sint32=0 Varint wire type
       * @property {number} fixed32=5 Fixed32 wire type
       * @property {number} sfixed32=5 Fixed32 wire type
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       * @property {number} bool=0 Varint wire type
       */

      types.packed = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0]);
    }, {
      "37": 37
    }],
    37: [function (require, module, exports) {
      "use strict";
      /**
       * Various utility functions.
       * @namespace
       */

      var util = module.exports = require(39);

      var roots = require(30);

      var Type, // cyclic
      Enum;
      util.codegen = require(3);
      util.fetch = require(5);
      util.path = require(8);
      /**
       * Node's fs module if available.
       * @type {Object.<string,*>}
       */

      util.fs = util.inquire("fs");
      /**
       * Converts an object's values to an array.
       * @param {Object.<string,*>} object Object to convert
       * @returns {Array.<*>} Converted array
       */

      util.toArray = function toArray(object) {
        if (object) {
          var keys = Object.keys(object),
              array = new Array(keys.length),
              index = 0;

          while (index < keys.length) {
            array[index] = object[keys[index++]];
          }

          return array;
        }

        return [];
      };
      /**
       * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
       * @param {Array.<*>} array Array to convert
       * @returns {Object.<string,*>} Converted object
       */


      util.toObject = function toObject(array) {
        var object = {},
            index = 0;

        while (index < array.length) {
          var key = array[index++],
              val = array[index++];
          if (val !== undefined) object[key] = val;
        }

        return object;
      };

      var safePropBackslashRe = /\\/g,
          safePropQuoteRe = /"/g;
      /**
       * Tests whether the specified name is a reserved word in JS.
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */

      util.isReserved = function isReserved(name) {
        return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
      };
      /**
       * Returns a safe property accessor for the specified property name.
       * @param {string} prop Property name
       * @returns {string} Safe accessor
       */


      util.safeProp = function safeProp(prop) {
        if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop)) return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
        return "." + prop;
      };
      /**
       * Converts the first character of a string to upper case.
       * @param {string} str String to convert
       * @returns {string} Converted string
       */


      util.ucFirst = function ucFirst(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      };

      var camelCaseRe = /_([a-z])/g;
      /**
       * Converts a string to camel case.
       * @param {string} str String to convert
       * @returns {string} Converted string
       */

      util.camelCase = function camelCase(str) {
        return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function ($0, $1) {
          return $1.toUpperCase();
        });
      };
      /**
       * Compares reflected fields by id.
       * @param {Field} a First field
       * @param {Field} b Second field
       * @returns {number} Comparison value
       */


      util.compareFieldsById = function compareFieldsById(a, b) {
        return a.id - b.id;
      };
      /**
       * Decorator helper for types (TypeScript).
       * @param {Constructor<T>} ctor Constructor function
       * @param {string} [typeName] Type name, defaults to the constructor's name
       * @returns {Type} Reflected type
       * @template T extends Message<T>
       * @property {Root} root Decorators root
       */


      util.decorateType = function decorateType(ctor, typeName) {
        /* istanbul ignore if */
        if (ctor.$type) {
          if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
          }

          return ctor.$type;
        }
        /* istanbul ignore next */


        if (!Type) Type = require(35);
        var type = new Type(typeName || ctor.name);
        util.decorateRoot.add(type);
        type.ctor = ctor; // sets up .encode, .decode etc.

        Object.defineProperty(ctor, "$type", {
          value: type,
          enumerable: false
        });
        Object.defineProperty(ctor.prototype, "$type", {
          value: type,
          enumerable: false
        });
        return type;
      };

      var decorateEnumIndex = 0;
      /**
       * Decorator helper for enums (TypeScript).
       * @param {Object} object Enum object
       * @returns {Enum} Reflected enum
       */

      util.decorateEnum = function decorateEnum(object) {
        /* istanbul ignore if */
        if (object.$type) return object.$type;
        /* istanbul ignore next */

        if (!Enum) Enum = require(15);
        var enm = new Enum("Enum" + decorateEnumIndex++, object);
        util.decorateRoot.add(enm);
        Object.defineProperty(object, "$type", {
          value: enm,
          enumerable: false
        });
        return enm;
      };
      /**
       * Decorator root (TypeScript).
       * @name util.decorateRoot
       * @type {Root}
       * @readonly
       */


      Object.defineProperty(util, "decorateRoot", {
        get: function get() {
          return roots["decorated"] || (roots["decorated"] = new (require(29))());
        }
      });
    }, {
      "15": 15,
      "29": 29,
      "3": 3,
      "30": 30,
      "35": 35,
      "39": 39,
      "5": 5,
      "8": 8
    }],
    38: [function (require, module, exports) {
      "use strict";

      module.exports = LongBits;

      var util = require(39);
      /**
       * Constructs new long bits.
       * @classdesc Helper class for working with the low and high bits of a 64 bit value.
       * @memberof util
       * @constructor
       * @param {number} lo Low 32 bits, unsigned
       * @param {number} hi High 32 bits, unsigned
       */


      function LongBits(lo, hi) {
        // note that the casts below are theoretically unnecessary as of today, but older statically
        // generated converter code might still call the ctor with signed 32bits. kept for compat.

        /**
         * Low bits.
         * @type {number}
         */
        this.lo = lo >>> 0;
        /**
         * High bits.
         * @type {number}
         */

        this.hi = hi >>> 0;
      }
      /**
       * Zero bits.
       * @memberof util.LongBits
       * @type {util.LongBits}
       */


      var zero = LongBits.zero = new LongBits(0, 0);

      zero.toNumber = function () {
        return 0;
      };

      zero.zzEncode = zero.zzDecode = function () {
        return this;
      };

      zero.length = function () {
        return 1;
      };
      /**
       * Zero hash.
       * @memberof util.LongBits
       * @type {string}
       */


      var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
      /**
       * Constructs new long bits from the specified number.
       * @param {number} value Value
       * @returns {util.LongBits} Instance
       */

      LongBits.fromNumber = function fromNumber(value) {
        if (value === 0) return zero;
        var sign = value < 0;
        if (sign) value = -value;
        var lo = value >>> 0,
            hi = (value - lo) / 4294967296 >>> 0;

        if (sign) {
          hi = ~hi >>> 0;
          lo = ~lo >>> 0;

          if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295) hi = 0;
          }
        }

        return new LongBits(lo, hi);
      };
      /**
       * Constructs new long bits from a number, long or string.
       * @param {Long|number|string} value Value
       * @returns {util.LongBits} Instance
       */


      LongBits.from = function from(value) {
        if (typeof value === "number") return LongBits.fromNumber(value);

        if (util.isString(value)) {
          /* istanbul ignore else */
          if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));
        }

        return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
      };
      /**
       * Converts this long bits to a possibly unsafe JavaScript number.
       * @param {boolean} [unsigned=false] Whether unsigned or not
       * @returns {number} Possibly unsafe number
       */


      LongBits.prototype.toNumber = function toNumber(unsigned) {
        if (!unsigned && this.hi >>> 31) {
          var lo = ~this.lo + 1 >>> 0,
              hi = ~this.hi >>> 0;
          if (!lo) hi = hi + 1 >>> 0;
          return -(lo + hi * 4294967296);
        }

        return this.lo + this.hi * 4294967296;
      };
      /**
       * Converts this long bits to a long.
       * @param {boolean} [unsigned=false] Whether unsigned or not
       * @returns {Long} Long
       */


      LongBits.prototype.toLong = function toLong(unsigned) {
        return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : {
          low: this.lo | 0,
          high: this.hi | 0,
          unsigned: Boolean(unsigned)
        };
      };

      var charCodeAt = String.prototype.charCodeAt;
      /**
       * Constructs new long bits from the specified 8 characters long hash.
       * @param {string} hash Hash
       * @returns {util.LongBits} Bits
       */

      LongBits.fromHash = function fromHash(hash) {
        if (hash === zeroHash) return zero;
        return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
      };
      /**
       * Converts this long bits to a 8 characters long hash.
       * @returns {string} Hash
       */


      LongBits.prototype.toHash = function toHash() {
        return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
      };
      /**
       * Zig-zag encodes this long bits.
       * @returns {util.LongBits} `this`
       */


      LongBits.prototype.zzEncode = function zzEncode() {
        var mask = this.hi >> 31;
        this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
        this.lo = (this.lo << 1 ^ mask) >>> 0;
        return this;
      };
      /**
       * Zig-zag decodes this long bits.
       * @returns {util.LongBits} `this`
       */


      LongBits.prototype.zzDecode = function zzDecode() {
        var mask = -(this.lo & 1);
        this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
        this.hi = (this.hi >>> 1 ^ mask) >>> 0;
        return this;
      };
      /**
       * Calculates the length of this longbits when encoded as a varint.
       * @returns {number} Length
       */


      LongBits.prototype.length = function length() {
        var part0 = this.lo,
            part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
            part2 = this.hi >>> 24;
        return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
      };
    }, {
      "39": 39
    }],
    39: [function (require, module, exports) {
      "use strict";

      var util = exports; // used to return a Promise where callback is omitted

      util.asPromise = require(1); // converts to / from base64 encoded strings

      util.base64 = require(2); // base class of rpc.Service

      util.EventEmitter = require(4); // float handling accross browsers

      util["float"] = require(6); // requires modules optionally and hides the call from bundlers

      util.inquire = require(7); // converts to / from utf8 encoded strings

      util.utf8 = require(10); // provides a node-like buffer pool in the browser

      util.pool = require(9); // utility to work with the low and high bits of a 64 bit value

      util.LongBits = require(38);
      /**
       * An immuable empty array.
       * @memberof util
       * @type {Array.<*>}
       * @const
       */

      util.emptyArray = Object.freeze ? Object.freeze([]) :
      /* istanbul ignore next */
      []; // used on prototypes

      /**
       * An immutable empty object.
       * @type {Object}
       * @const
       */

      util.emptyObject = Object.freeze ? Object.freeze({}) :
      /* istanbul ignore next */
      {}; // used on prototypes

      /**
       * Whether running within node or not.
       * @memberof util
       * @type {boolean}
       * @const
       */

      util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);
      /**
       * Tests if the specified value is an integer.
       * @function
       * @param {*} value Value to test
       * @returns {boolean} `true` if the value is an integer
       */

      util.isInteger = Number.isInteger ||
      /* istanbul ignore next */
      function isInteger(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
      };
      /**
       * Tests if the specified value is a string.
       * @param {*} value Value to test
       * @returns {boolean} `true` if the value is a string
       */


      util.isString = function isString(value) {
        return typeof value === "string" || value instanceof String;
      };
      /**
       * Tests if the specified value is a non-null object.
       * @param {*} value Value to test
       * @returns {boolean} `true` if the value is a non-null object
       */


      util.isObject = function isObject(value) {
        return value && _typeof(value) === "object";
      };
      /**
       * Checks if a property on a message is considered to be present.
       * This is an alias of {@link util.isSet}.
       * @function
       * @param {Object} obj Plain object or message instance
       * @param {string} prop Property name
       * @returns {boolean} `true` if considered to be present, otherwise `false`
       */


      util.isset =
      /**
       * Checks if a property on a message is considered to be present.
       * @param {Object} obj Plain object or message instance
       * @param {string} prop Property name
       * @returns {boolean} `true` if considered to be present, otherwise `false`
       */
      util.isSet = function isSet(obj, prop) {
        var value = obj[prop];
        if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
          return _typeof(value) !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
        return false;
      };
      /**
       * Any compatible Buffer instance.
       * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
       * @interface Buffer
       * @extends Uint8Array
       */

      /**
       * Node's Buffer class if available.
       * @type {Constructor<Buffer>}
       */


      util.Buffer = function () {
        try {
          var Buffer = util.inquire("buffer").Buffer; // refuse to use non-node buffers if not explicitly assigned (perf reasons):

          return Buffer.prototype.utf8Write ? Buffer :
          /* istanbul ignore next */
          null;
        } catch (e) {
          /* istanbul ignore next */
          return null;
        }
      }(); // Internal alias of or polyfull for Buffer.from.


      util._Buffer_from = null; // Internal alias of or polyfill for Buffer.allocUnsafe.

      util._Buffer_allocUnsafe = null;
      /**
       * Creates a new buffer of whatever type supported by the environment.
       * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
       * @returns {Uint8Array|Buffer} Buffer
       */

      util.newBuffer = function newBuffer(sizeOrArray) {
        /* istanbul ignore next */
        return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
      };
      /**
       * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
       * @type {Constructor<Uint8Array>}
       */


      util.Array = typeof Uint8Array !== "undefined" ? Uint8Array
      /* istanbul ignore next */
      : Array;
      /**
       * Any compatible Long instance.
       * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
       * @interface Long
       * @property {number} low Low bits
       * @property {number} high High bits
       * @property {boolean} unsigned Whether unsigned or not
       */

      /**
       * Long.js's Long class if available.
       * @type {Constructor<Long>}
       */

      util.Long =
      /* istanbul ignore next */
      global.dcodeIO &&
      /* istanbul ignore next */
      global.dcodeIO.Long || util.inquire("long");
      /**
       * Regular expression used to verify 2 bit (`bool`) map keys.
       * @type {RegExp}
       * @const
       */

      util.key2Re = /^true|false|0|1$/;
      /**
       * Regular expression used to verify 32 bit (`int32` etc.) map keys.
       * @type {RegExp}
       * @const
       */

      util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
      /**
       * Regular expression used to verify 64 bit (`int64` etc.) map keys.
       * @type {RegExp}
       * @const
       */

      util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
      /**
       * Converts a number or long to an 8 characters long hash string.
       * @param {Long|number} value Value to convert
       * @returns {string} Hash
       */

      util.longToHash = function longToHash(value) {
        return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
      };
      /**
       * Converts an 8 characters long hash string to a long or number.
       * @param {string} hash Hash
       * @param {boolean} [unsigned=false] Whether unsigned or not
       * @returns {Long|number} Original value
       */


      util.longFromHash = function longFromHash(hash, unsigned) {
        var bits = util.LongBits.fromHash(hash);
        if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
        return bits.toNumber(Boolean(unsigned));
      };
      /**
       * Merges the properties of the source object into the destination object.
       * @memberof util
       * @param {Object.<string,*>} dst Destination object
       * @param {Object.<string,*>} src Source object
       * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
       * @returns {Object.<string,*>} Destination object
       */


      function merge(dst, src, ifNotSet) {
        // used by converters
        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) {
          if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
        }

        return dst;
      }

      util.merge = merge;
      /**
       * Converts the first character of a string to lower case.
       * @param {string} str String to convert
       * @returns {string} Converted string
       */

      util.lcFirst = function lcFirst(str) {
        return str.charAt(0).toLowerCase() + str.substring(1);
      };
      /**
       * Creates a custom error constructor.
       * @memberof util
       * @param {string} name Error name
       * @returns {Constructor<Error>} Custom error constructor
       */


      function newError(name) {
        function CustomError(message, properties) {
          if (!(this instanceof CustomError)) return new CustomError(message, properties); // Error.call(this, message);
          // ^ just returns a new error instance because the ctor can be called as a function

          Object.defineProperty(this, "message", {
            get: function get() {
              return message;
            }
          });
          /* istanbul ignore next */

          if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, "stack", {
            value: new Error().stack || ""
          });
          if (properties) merge(this, properties);
        }

        (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
        Object.defineProperty(CustomError.prototype, "name", {
          get: function get() {
            return name;
          }
        });

        CustomError.prototype.toString = function toString() {
          return this.name + ": " + this.message;
        };

        return CustomError;
      }

      util.newError = newError;
      /**
       * Constructs a new protocol error.
       * @classdesc Error subclass indicating a protocol specifc error.
       * @memberof util
       * @extends Error
       * @template T extends Message<T>
       * @constructor
       * @param {string} message Error message
       * @param {Object.<string,*>} [properties] Additional properties
       * @example
       * try {
       *     MyMessage.decode(someBuffer); // throws if required fields are missing
       * } catch (e) {
       *     if (e instanceof ProtocolError && e.instance)
       *         console.log("decoded so far: " + JSON.stringify(e.instance));
       * }
       */

      util.ProtocolError = newError("ProtocolError");
      /**
       * So far decoded message instance.
       * @name util.ProtocolError#instance
       * @type {Message<T>}
       */

      /**
       * A OneOf getter as returned by {@link util.oneOfGetter}.
       * @typedef OneOfGetter
       * @type {function}
       * @returns {string|undefined} Set field name, if any
       */

      /**
       * Builds a getter for a oneof's present field name.
       * @param {string[]} fieldNames Field names
       * @returns {OneOfGetter} Unbound getter
       */

      util.oneOfGetter = function getOneOf(fieldNames) {
        var fieldMap = {};

        for (var i = 0; i < fieldNames.length; ++i) {
          fieldMap[fieldNames[i]] = 1;
        }
        /**
         * @returns {string|undefined} Set field name, if any
         * @this Object
         * @ignore
         */


        return function () {
          // eslint-disable-line consistent-return
          for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) {
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
          }
        };
      };
      /**
       * A OneOf setter as returned by {@link util.oneOfSetter}.
       * @typedef OneOfSetter
       * @type {function}
       * @param {string|undefined} value Field name
       * @returns {undefined}
       */

      /**
       * Builds a setter for a oneof's present field name.
       * @param {string[]} fieldNames Field names
       * @returns {OneOfSetter} Unbound setter
       */


      util.oneOfSetter = function setOneOf(fieldNames) {
        /**
         * @param {string} name Field name
         * @returns {undefined}
         * @this Object
         * @ignore
         */
        return function (name) {
          for (var i = 0; i < fieldNames.length; ++i) {
            if (fieldNames[i] !== name) delete this[fieldNames[i]];
          }
        };
      };
      /**
       * Default conversion options used for {@link Message#toJSON} implementations.
       *
       * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
       *
       * - Longs become strings
       * - Enums become string keys
       * - Bytes become base64 encoded strings
       * - (Sub-)Messages become plain objects
       * - Maps become plain objects with all string keys
       * - Repeated fields become arrays
       * - NaN and Infinity for float and double fields become strings
       *
       * @type {IConversionOptions}
       * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
       */


      util.toJSONOptions = {
        longs: String,
        enums: String,
        bytes: String,
        json: true
      };

      util._configure = function () {
        var Buffer = util.Buffer;
        /* istanbul ignore if */

        if (!Buffer) {
          util._Buffer_from = util._Buffer_allocUnsafe = null;
          return;
        } // because node 4.x buffers are incompatible & immutable
        // see: https://github.com/dcodeIO/protobuf.js/pull/665


        util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
          return new Buffer(value, encoding);
        };

        util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
          return new Buffer(size);
        };
      };
    }, {
      "1": 1,
      "10": 10,
      "2": 2,
      "38": 38,
      "4": 4,
      "6": 6,
      "7": 7,
      "9": 9
    }],
    40: [function (require, module, exports) {
      "use strict";

      module.exports = verifier;

      var Enum = require(15),
          util = require(37);

      function invalid(field, expected) {
        return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
      }
      /**
       * Generates a partial value verifier.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} ref Variable reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genVerifyValue(gen, field, fieldIndex, ref) {
        /* eslint-disable no-unexpected-multiline */
        if (field.resolvedType) {
          if (field.resolvedType instanceof Enum) {
            gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));

            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) {
              gen("case %i:", field.resolvedType.values[keys[j]]);
            }

            gen("break")("}");
          } else {
            gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
          }
        } else {
          switch (field.type) {
            case "int32":
            case "uint32":
            case "sint32":
            case "fixed32":
            case "sfixed32":
              gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
              break;

            case "int64":
            case "uint64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
              gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
              break;

            case "float":
            case "double":
              gen("if(typeof %s!==\"number\")", ref)("return%j", invalid(field, "number"));
              break;

            case "bool":
              gen("if(typeof %s!==\"boolean\")", ref)("return%j", invalid(field, "boolean"));
              break;

            case "string":
              gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
              break;

            case "bytes":
              gen("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)("return%j", invalid(field, "buffer"));
              break;
          }
        }

        return gen;
        /* eslint-enable no-unexpected-multiline */
      }
      /**
       * Generates a partial key verifier.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {string} ref Variable reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genVerifyKey(gen, field, ref) {
        /* eslint-disable no-unexpected-multiline */
        switch (field.keyType) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
            break;

          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
            ("return%j", invalid(field, "integer|Long key"));
            break;

          case "bool":
            gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
            break;
        }

        return gen;
        /* eslint-enable no-unexpected-multiline */
      }
      /**
       * Generates a verifier specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      function verifier(mtype) {
        /* eslint-disable no-unexpected-multiline */
        var gen = util.codegen(["m"], mtype.name + "$verify")("if(typeof m!==\"object\"||m===null)")("return%j", "object expected");
        var oneofs = mtype.oneofsArray,
            seenFirstField = {};
        if (oneofs.length) gen("var p={}");

        for (var i = 0; i <
        /* initializes */
        mtype.fieldsArray.length; ++i) {
          var field = mtype._fieldsArray[i].resolve(),
              ref = "m" + util.safeProp(field.name);

          if (field.optional) gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null
          // map fields

          if (field.map) {
            gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
            genVerifyKey(gen, field, "k[i]");
            genVerifyValue(gen, field, i, ref + "[k[i]]")("}"); // repeated fields
          } else if (field.repeated) {
            gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
            genVerifyValue(gen, field, i, ref + "[i]")("}"); // required or present fields
          } else {
            if (field.partOf) {
              var oneofProp = util.safeProp(field.partOf.name);
              if (seenFirstField[field.partOf.name] === 1) gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
              seenFirstField[field.partOf.name] = 1;
              gen("p%s=1", oneofProp);
            }

            genVerifyValue(gen, field, i, ref);
          }

          if (field.optional) gen("}");
        }

        return gen("return null");
        /* eslint-enable no-unexpected-multiline */
      }
    }, {
      "15": 15,
      "37": 37
    }],
    41: [function (require, module, exports) {
      "use strict";
      /**
       * Wrappers for common types.
       * @type {Object.<string,IWrapper>}
       * @const
       */

      var wrappers = exports;

      var Message = require(21);
      /**
       * From object converter part of an {@link IWrapper}.
       * @typedef WrapperFromObjectConverter
       * @type {function}
       * @param {Object.<string,*>} object Plain object
       * @returns {Message<{}>} Message instance
       * @this Type
       */

      /**
       * To object converter part of an {@link IWrapper}.
       * @typedef WrapperToObjectConverter
       * @type {function}
       * @param {Message<{}>} message Message instance
       * @param {IConversionOptions} [options] Conversion options
       * @returns {Object.<string,*>} Plain object
       * @this Type
       */

      /**
       * Common type wrapper part of {@link wrappers}.
       * @interface IWrapper
       * @property {WrapperFromObjectConverter} [fromObject] From object converter
       * @property {WrapperToObjectConverter} [toObject] To object converter
       */
      // Custom wrapper for Any


      wrappers[".google.protobuf.Any"] = {
        fromObject: function fromObject(object) {
          // unwrap value type if mapped
          if (object && object["@type"]) {
            var type = this.lookup(object["@type"]);
            /* istanbul ignore else */

            if (type) {
              // type_url does not accept leading "."
              var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"]; // type_url prefix is optional, but path seperator is required

              return this.create({
                type_url: "/" + type_url,
                value: type.encode(type.fromObject(object)).finish()
              });
            }
          }

          return this.fromObject(object);
        },
        toObject: function toObject(message, options) {
          // decode value if requested and unmapped
          if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            var name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */

            if (type) message = type.decode(message.value);
          } // wrap value if unmapped


          if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            object["@type"] = message.$type.fullName;
            return object;
          }

          return this.toObject(message, options);
        }
      };
    }, {
      "21": 21
    }],
    42: [function (require, module, exports) {
      "use strict";

      module.exports = Writer;

      var util = require(39);

      var BufferWriter; // cyclic

      var LongBits = util.LongBits,
          base64 = util.base64,
          utf8 = util.utf8;
      /**
       * Constructs a new writer operation instance.
       * @classdesc Scheduled writer operation.
       * @constructor
       * @param {function(*, Uint8Array, number)} fn Function to call
       * @param {number} len Value byte length
       * @param {*} val Value to write
       * @ignore
       */

      function Op(fn, len, val) {
        /**
         * Function to call.
         * @type {function(Uint8Array, number, *)}
         */
        this.fn = fn;
        /**
         * Value byte length.
         * @type {number}
         */

        this.len = len;
        /**
         * Next operation.
         * @type {Writer.Op|undefined}
         */

        this.next = undefined;
        /**
         * Value to write.
         * @type {*}
         */

        this.val = val; // type varies
      }
      /* istanbul ignore next */


      function noop() {} // eslint-disable-line no-empty-function

      /**
       * Constructs a new writer state instance.
       * @classdesc Copied writer state.
       * @memberof Writer
       * @constructor
       * @param {Writer} writer Writer to copy state from
       * @ignore
       */


      function State(writer) {
        /**
         * Current head.
         * @type {Writer.Op}
         */
        this.head = writer.head;
        /**
         * Current tail.
         * @type {Writer.Op}
         */

        this.tail = writer.tail;
        /**
         * Current buffer length.
         * @type {number}
         */

        this.len = writer.len;
        /**
         * Next state.
         * @type {State|null}
         */

        this.next = writer.states;
      }
      /**
       * Constructs a new writer instance.
       * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
       * @constructor
       */


      function Writer() {
        /**
         * Current length.
         * @type {number}
         */
        this.len = 0;
        /**
         * Operations head.
         * @type {Object}
         */

        this.head = new Op(noop, 0, 0);
        /**
         * Operations tail
         * @type {Object}
         */

        this.tail = this.head;
        /**
         * Linked forked states.
         * @type {Object|null}
         */

        this.states = null; // When a value is written, the writer calculates its byte length and puts it into a linked
        // list of operations to perform when finish() is called. This both allows us to allocate
        // buffers of the exact required size and reduces the amount of work we have to do compared
        // to first calculating over objects and then encoding over objects. In our case, the encoding
        // part is just a linked list walk calling operations with already prepared values.
      }
      /**
       * Creates a new writer.
       * @function
       * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
       */


      Writer.create = util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      }
      /* istanbul ignore next */
      : function create_array() {
        return new Writer();
      };
      /**
       * Allocates a buffer of the specified size.
       * @param {number} size Buffer size
       * @returns {Uint8Array} Buffer
       */

      Writer.alloc = function alloc(size) {
        return new util.Array(size);
      }; // Use Uint8Array buffer pool in the browser, just like node does with buffers

      /* istanbul ignore else */


      if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
      /**
       * Pushes a new operation to the queue.
       * @param {function(Uint8Array, number, *)} fn Function to call
       * @param {number} len Value byte length
       * @param {number} val Value to write
       * @returns {Writer} `this`
       * @private
       */

      Writer.prototype._push = function push(fn, len, val) {
        this.tail = this.tail.next = new Op(fn, len, val);
        this.len += len;
        return this;
      };

      function writeByte(val, buf, pos) {
        buf[pos] = val & 255;
      }

      function writeVarint32(val, buf, pos) {
        while (val > 127) {
          buf[pos++] = val & 127 | 128;
          val >>>= 7;
        }

        buf[pos] = val;
      }
      /**
       * Constructs a new varint writer operation instance.
       * @classdesc Scheduled varint writer operation.
       * @extends Op
       * @constructor
       * @param {number} len Value byte length
       * @param {number} val Value to write
       * @ignore
       */


      function VarintOp(len, val) {
        this.len = len;
        this.next = undefined;
        this.val = val;
      }

      VarintOp.prototype = Object.create(Op.prototype);
      VarintOp.prototype.fn = writeVarint32;
      /**
       * Writes an unsigned 32 bit value as a varint.
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */

      Writer.prototype.uint32 = function write_uint32(value) {
        // here, the call to this.push has been inlined and a varint specific Op subclass is used.
        // uint32 is by far the most frequently used operation and benefits significantly from this.
        this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
        return this;
      };
      /**
       * Writes a signed 32 bit value as a varint.
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.int32 = function write_int32(value) {
        return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
      };
      /**
       * Writes a 32 bit value as a varint, zig-zag encoded.
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.sint32 = function write_sint32(value) {
        return this.uint32((value << 1 ^ value >> 31) >>> 0);
      };

      function writeVarint64(val, buf, pos) {
        while (val.hi) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
          val.hi >>>= 7;
        }

        while (val.lo > 127) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = val.lo >>> 7;
        }

        buf[pos++] = val.lo;
      }
      /**
       * Writes an unsigned 64 bit value as a varint.
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */


      Writer.prototype.uint64 = function write_uint64(value) {
        var bits = LongBits.from(value);
        return this._push(writeVarint64, bits.length(), bits);
      };
      /**
       * Writes a signed 64 bit value as a varint.
       * @function
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */


      Writer.prototype.int64 = Writer.prototype.uint64;
      /**
       * Writes a signed 64 bit value as a varint, zig-zag encoded.
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */

      Writer.prototype.sint64 = function write_sint64(value) {
        var bits = LongBits.from(value).zzEncode();
        return this._push(writeVarint64, bits.length(), bits);
      };
      /**
       * Writes a boolish value as a varint.
       * @param {boolean} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.bool = function write_bool(value) {
        return this._push(writeByte, 1, value ? 1 : 0);
      };

      function writeFixed32(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }
      /**
       * Writes an unsigned 32 bit value as fixed 32 bits.
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.fixed32 = function write_fixed32(value) {
        return this._push(writeFixed32, 4, value >>> 0);
      };
      /**
       * Writes a signed 32 bit value as fixed 32 bits.
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.sfixed32 = Writer.prototype.fixed32;
      /**
       * Writes an unsigned 64 bit value as fixed 64 bits.
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */

      Writer.prototype.fixed64 = function write_fixed64(value) {
        var bits = LongBits.from(value);
        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
      };
      /**
       * Writes a signed 64 bit value as fixed 64 bits.
       * @function
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */


      Writer.prototype.sfixed64 = Writer.prototype.fixed64;
      /**
       * Writes a float (32 bit).
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */

      Writer.prototype["float"] = function write_float(value) {
        return this._push(util["float"].writeFloatLE, 4, value);
      };
      /**
       * Writes a double (64 bit float).
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype["double"] = function write_double(value) {
        return this._push(util["float"].writeDoubleLE, 8, value);
      };

      var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
      }
      /* istanbul ignore next */
      : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i) {
          buf[pos + i] = val[i];
        }
      };
      /**
       * Writes a sequence of bytes.
       * @param {Uint8Array|string} value Buffer or base64 encoded string to write
       * @returns {Writer} `this`
       */

      Writer.prototype.bytes = function write_bytes(value) {
        var len = value.length >>> 0;
        if (!len) return this._push(writeByte, 1, 0);

        if (util.isString(value)) {
          var buf = Writer.alloc(len = base64.length(value));
          base64.decode(value, buf, 0);
          value = buf;
        }

        return this.uint32(len)._push(writeBytes, len, value);
      };
      /**
       * Writes a string.
       * @param {string} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.string = function write_string(value) {
        var len = utf8.length(value);
        return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
      };
      /**
       * Forks this writer's state by pushing it to a stack.
       * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
       * @returns {Writer} `this`
       */


      Writer.prototype.fork = function fork() {
        this.states = new State(this);
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
        return this;
      };
      /**
       * Resets this instance to the last state.
       * @returns {Writer} `this`
       */


      Writer.prototype.reset = function reset() {
        if (this.states) {
          this.head = this.states.head;
          this.tail = this.states.tail;
          this.len = this.states.len;
          this.states = this.states.next;
        } else {
          this.head = this.tail = new Op(noop, 0, 0);
          this.len = 0;
        }

        return this;
      };
      /**
       * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
       * @returns {Writer} `this`
       */


      Writer.prototype.ldelim = function ldelim() {
        var head = this.head,
            tail = this.tail,
            len = this.len;
        this.reset().uint32(len);

        if (len) {
          this.tail.next = head.next; // skip noop

          this.tail = tail;
          this.len += len;
        }

        return this;
      };
      /**
       * Finishes the write operation.
       * @returns {Uint8Array} Finished buffer
       */


      Writer.prototype.finish = function finish() {
        var head = this.head.next,
            // skip noop
        buf = this.constructor.alloc(this.len),
            pos = 0;

        while (head) {
          head.fn(head.val, buf, pos);
          pos += head.len;
          head = head.next;
        } // this.head = this.tail = null;


        return buf;
      };

      Writer._configure = function (BufferWriter_) {
        BufferWriter = BufferWriter_;
      };
    }, {
      "39": 39
    }],
    43: [function (require, module, exports) {
      "use strict";

      module.exports = BufferWriter; // extends Writer

      var Writer = require(42);

      (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

      var util = require(39);

      var Buffer = util.Buffer;
      /**
       * Constructs a new buffer writer instance.
       * @classdesc Wire format writer using node buffers.
       * @extends Writer
       * @constructor
       */

      function BufferWriter() {
        Writer.call(this);
      }
      /**
       * Allocates a buffer of the specified size.
       * @param {number} size Buffer size
       * @returns {Buffer} Buffer
       */


      BufferWriter.alloc = function alloc_buffer(size) {
        return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
      };

      var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
        // also works for plain array values
      }
      /* istanbul ignore next */
      : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) // Buffer values
          val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;) {
          // plain array values
          buf[pos++] = val[i++];
        }
      };
      /**
       * @override
       */

      BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
        if (util.isString(value)) value = util._Buffer_from(value, "base64");
        var len = value.length >>> 0;
        this.uint32(len);
        if (len) this._push(writeBytesBuffer, len, value);
        return this;
      };

      function writeStringBuffer(val, buf, pos) {
        if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
          util.utf8.write(val, buf, pos);else buf.utf8Write(val, pos);
      }
      /**
       * @override
       */


      BufferWriter.prototype.string = function write_string_buffer(value) {
        var len = Buffer.byteLength(value);
        this.uint32(len);
        if (len) this._push(writeStringBuffer, len, value);
        return this;
      };
      /**
       * Finishes the write operation.
       * @name BufferWriter#finish
       * @function
       * @returns {Buffer} Finished buffer
       */

    }, {
      "39": 39,
      "42": 42
    }]
  }, {}, [19]);
})((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window || (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self || void 0); //# sourceMappingURL=protobuf.js.map

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------
